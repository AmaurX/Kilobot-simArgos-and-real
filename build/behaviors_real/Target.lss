
../../build/behaviors_real/Target.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	50 02       	muls	r21, r16
      6a:	cc 02       	muls	r28, r28
      6c:	24 02       	muls	r18, r20
      6e:	1b 02       	muls	r17, r27
      70:	21 02       	muls	r18, r17
      72:	ae 02       	muls	r26, r30
      74:	a3 02       	muls	r26, r19
      76:	2e 09       	sbc	r18, r14
      78:	0b 08       	sbc	r0, r11
      7a:	0b 08       	sbc	r0, r11
      7c:	2b 09       	sbc	r18, r11
      7e:	37 09       	sbc	r19, r7
      80:	27 09       	sbc	r18, r7
      82:	3e 09       	sbc	r19, r14
      84:	3a 09       	sbc	r19, r10
      86:	42 09       	sbc	r20, r2
      88:	fa 08       	sbc	r15, r10
      8a:	cc 08       	sbc	r12, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24
      aa:	10 92 60 00 	sts	0x0060, r1
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e4       	ldi	r30, 0x40	; 64
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	af 37       	cpi	r26, 0x7F	; 127
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <main>
      da:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
/*-------------------------------------------------------------------*/
/* Callback function for message transmission                        */
/*-------------------------------------------------------------------*/
message_t *message_tx()
{
    if (msg_sent)
      e2:	80 91 10 01 	lds	r24, 0x0110
      e6:	88 23       	and	r24, r24
      e8:	19 f0       	breq	.+6      	; 0xf0 <message_tx+0xe>
    {
        return &message;
      ea:	85 e1       	ldi	r24, 0x15	; 21
      ec:	91 e0       	ldi	r25, 0x01	; 1
    }
    return 0;
}
      ee:	08 95       	ret
{
    if (msg_sent)
    {
        return &message;
    }
    return 0;
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	08 95       	ret

000000f6 <tx_message_success>:
/*-------------------------------------------------------------------*/
/* Callback function for successful transmission                     */
/*-------------------------------------------------------------------*/
void tx_message_success()
{
    msg_sent = false;
      f6:	10 92 10 01 	sts	0x0110, r1
      fa:	08 95       	ret

000000fc <setup>:
}

void setup()
{
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29

    /* Compute the message CRC value */
    message.data[0] = (uint8_t)id_target;
     100:	c5 e1       	ldi	r28, 0x15	; 21
     102:	d1 e0       	ldi	r29, 0x01	; 1
     104:	18 82       	st	Y, r1
    message.type = NORMAL;
     106:	19 86       	std	Y+9, r1	; 0x09
    message.crc = message_crc(&message);
     108:	ce 01       	movw	r24, r28
     10a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <message_crc>
     10e:	9b 87       	std	Y+11, r25	; 0x0b
     110:	8a 87       	std	Y+10, r24	; 0x0a
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <loop>:
/* Function to sent a message              */
/*-------------------------------------------------------------------*/
void broadcast()
{

    if (!msg_sent && kilo_ticks > last_broadcast_ticks + max_broadcast_ticks)
     118:	80 91 10 01 	lds	r24, 0x0110
     11c:	81 11       	cpse	r24, r1
     11e:	18 c0       	rjmp	.+48     	; 0x150 <loop+0x38>
     120:	40 91 44 01 	lds	r20, 0x0144
     124:	50 91 45 01 	lds	r21, 0x0145
     128:	60 91 46 01 	lds	r22, 0x0146
     12c:	70 91 47 01 	lds	r23, 0x0147
     130:	80 91 0c 01 	lds	r24, 0x010C
     134:	90 91 0d 01 	lds	r25, 0x010D
     138:	a0 91 0e 01 	lds	r26, 0x010E
     13c:	b0 91 0f 01 	lds	r27, 0x010F
     140:	80 96       	adiw	r24, 0x20	; 32
     142:	a1 1d       	adc	r26, r1
     144:	b1 1d       	adc	r27, r1
     146:	84 17       	cp	r24, r20
     148:	95 07       	cpc	r25, r21
     14a:	a6 07       	cpc	r26, r22
     14c:	b7 07       	cpc	r27, r23
     14e:	08 f0       	brcs	.+2      	; 0x152 <loop+0x3a>
     150:	08 95       	ret
    {
        last_broadcast_ticks = kilo_ticks;
     152:	80 91 44 01 	lds	r24, 0x0144
     156:	90 91 45 01 	lds	r25, 0x0145
     15a:	a0 91 46 01 	lds	r26, 0x0146
     15e:	b0 91 47 01 	lds	r27, 0x0147
     162:	80 93 0c 01 	sts	0x010C, r24
     166:	90 93 0d 01 	sts	0x010D, r25
     16a:	a0 93 0e 01 	sts	0x010E, r26
     16e:	b0 93 0f 01 	sts	0x010F, r27
        // Reset the flag so the LED is only blinked once per message.
        msg_sent = true;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 93 10 01 	sts	0x0110, r24
        //color the LED magenta
        set_color(RGB(1, 0, 1));
     178:	81 e1       	ldi	r24, 0x11	; 17
     17a:	0e 94 85 07 	call	0xf0a	; 0xf0a <set_color>
        /* send the message every 1 sec*/
        delay(100);
     17e:	84 e6       	ldi	r24, 0x64	; 100
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 59 03 	call	0x6b2	; 0x6b2 <delay>
        set_color(RGB(0, 0, 0));
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <set_color>

0000018c <broadcast>:
/* Function to sent a message              */
/*-------------------------------------------------------------------*/
void broadcast()
{

    if (!msg_sent && kilo_ticks > last_broadcast_ticks + max_broadcast_ticks)
     18c:	80 91 10 01 	lds	r24, 0x0110
     190:	81 11       	cpse	r24, r1
     192:	18 c0       	rjmp	.+48     	; 0x1c4 <broadcast+0x38>
     194:	40 91 44 01 	lds	r20, 0x0144
     198:	50 91 45 01 	lds	r21, 0x0145
     19c:	60 91 46 01 	lds	r22, 0x0146
     1a0:	70 91 47 01 	lds	r23, 0x0147
     1a4:	80 91 0c 01 	lds	r24, 0x010C
     1a8:	90 91 0d 01 	lds	r25, 0x010D
     1ac:	a0 91 0e 01 	lds	r26, 0x010E
     1b0:	b0 91 0f 01 	lds	r27, 0x010F
     1b4:	80 96       	adiw	r24, 0x20	; 32
     1b6:	a1 1d       	adc	r26, r1
     1b8:	b1 1d       	adc	r27, r1
     1ba:	84 17       	cp	r24, r20
     1bc:	95 07       	cpc	r25, r21
     1be:	a6 07       	cpc	r26, r22
     1c0:	b7 07       	cpc	r27, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <broadcast+0x3a>
     1c4:	08 95       	ret
    {
        last_broadcast_ticks = kilo_ticks;
     1c6:	80 91 44 01 	lds	r24, 0x0144
     1ca:	90 91 45 01 	lds	r25, 0x0145
     1ce:	a0 91 46 01 	lds	r26, 0x0146
     1d2:	b0 91 47 01 	lds	r27, 0x0147
     1d6:	80 93 0c 01 	sts	0x010C, r24
     1da:	90 93 0d 01 	sts	0x010D, r25
     1de:	a0 93 0e 01 	sts	0x010E, r26
     1e2:	b0 93 0f 01 	sts	0x010F, r27
        // Reset the flag so the LED is only blinked once per message.
        msg_sent = true;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	80 93 10 01 	sts	0x0110, r24
        //color the LED magenta
        set_color(RGB(1, 0, 1));
     1ec:	81 e1       	ldi	r24, 0x11	; 17
     1ee:	0e 94 85 07 	call	0xf0a	; 0xf0a <set_color>
        /* send the message every 1 sec*/
        delay(100);
     1f2:	84 e6       	ldi	r24, 0x64	; 100
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <delay>
        set_color(RGB(0, 0, 0));
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <set_color>

00000200 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     200:	08 95       	ret

00000202 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	08 95       	ret

00000208 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     208:	08 95       	ret

0000020a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     20a:	df 92       	push	r13
     20c:	ef 92       	push	r14
     20e:	ff 92       	push	r15
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
    cli();
     218:	f8 94       	cli

    ports_off();
     21a:	14 b8       	out	0x04, r1	; 4
     21c:	17 b8       	out	0x07, r1	; 7
     21e:	1a b8       	out	0x0a, r1	; 10
     220:	15 b8       	out	0x05, r1	; 5
     222:	18 b8       	out	0x08, r1	; 8
     224:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     226:	52 9a       	sbi	0x0a, 2	; 10
     228:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     22a:	14 bc       	out	0x24, r1	; 36
     22c:	85 e0       	ldi	r24, 0x05	; 5
     22e:	85 bd       	out	0x25, r24	; 37
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	87 bd       	out	0x27, r24	; 39
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     23a:	10 92 80 00 	sts	0x0080, r1
     23e:	10 92 81 00 	sts	0x0081, r1
     242:	2f e8       	ldi	r18, 0x8F	; 143
     244:	3b e0       	ldi	r19, 0x0B	; 11
     246:	30 93 89 00 	sts	0x0089, r19
     24a:	20 93 88 00 	sts	0x0088, r18
     24e:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     252:	53 98       	cbi	0x0a, 3	; 10
     254:	23 98       	cbi	0x04, 3	; 4
     256:	91 ea       	ldi	r25, 0xA1	; 161
     258:	90 93 b0 00 	sts	0x00B0, r25
     25c:	80 93 b1 00 	sts	0x00B1, r24
     260:	10 92 b4 00 	sts	0x00B4, r1
     264:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     268:	8b e0       	ldi	r24, 0x0B	; 11
     26a:	80 bf       	out	0x30, r24	; 48
     26c:	83 e0       	ldi	r24, 0x03	; 3
     26e:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	80 93 7c 00 	sts	0x007C, r24
     278:	83 e8       	ldi	r24, 0x83	; 131
     27a:	80 93 7a 00 	sts	0x007A, r24
     27e:	80 91 7a 00 	lds	r24, 0x007A
     282:	80 64       	ori	r24, 0x40	; 64
     284:	80 93 7a 00 	sts	0x007A, r24
     288:	80 91 7a 00 	lds	r24, 0x007A
     28c:	86 fd       	sbrc	r24, 6
     28e:	fc cf       	rjmp	.-8      	; 0x288 <kilo_init+0x7e>
    adc_trigger_high_gain();
     290:	10 92 7c 00 	sts	0x007C, r1
     294:	83 ea       	ldi	r24, 0xA3	; 163
     296:	80 93 7a 00 	sts	0x007A, r24
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
    if (osccal != 0xFF)
     2a8:	8f 3f       	cpi	r24, 0xFF	; 255
     2aa:	11 f0       	breq	.+4      	; 0x2b0 <kilo_init+0xa6>
        OSCCAL = osccal;
     2ac:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     2b0:	10 92 48 01 	sts	0x0148, r1
    rx_leadingbit = 1;
     2b4:	c1 e0       	ldi	r28, 0x01	; 1
     2b6:	c0 93 21 01 	sts	0x0121, r28
    rx_leadingbyte = 1;
     2ba:	c0 93 65 01 	sts	0x0165, r28
    rx_byteindex = 0;
     2be:	10 92 3f 01 	sts	0x013F, r1
    rx_bytevalue = 0;
     2c2:	10 92 79 01 	sts	0x0179, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     2c6:	80 e9       	ldi	r24, 0x90	; 144
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     2ce:	80 93 3e 01 	sts	0x013E, r24
    if (tx_mask & ~TX_MASK_MAX)
     2d2:	80 91 3e 01 	lds	r24, 0x013E
     2d6:	88 73       	andi	r24, 0x38	; 56
     2d8:	11 f0       	breq	.+4      	; 0x2de <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     2da:	c0 93 3e 01 	sts	0x013E, r28
    tx_clock = 0;
     2de:	10 92 69 01 	sts	0x0169, r1
     2e2:	10 92 68 01 	sts	0x0168, r1
    tx_increment = 255;
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 67 01 	sts	0x0167, r25
     2ee:	80 93 66 01 	sts	0x0166, r24
    kilo_ticks = 0;
     2f2:	10 92 44 01 	sts	0x0144, r1
     2f6:	10 92 45 01 	sts	0x0145, r1
     2fa:	10 92 46 01 	sts	0x0146, r1
     2fe:	10 92 47 01 	sts	0x0147, r1
    kilo_state = IDLE;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 14 01 	sts	0x0114, r24
    kilo_tx_period = 3906;
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	9f e0       	ldi	r25, 0x0F	; 15
     30c:	90 93 78 01 	sts	0x0178, r25
     310:	80 93 77 01 	sts	0x0177, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     314:	80 eb       	ldi	r24, 0xB0	; 176
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     31c:	c8 2f       	mov	r28, r24
     31e:	81 eb       	ldi	r24, 0xB1	; 177
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     326:	2c 2f       	mov	r18, r28
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	38 2b       	or	r19, r24
     32c:	30 93 7b 01 	sts	0x017B, r19
     330:	20 93 7a 01 	sts	0x017A, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     334:	85 e0       	ldi	r24, 0x05	; 5
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     33c:	80 93 7e 01 	sts	0x017E, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     340:	89 e0       	ldi	r24, 0x09	; 9
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     348:	80 93 6a 01 	sts	0x016A, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     34c:	8c e0       	ldi	r24, 0x0C	; 12
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     354:	80 93 7c 01 	sts	0x017C, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     360:	80 93 7d 01 	sts	0x017D, r24
     364:	59 e4       	ldi	r21, 0x49	; 73
     366:	e5 2e       	mov	r14, r21
     368:	51 e0       	ldi	r21, 0x01	; 1
     36a:	f5 2e       	mov	r15, r21
     36c:	02 e2       	ldi	r16, 0x22	; 34
     36e:	11 e0       	ldi	r17, 0x01	; 1
     370:	c0 e2       	ldi	r28, 0x20	; 32
     372:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     374:	ce 01       	movw	r24, r28
     376:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     37a:	d8 2e       	mov	r13, r24
     37c:	ce 01       	movw	r24, r28
     37e:	01 96       	adiw	r24, 0x01	; 1
     380:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     384:	2d 2d       	mov	r18, r13
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	32 2f       	mov	r19, r18
     38a:	22 27       	eor	r18, r18
     38c:	28 2b       	or	r18, r24
     38e:	f7 01       	movw	r30, r14
     390:	21 93       	st	Z+, r18
     392:	31 93       	st	Z+, r19
     394:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     396:	ce 01       	movw	r24, r28
     398:	c0 96       	adiw	r24, 0x30	; 48
     39a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     39e:	d8 2e       	mov	r13, r24
     3a0:	ce 01       	movw	r24, r28
     3a2:	c1 96       	adiw	r24, 0x31	; 49
     3a4:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <eeprom_read_byte>
     3a8:	2d 2d       	mov	r18, r13
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	32 2f       	mov	r19, r18
     3ae:	22 27       	eor	r18, r18
     3b0:	28 2b       	or	r18, r24
     3b2:	f8 01       	movw	r30, r16
     3b4:	21 93       	st	Z+, r18
     3b6:	31 93       	st	Z+, r19
     3b8:	8f 01       	movw	r16, r30
     3ba:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3bc:	cc 33       	cpi	r28, 0x3C	; 60
     3be:	d1 05       	cpc	r29, r1
     3c0:	c9 f6       	brne	.-78     	; 0x374 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3c2:	78 94       	sei
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	08 95       	ret

000003d4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     3d4:	1f 92       	push	r1
     3d6:	0f 92       	push	r0
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	8f 93       	push	r24
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	a8 95       	wdr
     3e6:	80 91 60 00 	lds	r24, 0x0060
     3ea:	88 61       	ori	r24, 0x18	; 24
     3ec:	80 93 60 00 	sts	0x0060, r24
     3f0:	10 92 60 00 	sts	0x0060, r1
     3f4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     402:	3c 01       	movw	r6, r24
     404:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     406:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     408:	99 24       	eor	r9, r9
     40a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     410:	96 e0       	ldi	r25, 0x06	; 6
     412:	a9 2e       	mov	r10, r25
     414:	23 e8       	ldi	r18, 0x83	; 131
     416:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     418:	38 e1       	ldi	r19, 0x18	; 24
     41a:	d3 2e       	mov	r13, r19
     41c:	49 e2       	ldi	r20, 0x29	; 41
     41e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     420:	90 91 14 01 	lds	r25, 0x0114
     424:	e9 2f       	mov	r30, r25
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	e7 30       	cpi	r30, 0x07	; 7
     42a:	f1 05       	cpc	r31, r1
     42c:	c8 f7       	brcc	.-14     	; 0x420 <kilo_start+0x1e>
     42e:	ec 5c       	subi	r30, 0xCC	; 204
     430:	ff 4f       	sbci	r31, 0xFF	; 255
     432:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     436:	11 23       	and	r17, r17
     438:	09 f4       	brne	.+2      	; 0x43c <kilo_start+0x3a>
     43a:	fc c0       	rjmp	.+504    	; 0x634 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     43c:	c0 92 14 01 	sts	0x0114, r12
     440:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     442:	fe 01       	movw	r30, r28
     444:	09 95       	icall
                break;
     446:	ec cf       	rjmp	.-40     	; 0x420 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     448:	80 91 48 01 	lds	r24, 0x0148
     44c:	81 11       	cpse	r24, r1
     44e:	eb c0       	rjmp	.+470    	; 0x626 <kilo_start+0x224>
        cli();                                    // disable interrupts
     450:	f8 94       	cli
        adc_setup_conversion(6);
     452:	a0 92 7c 00 	sts	0x007C, r10
     456:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     45a:	80 91 7a 00 	lds	r24, 0x007A
     45e:	80 64       	ori	r24, 0x40	; 64
     460:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     464:	90 91 7a 00 	lds	r25, 0x007A
     468:	96 fd       	sbrc	r25, 6
     46a:	fc cf       	rjmp	.-8      	; 0x464 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
     46c:	80 91 78 00 	lds	r24, 0x0078
     470:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     474:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     476:	8b 3a       	cpi	r24, 0xAB	; 171
     478:	e2 e0       	ldi	r30, 0x02	; 2
     47a:	9e 07       	cpc	r25, r30
     47c:	0c f0       	brlt	.+2      	; 0x480 <kilo_start+0x7e>
     47e:	ed c0       	rjmp	.+474    	; 0x65a <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     480:	89 38       	cpi	r24, 0x89	; 137
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	9f 07       	cpc	r25, r31
     486:	0c f0       	brlt	.+2      	; 0x48a <kilo_start+0x88>
     488:	ef c0       	rjmp	.+478    	; 0x668 <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     48a:	87 36       	cpi	r24, 0x67	; 103
     48c:	92 40       	sbci	r25, 0x02	; 2
     48e:	0c f4       	brge	.+2      	; 0x492 <kilo_start+0x90>
     490:	ca c0       	rjmp	.+404    	; 0x626 <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     492:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     494:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     496:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     498:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     49a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     49c:	3c 98       	cbi	0x07, 4	; 7
     49e:	c0 cf       	rjmp	.-128    	; 0x420 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     4a0:	f8 94       	cli
                acomp_off();
     4a2:	80 b7       	in	r24, 0x30	; 48
     4a4:	87 7f       	andi	r24, 0xF7	; 247
     4a6:	80 bf       	out	0x30, r24	; 48
                adc_off();
     4a8:	80 91 7a 00 	lds	r24, 0x007A
     4ac:	8f 77       	andi	r24, 0x7F	; 127
     4ae:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     4b2:	14 b8       	out	0x04, r1	; 4
     4b4:	17 b8       	out	0x07, r1	; 7
     4b6:	1a b8       	out	0x0a, r1	; 10
     4b8:	15 b8       	out	0x05, r1	; 5
     4ba:	18 b8       	out	0x08, r1	; 8
     4bc:	1b b8       	out	0x0b, r1	; 11
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	a8 95       	wdr
     4c4:	d0 92 60 00 	sts	0x0060, r13
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     4ce:	80 91 60 00 	lds	r24, 0x0060
     4d2:	80 64       	ori	r24, 0x40	; 64
     4d4:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     4d8:	93 b7       	in	r25, 0x33	; 51
     4da:	91 7f       	andi	r25, 0xF1	; 241
     4dc:	94 60       	ori	r25, 0x04	; 4
     4de:	93 bf       	out	0x33, r25	; 51
                cli();
     4e0:	f8 94       	cli
                sleep_enable();
     4e2:	83 b7       	in	r24, 0x33	; 51
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	83 bf       	out	0x33, r24	; 51
                sei();
     4e8:	78 94       	sei
                sleep_cpu();
     4ea:	88 95       	sleep
                sleep_disable();
     4ec:	83 b7       	in	r24, 0x33	; 51
     4ee:	8e 7f       	andi	r24, 0xFE	; 254
     4f0:	83 bf       	out	0x33, r24	; 51
                sei();
     4f2:	78 94       	sei
                rx_busy = 0;
     4f4:	10 92 48 01 	sts	0x0148, r1
                ports_on();
     4f8:	52 9a       	sbi	0x0a, 2	; 10
     4fa:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     4fc:	80 91 7a 00 	lds	r24, 0x007A
     500:	80 68       	ori	r24, 0x80	; 128
     502:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	87 e5       	ldi	r24, 0x57	; 87
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <kilo_start+0x108>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <kilo_start+0x10e>
     510:	00 00       	nop
                _delay_us(300);
                acomp_on();
     512:	80 b7       	in	r24, 0x30	; 48
     514:	88 61       	ori	r24, 0x18	; 24
     516:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     518:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     51a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     51c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     51e:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     520:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     522:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     524:	ef e1       	ldi	r30, 0x1F	; 31
     526:	fe e4       	ldi	r31, 0x4E	; 78
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <kilo_start+0x126>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <kilo_start+0x12c>
     52e:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     530:	80 91 48 01 	lds	r24, 0x0148
     534:	81 11       	cpse	r24, r1
     536:	81 c0       	rjmp	.+258    	; 0x63a <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     538:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     53a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     53c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     53e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     540:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     542:	3c 98       	cbi	0x07, 4	; 7
     544:	6d cf       	rjmp	.-294    	; 0x420 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     546:	80 91 12 01 	lds	r24, 0x0112
     54a:	81 11       	cpse	r24, r1
     54c:	41 c0       	rjmp	.+130    	; 0x5d0 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     54e:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     552:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     556:	10 92 13 01 	sts	0x0113, r1
     55a:	62 cf       	rjmp	.-316    	; 0x420 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     55c:	48 99       	sbic	0x09, 0	; 9
     55e:	ec cf       	rjmp	.-40     	; 0x538 <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     560:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     562:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     564:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     566:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     568:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     56a:	3c 98       	cbi	0x07, 4	; 7
     56c:	8f ec       	ldi	r24, 0xCF	; 207
     56e:	97 e0       	ldi	r25, 0x07	; 7
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <kilo_start+0x16e>
     574:	00 c0       	rjmp	.+0      	; 0x576 <kilo_start+0x174>
     576:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     578:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     57a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     57c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     57e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     580:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     582:	3c 98       	cbi	0x07, 4	; 7
     584:	9f ef       	ldi	r25, 0xFF	; 255
     586:	e1 ee       	ldi	r30, 0xE1	; 225
     588:	f4 e0       	ldi	r31, 0x04	; 4
     58a:	91 50       	subi	r25, 0x01	; 1
     58c:	e0 40       	sbci	r30, 0x00	; 0
     58e:	f0 40       	sbci	r31, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <kilo_start+0x188>
     592:	00 c0       	rjmp	.+0      	; 0x594 <kilo_start+0x192>
     594:	00 00       	nop
     596:	44 cf       	rjmp	.-376    	; 0x420 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     598:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     59a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     59c:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     59e:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5a0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5a2:	3c 98       	cbi	0x07, 4	; 7
     5a4:	ef ec       	ldi	r30, 0xCF	; 207
     5a6:	f7 e0       	ldi	r31, 0x07	; 7
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <kilo_start+0x1a6>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <kilo_start+0x1ac>
     5ae:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     5b0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     5b2:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     5b4:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     5b6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     5b8:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     5ba:	3c 98       	cbi	0x07, 4	; 7
     5bc:	ff ef       	ldi	r31, 0xFF	; 255
     5be:	21 ee       	ldi	r18, 0xE1	; 225
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	f1 50       	subi	r31, 0x01	; 1
     5c4:	20 40       	sbci	r18, 0x00	; 0
     5c6:	80 40       	sbci	r24, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <kilo_start+0x1c0>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <kilo_start+0x1ca>
     5cc:	00 00       	nop
     5ce:	28 cf       	rjmp	.-432    	; 0x420 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     5d0:	90 91 12 01 	lds	r25, 0x0112
     5d4:	80 91 13 01 	lds	r24, 0x0113
     5d8:	98 17       	cp	r25, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <kilo_start+0x1dc>
     5dc:	21 cf       	rjmp	.-446    	; 0x420 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     5de:	80 91 12 01 	lds	r24, 0x0112
     5e2:	80 93 13 01 	sts	0x0113, r24
                        if (cur_motion == MOVE_LEFT) {
     5e6:	80 91 12 01 	lds	r24, 0x0112
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <kilo_start+0x1ee>
     5ee:	50 c0       	rjmp	.+160    	; 0x690 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5f0:	80 91 12 01 	lds	r24, 0x0112
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5f4:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     5f8:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	d9 f1       	breq	.+118    	; 0x676 <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     600:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     604:	90 92 b4 00 	sts	0x00B4, r9
     608:	8f e2       	ldi	r24, 0x2F	; 47
     60a:	95 e7       	ldi	r25, 0x75	; 117
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <kilo_start+0x20a>
     610:	00 c0       	rjmp	.+0      	; 0x612 <kilo_start+0x210>
     612:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     614:	80 91 7d 01 	lds	r24, 0x017D
     618:	90 91 7c 01 	lds	r25, 0x017C
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     61c:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     620:	80 93 b4 00 	sts	0x00B4, r24
     624:	fd ce       	rjmp	.-518    	; 0x420 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     626:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     628:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     62a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     62c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     62e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     630:	3c 98       	cbi	0x07, 4	; 7
     632:	f6 ce       	rjmp	.-532    	; 0x420 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     634:	f3 01       	movw	r30, r6
     636:	09 95       	icall
     638:	01 cf       	rjmp	.-510    	; 0x43c <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     63a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     63c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     63e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     640:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     642:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     644:	3c 98       	cbi	0x07, 4	; 7
     646:	ff ef       	ldi	r31, 0xFF	; 255
     648:	20 e7       	ldi	r18, 0x70	; 112
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	f1 50       	subi	r31, 0x01	; 1
     64e:	20 40       	sbci	r18, 0x00	; 0
     650:	80 40       	sbci	r24, 0x00	; 0
     652:	e1 f7       	brne	.-8      	; 0x64c <kilo_start+0x24a>
     654:	00 c0       	rjmp	.+0      	; 0x656 <kilo_start+0x254>
     656:	00 00       	nop
     658:	6f cf       	rjmp	.-290    	; 0x538 <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     65a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     65c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     65e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     660:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     662:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     664:	3c 98       	cbi	0x07, 4	; 7
     666:	dc ce       	rjmp	.-584    	; 0x420 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     668:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     66a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     66c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     66e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     670:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     672:	3c 9a       	sbi	0x07, 4	; 7
     674:	d5 ce       	rjmp	.-598    	; 0x420 <kilo_start+0x1e>
     676:	ef e2       	ldi	r30, 0x2F	; 47
     678:	f5 e7       	ldi	r31, 0x75	; 117
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <kilo_start+0x278>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <kilo_start+0x27e>
     680:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     682:	80 91 6a 01 	lds	r24, 0x016A
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     686:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     68a:	80 93 b4 00 	sts	0x00B4, r24
     68e:	c8 ce       	rjmp	.-624    	; 0x420 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     690:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     694:	10 92 b4 00 	sts	0x00B4, r1
     698:	8f e2       	ldi	r24, 0x2F	; 47
     69a:	95 e7       	ldi	r25, 0x75	; 117
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <kilo_start+0x29a>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <kilo_start+0x2a0>
     6a2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     6a4:	80 91 7e 01 	lds	r24, 0x017E
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6a8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6ac:	10 92 b4 00 	sts	0x00B4, r1
     6b0:	b7 ce       	rjmp	.-658    	; 0x420 <kilo_start+0x1e>

000006b2 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <delay+0x10>
     6b4:	ef ec       	ldi	r30, 0xCF	; 207
     6b6:	f7 e0       	ldi	r31, 0x07	; 7
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <delay+0x6>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <delay+0xc>
     6be:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     6c0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	b9 f7       	brne	.-18     	; 0x6b4 <delay+0x2>
     6c6:	08 95       	ret

000006c8 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6c8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6cc:	60 93 b4 00 	sts	0x00B4, r22
     6d0:	08 95       	ret

000006d2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     6d8:	80 93 b4 00 	sts	0x00B4, r24
     6dc:	8f e0       	ldi	r24, 0x0F	; 15
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	ef ec       	ldi	r30, 0xCF	; 207
     6e2:	f7 e0       	ldi	r31, 0x07	; 7
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <spinup_motors+0x12>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <spinup_motors+0x18>
     6ea:	00 00       	nop
     6ec:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     6ee:	c1 f7       	brne	.-16     	; 0x6e0 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     6f0:	08 95       	ret

000006f2 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     6f2:	80 91 48 01 	lds	r24, 0x0148
     6f6:	81 11       	cpse	r24, r1
     6f8:	1e c0       	rjmp	.+60     	; 0x736 <get_ambientlight+0x44>
        cli();
     6fa:	f8 94       	cli
        adc_setup_conversion(7);
     6fc:	87 e0       	ldi	r24, 0x07	; 7
     6fe:	80 93 7c 00 	sts	0x007C, r24
     702:	83 e8       	ldi	r24, 0x83	; 131
     704:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     708:	80 91 7a 00 	lds	r24, 0x007A
     70c:	80 64       	ori	r24, 0x40	; 64
     70e:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     712:	80 91 7a 00 	lds	r24, 0x007A
     716:	86 fd       	sbrc	r24, 6
     718:	fc cf       	rjmp	.-8      	; 0x712 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     71a:	80 91 78 00 	lds	r24, 0x0078
     71e:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     722:	10 92 7c 00 	sts	0x007C, r1
     726:	23 ea       	ldi	r18, 0xA3	; 163
     728:	20 93 7a 00 	sts	0x007A, r18
     72c:	21 e0       	ldi	r18, 0x01	; 1
     72e:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     732:	78 94       	sei
     734:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     73a:	08 95       	ret

0000073c <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     73c:	80 91 48 01 	lds	r24, 0x0148
     740:	81 11       	cpse	r24, r1
     742:	1e c0       	rjmp	.+60     	; 0x780 <get_temperature+0x44>
        cli();
     744:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     746:	88 ec       	ldi	r24, 0xC8	; 200
     748:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     74c:	87 e8       	ldi	r24, 0x87	; 135
     74e:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     752:	80 91 7a 00 	lds	r24, 0x007A
     756:	80 64       	ori	r24, 0x40	; 64
     758:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     75c:	80 91 7a 00 	lds	r24, 0x007A
     760:	86 fd       	sbrc	r24, 6
     762:	fc cf       	rjmp	.-8      	; 0x75c <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     764:	80 91 78 00 	lds	r24, 0x0078
     768:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     76c:	10 92 7c 00 	sts	0x007C, r1
     770:	23 ea       	ldi	r18, 0xA3	; 163
     772:	20 93 7a 00 	sts	0x007A, r18
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     77c:	78 94       	sei
     77e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     784:	08 95       	ret

00000786 <rand_hard>:

uint8_t rand_hard() {
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	e0 e0       	ldi	r30, 0x00	; 0
     790:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     792:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     794:	03 ea       	ldi	r16, 0xA3	; 163
     796:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     798:	d6 e0       	ldi	r29, 0x06	; 6
     79a:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     79c:	a1 e0       	ldi	r26, 0x01	; 1
     79e:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     7a0:	60 e8       	ldi	r22, 0x80	; 128
     7a2:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     7a4:	f8 94       	cli
            adc_setup_conversion(6);
     7a6:	d0 93 7c 00 	sts	0x007C, r29
     7aa:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
     7ae:	90 91 7a 00 	lds	r25, 0x007A
     7b2:	90 64       	ori	r25, 0x40	; 64
     7b4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7b8:	90 91 7a 00 	lds	r25, 0x007A
     7bc:	96 fd       	sbrc	r25, 6
     7be:	fc cf       	rjmp	.-8      	; 0x7b8 <rand_hard+0x32>
            a = ADCW&0x1;
     7c0:	20 91 78 00 	lds	r18, 0x0078
     7c4:	30 91 79 00 	lds	r19, 0x0079
     7c8:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     7ca:	90 91 7a 00 	lds	r25, 0x007A
     7ce:	90 64       	ori	r25, 0x40	; 64
     7d0:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     7d4:	90 91 7a 00 	lds	r25, 0x007A
     7d8:	96 fd       	sbrc	r25, 6
     7da:	fc cf       	rjmp	.-8      	; 0x7d4 <rand_hard+0x4e>
            b = ADCW&0x1;
     7dc:	40 91 78 00 	lds	r20, 0x0078
     7e0:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     7e4:	10 92 7c 00 	sts	0x007C, r1
     7e8:	00 93 7a 00 	sts	0x007A, r16
     7ec:	10 93 7b 00 	sts	0x007B, r17
            sei();
     7f0:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     7f2:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     7f4:	24 13       	cpse	r18, r20
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <rand_hard+0x78>
     7f8:	61 50       	subi	r22, 0x01	; 1
     7fa:	71 09       	sbc	r23, r1
     7fc:	99 f6       	brne	.-90     	; 0x7a4 <rand_hard+0x1e>
        if (a)
     7fe:	22 23       	and	r18, r18
     800:	39 f0       	breq	.+14     	; 0x810 <rand_hard+0x8a>
            num |= (1<<i);
     802:	9d 01       	movw	r18, r26
     804:	0e 2e       	mov	r0, r30
     806:	01 c0       	rjmp	.+2      	; 0x80a <rand_hard+0x84>
     808:	22 0f       	add	r18, r18
     80a:	0a 94       	dec	r0
     80c:	ea f7       	brpl	.-6      	; 0x808 <rand_hard+0x82>
     80e:	82 2b       	or	r24, r18
     810:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     812:	e8 30       	cpi	r30, 0x08	; 8
     814:	f1 05       	cpc	r31, r1
     816:	09 f0       	breq	.+2      	; 0x81a <rand_hard+0x94>
     818:	c3 cf       	rjmp	.-122    	; 0x7a0 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     824:	80 91 00 01 	lds	r24, 0x0100
     828:	98 2f       	mov	r25, r24
     82a:	99 0f       	add	r25, r25
     82c:	99 0f       	add	r25, r25
     82e:	99 0f       	add	r25, r25
     830:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     832:	90 91 11 01 	lds	r25, 0x0111
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	29 0f       	add	r18, r25
     83a:	20 93 11 01 	sts	0x0111, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     83e:	28 2f       	mov	r18, r24
     840:	22 95       	swap	r18
     842:	26 95       	lsr	r18
     844:	27 70       	andi	r18, 0x07	; 7
     846:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
     848:	96 95       	lsr	r25
     84a:	96 95       	lsr	r25
     84c:	89 27       	eor	r24, r25
     84e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     852:	08 95       	ret

00000854 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     854:	80 93 00 01 	sts	0x0100, r24
     858:	08 95       	ret

0000085a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     85a:	80 91 48 01 	lds	r24, 0x0148
     85e:	81 11       	cpse	r24, r1
     860:	16 c0       	rjmp	.+44     	; 0x88e <get_voltage+0x34>
        cli();                                    // disable interrupts
     862:	f8 94       	cli
        adc_setup_conversion(6);
     864:	86 e0       	ldi	r24, 0x06	; 6
     866:	80 93 7c 00 	sts	0x007C, r24
     86a:	83 e8       	ldi	r24, 0x83	; 131
     86c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     870:	80 91 7a 00 	lds	r24, 0x007A
     874:	80 64       	ori	r24, 0x40	; 64
     876:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     87a:	80 91 7a 00 	lds	r24, 0x007A
     87e:	86 fd       	sbrc	r24, 6
     880:	fc cf       	rjmp	.-8      	; 0x87a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     882:	80 91 78 00 	lds	r24, 0x0078
     886:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     88a:	78 94       	sei
     88c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     892:	08 95       	ret

00000894 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     894:	2f 92       	push	r2
     896:	3f 92       	push	r3
     898:	4f 92       	push	r4
     89a:	5f 92       	push	r5
     89c:	6f 92       	push	r6
     89e:	7f 92       	push	r7
     8a0:	8f 92       	push	r8
     8a2:	9f 92       	push	r9
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <estimate_distance+0x26>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <estimate_distance+0x28>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <estimate_distance+0x2a>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     8c4:	dc 01       	movw	r26, r24
     8c6:	12 96       	adiw	r26, 0x02	; 2
     8c8:	0d 90       	ld	r0, X+
     8ca:	bc 91       	ld	r27, X
     8cc:	a0 2d       	mov	r26, r0
     8ce:	be 83       	std	Y+6, r27	; 0x06
     8d0:	ad 83       	std	Y+5, r26	; 0x05
     8d2:	a4 38       	cpi	r26, 0x84	; 132
     8d4:	e3 e0       	ldi	r30, 0x03	; 3
     8d6:	be 07       	cpc	r27, r30
     8d8:	0c f0       	brlt	.+2      	; 0x8dc <estimate_distance+0x48>
     8da:	c9 c0       	rjmp	.+402    	; 0xa6e <__stack+0x16f>
        if (dist->high_gain > kilo_irhigh[0]) {
     8dc:	80 91 22 01 	lds	r24, 0x0122
     8e0:	90 91 23 01 	lds	r25, 0x0123
     8e4:	8a 17       	cp	r24, r26
     8e6:	9b 07       	cpc	r25, r27
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <estimate_distance+0x58>
     8ea:	37 c1       	rjmp	.+622    	; 0xb5a <__stack+0x25b>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     8ec:	00 91 24 01 	lds	r16, 0x0124
     8f0:	10 91 25 01 	lds	r17, 0x0125
     8f4:	0a 17       	cp	r16, r26
     8f6:	1b 07       	cpc	r17, r27
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <estimate_distance+0x68>
     8fa:	2f c2       	rjmp	.+1118   	; 0xd5a <__stack+0x45b>
     8fc:	00 91 26 01 	lds	r16, 0x0126
     900:	10 91 27 01 	lds	r17, 0x0127
     904:	0a 17       	cp	r16, r26
     906:	1b 07       	cpc	r17, r27
     908:	08 f4       	brcc	.+2      	; 0x90c <__stack+0xd>
     90a:	2f c2       	rjmp	.+1118   	; 0xd6a <__stack+0x46b>
     90c:	00 91 28 01 	lds	r16, 0x0128
     910:	10 91 29 01 	lds	r17, 0x0129
     914:	0a 17       	cp	r16, r26
     916:	1b 07       	cpc	r17, r27
     918:	08 f4       	brcc	.+2      	; 0x91c <__stack+0x1d>
     91a:	2f c2       	rjmp	.+1118   	; 0xd7a <__stack+0x47b>
     91c:	00 91 2a 01 	lds	r16, 0x012A
     920:	10 91 2b 01 	lds	r17, 0x012B
     924:	0a 17       	cp	r16, r26
     926:	1b 07       	cpc	r17, r27
     928:	08 f4       	brcc	.+2      	; 0x92c <__stack+0x2d>
     92a:	2f c2       	rjmp	.+1118   	; 0xd8a <__stack+0x48b>
     92c:	00 91 2c 01 	lds	r16, 0x012C
     930:	10 91 2d 01 	lds	r17, 0x012D
     934:	0a 17       	cp	r16, r26
     936:	1b 07       	cpc	r17, r27
     938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0x3d>
     93a:	ef c1       	rjmp	.+990    	; 0xd1a <__stack+0x41b>
     93c:	00 91 2e 01 	lds	r16, 0x012E
     940:	10 91 2f 01 	lds	r17, 0x012F
     944:	0a 17       	cp	r16, r26
     946:	1b 07       	cpc	r17, r27
     948:	08 f4       	brcc	.+2      	; 0x94c <__stack+0x4d>
     94a:	27 c2       	rjmp	.+1102   	; 0xd9a <__stack+0x49b>
     94c:	00 91 30 01 	lds	r16, 0x0130
     950:	10 91 31 01 	lds	r17, 0x0131
     954:	0a 17       	cp	r16, r26
     956:	1b 07       	cpc	r17, r27
     958:	08 f4       	brcc	.+2      	; 0x95c <__stack+0x5d>
     95a:	27 c2       	rjmp	.+1102   	; 0xdaa <__stack+0x4ab>
     95c:	00 91 32 01 	lds	r16, 0x0132
     960:	10 91 33 01 	lds	r17, 0x0133
     964:	0a 17       	cp	r16, r26
     966:	1b 07       	cpc	r17, r27
     968:	08 f4       	brcc	.+2      	; 0x96c <__stack+0x6d>
     96a:	27 c2       	rjmp	.+1102   	; 0xdba <__stack+0x4bb>
     96c:	00 91 34 01 	lds	r16, 0x0134
     970:	10 91 35 01 	lds	r17, 0x0135
     974:	0a 17       	cp	r16, r26
     976:	1b 07       	cpc	r17, r27
     978:	08 f4       	brcc	.+2      	; 0x97c <__stack+0x7d>
     97a:	27 c2       	rjmp	.+1102   	; 0xdca <__stack+0x4cb>
     97c:	00 91 36 01 	lds	r16, 0x0136
     980:	10 91 37 01 	lds	r17, 0x0137
     984:	0a 17       	cp	r16, r26
     986:	1b 07       	cpc	r17, r27
     988:	08 f4       	brcc	.+2      	; 0x98c <__stack+0x8d>
     98a:	27 c2       	rjmp	.+1102   	; 0xdda <__stack+0x4db>
     98c:	00 91 38 01 	lds	r16, 0x0138
     990:	10 91 39 01 	lds	r17, 0x0139
     994:	0a 17       	cp	r16, r26
     996:	1b 07       	cpc	r17, r27
     998:	08 f4       	brcc	.+2      	; 0x99c <__stack+0x9d>
     99a:	23 c2       	rjmp	.+1094   	; 0xde2 <__stack+0x4e3>
     99c:	00 91 3a 01 	lds	r16, 0x013A
     9a0:	10 91 3b 01 	lds	r17, 0x013B
     9a4:	0a 17       	cp	r16, r26
     9a6:	1b 07       	cpc	r17, r27
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <__stack+0xad>
     9aa:	23 c2       	rjmp	.+1094   	; 0xdf2 <__stack+0x4f3>
     9ac:	00 91 3c 01 	lds	r16, 0x013C
     9b0:	10 91 3d 01 	lds	r17, 0x013D
     9b4:	0a 17       	cp	r16, r26
     9b6:	1b 07       	cpc	r17, r27
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	23 c2       	rjmp	.+1094   	; 0xe02 <__stack+0x503>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 ed       	ldi	r26, 0xD0	; 208
     9c2:	b0 e4       	ldi	r27, 0x40	; 64
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	ab 83       	std	Y+3, r26	; 0x03
     9ca:	bc 83       	std	Y+4, r27	; 0x04
     9cc:	4c e0       	ldi	r20, 0x0C	; 12
     9ce:	e4 2e       	mov	r14, r20
     9d0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9d2:	f7 01       	movw	r30, r14
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	ee 5d       	subi	r30, 0xDE	; 222
     9da:	fe 4f       	sbci	r31, 0xFE	; 254
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	b8 01       	movw	r22, r16
     9e2:	68 1b       	sub	r22, r24
     9e4:	79 0b       	sbc	r23, r25
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     9ee:	9b 01       	movw	r18, r22
     9f0:	ac 01       	movw	r20, r24
     9f2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     9f6:	6b 01       	movw	r12, r22
     9f8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     9fa:	ad 81       	ldd	r26, Y+5	; 0x05
     9fc:	be 81       	ldd	r27, Y+6	; 0x06
     9fe:	bd 01       	movw	r22, r26
     a00:	bb 0f       	add	r27, r27
     a02:	88 0b       	sbc	r24, r24
     a04:	99 0b       	sbc	r25, r25
     a06:	0e 94 df 0b 	call	0x17be	; 0x17be <__floatsisf>
     a0a:	4b 01       	movw	r8, r22
     a0c:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     a0e:	b8 01       	movw	r22, r16
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     a18:	2b 01       	movw	r4, r22
     a1a:	3c 01       	movw	r6, r24
     a1c:	29 81       	ldd	r18, Y+1	; 0x01
     a1e:	3a 81       	ldd	r19, Y+2	; 0x02
     a20:	4b 81       	ldd	r20, Y+3	; 0x03
     a22:	5c 81       	ldd	r21, Y+4	; 0x04
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c3 01       	movw	r24, r6
     a32:	b2 01       	movw	r22, r4
     a34:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a3c:	c5 01       	movw	r24, r10
     a3e:	b4 01       	movw	r22, r8
     a40:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e2       	ldi	r20, 0x20	; 32
     a4a:	51 e4       	ldi	r21, 0x41	; 65
     a4c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
            b=((int)((int)b/(int)slope));
     a50:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fixsfsi>
     a54:	8b 01       	movw	r16, r22
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fixsfsi>
     a5e:	ab 01       	movw	r20, r22
     a60:	bc 01       	movw	r22, r24
     a62:	c8 01       	movw	r24, r16
     a64:	ba 01       	movw	r22, r20
     a66:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
            dist_high=b;
     a6a:	16 2f       	mov	r17, r22
     a6c:	77 c0       	rjmp	.+238    	; 0xb5c <__stack+0x25d>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     a6e:	dc 01       	movw	r26, r24
     a70:	cd 90       	ld	r12, X+
     a72:	dc 90       	ld	r13, X
     a74:	80 91 49 01 	lds	r24, 0x0149
     a78:	90 91 4a 01 	lds	r25, 0x014A
     a7c:	8c 15       	cp	r24, r12
     a7e:	9d 05       	cpc	r25, r13
     a80:	08 f4       	brcc	.+2      	; 0xa84 <__stack+0x185>
     a82:	8c c0       	rjmp	.+280    	; 0xb9c <__stack+0x29d>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a84:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     a86:	e0 90 4b 01 	lds	r14, 0x014B
     a8a:	f0 90 4c 01 	lds	r15, 0x014C
     a8e:	ec 14       	cp	r14, r12
     a90:	fd 04       	cpc	r15, r13
     a92:	08 f4       	brcc	.+2      	; 0xa96 <__stack+0x197>
     a94:	5e c1       	rjmp	.+700    	; 0xd52 <__stack+0x453>
     a96:	e0 90 4d 01 	lds	r14, 0x014D
     a9a:	f0 90 4e 01 	lds	r15, 0x014E
     a9e:	ec 14       	cp	r14, r12
     aa0:	fd 04       	cpc	r15, r13
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <__stack+0x1a7>
     aa4:	5e c1       	rjmp	.+700    	; 0xd62 <__stack+0x463>
     aa6:	e0 90 4f 01 	lds	r14, 0x014F
     aaa:	f0 90 50 01 	lds	r15, 0x0150
     aae:	ec 14       	cp	r14, r12
     ab0:	fd 04       	cpc	r15, r13
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	5e c1       	rjmp	.+700    	; 0xd72 <__stack+0x473>
     ab6:	e0 90 51 01 	lds	r14, 0x0151
     aba:	f0 90 52 01 	lds	r15, 0x0152
     abe:	ec 14       	cp	r14, r12
     ac0:	fd 04       	cpc	r15, r13
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	5e c1       	rjmp	.+700    	; 0xd82 <__stack+0x483>
     ac6:	e0 90 53 01 	lds	r14, 0x0153
     aca:	f0 90 54 01 	lds	r15, 0x0154
     ace:	ec 14       	cp	r14, r12
     ad0:	fd 04       	cpc	r15, r13
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	c3 c0       	rjmp	.+390    	; 0xc5c <__stack+0x35d>
     ad6:	e0 90 55 01 	lds	r14, 0x0155
     ada:	f0 90 56 01 	lds	r15, 0x0156
     ade:	ec 14       	cp	r14, r12
     ae0:	fd 04       	cpc	r15, r13
     ae2:	08 f4       	brcc	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	56 c1       	rjmp	.+684    	; 0xd92 <__stack+0x493>
     ae6:	e0 90 57 01 	lds	r14, 0x0157
     aea:	f0 90 58 01 	lds	r15, 0x0158
     aee:	ec 14       	cp	r14, r12
     af0:	fd 04       	cpc	r15, r13
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	56 c1       	rjmp	.+684    	; 0xda2 <__stack+0x4a3>
     af6:	e0 90 59 01 	lds	r14, 0x0159
     afa:	f0 90 5a 01 	lds	r15, 0x015A
     afe:	ec 14       	cp	r14, r12
     b00:	fd 04       	cpc	r15, r13
     b02:	08 f4       	brcc	.+2      	; 0xb06 <__stack+0x207>
     b04:	56 c1       	rjmp	.+684    	; 0xdb2 <__stack+0x4b3>
     b06:	e0 90 5b 01 	lds	r14, 0x015B
     b0a:	f0 90 5c 01 	lds	r15, 0x015C
     b0e:	ec 14       	cp	r14, r12
     b10:	fd 04       	cpc	r15, r13
     b12:	08 f4       	brcc	.+2      	; 0xb16 <__stack+0x217>
     b14:	56 c1       	rjmp	.+684    	; 0xdc2 <__stack+0x4c3>
     b16:	e0 90 5d 01 	lds	r14, 0x015D
     b1a:	f0 90 5e 01 	lds	r15, 0x015E
     b1e:	ec 14       	cp	r14, r12
     b20:	fd 04       	cpc	r15, r13
     b22:	08 f4       	brcc	.+2      	; 0xb26 <__stack+0x227>
     b24:	56 c1       	rjmp	.+684    	; 0xdd2 <__stack+0x4d3>
     b26:	e0 90 5f 01 	lds	r14, 0x015F
     b2a:	f0 90 60 01 	lds	r15, 0x0160
     b2e:	ec 14       	cp	r14, r12
     b30:	fd 04       	cpc	r15, r13
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__stack+0x237>
     b34:	5a c1       	rjmp	.+692    	; 0xdea <__stack+0x4eb>
     b36:	e0 90 61 01 	lds	r14, 0x0161
     b3a:	f0 90 62 01 	lds	r15, 0x0162
     b3e:	ec 14       	cp	r14, r12
     b40:	fd 04       	cpc	r15, r13
     b42:	08 f4       	brcc	.+2      	; 0xb46 <__stack+0x247>
     b44:	5a c1       	rjmp	.+692    	; 0xdfa <__stack+0x4fb>
     b46:	e0 90 63 01 	lds	r14, 0x0163
     b4a:	f0 90 64 01 	lds	r15, 0x0164
     b4e:	ec 14       	cp	r14, r12
     b50:	fd 04       	cpc	r15, r13
     b52:	08 f4       	brcc	.+2      	; 0xb56 <__stack+0x257>
     b54:	5a c1       	rjmp	.+692    	; 0xe0a <__stack+0x50b>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b56:	0a e5       	ldi	r16, 0x5A	; 90
     b58:	31 c0       	rjmp	.+98     	; 0xbbc <__stack+0x2bd>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b5a:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b5c:	ed 81       	ldd	r30, Y+5	; 0x05
     b5e:	fe 81       	ldd	r31, Y+6	; 0x06
     b60:	ed 3b       	cpi	r30, 0xBD	; 189
     b62:	f2 40       	sbci	r31, 0x02	; 2
     b64:	fc f4       	brge	.+62     	; 0xba4 <__stack+0x2a5>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b66:	81 e2       	ldi	r24, 0x21	; 33
     b68:	81 0f       	add	r24, r17
    }
}
     b6a:	26 96       	adiw	r28, 0x06	; 6
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	7f 90       	pop	r7
     b90:	6f 90       	pop	r6
     b92:	5f 90       	pop	r5
     b94:	4f 90       	pop	r4
     b96:	3f 90       	pop	r3
     b98:	2f 90       	pop	r2
     b9a:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b9c:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b9e:	81 e2       	ldi	r24, 0x21	; 33
     ba0:	80 0f       	add	r24, r16
     ba2:	e3 cf       	rjmp	.-58     	; 0xb6a <__stack+0x26b>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     ba4:	d1 01       	movw	r26, r2
     ba6:	cd 90       	ld	r12, X+
     ba8:	dc 90       	ld	r13, X
     baa:	80 91 49 01 	lds	r24, 0x0149
     bae:	90 91 4a 01 	lds	r25, 0x014A
     bb2:	8c 15       	cp	r24, r12
     bb4:	9d 05       	cpc	r25, r13
     bb6:	08 f0       	brcs	.+2      	; 0xbba <__stack+0x2bb>
     bb8:	66 cf       	rjmp	.-308    	; 0xa86 <__stack+0x187>
            dist_low=0;
     bba:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     bbc:	1f 3f       	cpi	r17, 0xFF	; 255
     bbe:	79 f3       	breq	.-34     	; 0xb9e <__stack+0x29f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     bc0:	ed 81       	ldd	r30, Y+5	; 0x05
     bc2:	fe 81       	ldd	r31, Y+6	; 0x06
     bc4:	bf 01       	movw	r22, r30
     bc6:	ff 0f       	add	r31, r31
     bc8:	88 0b       	sbc	r24, r24
     bca:	99 0b       	sbc	r25, r25
     bcc:	0e 94 df 0b 	call	0x17be	; 0x17be <__floatsisf>
     bd0:	6b 01       	movw	r12, r22
     bd2:	7c 01       	movw	r14, r24
     bd4:	61 2f       	mov	r22, r17
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     be0:	4b 01       	movw	r8, r22
     be2:	5c 01       	movw	r10, r24
     be4:	a7 01       	movw	r20, r14
     be6:	96 01       	movw	r18, r12
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	81 e6       	ldi	r24, 0x61	; 97
     bee:	94 e4       	ldi	r25, 0x44	; 68
     bf0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     c00:	4b 01       	movw	r8, r22
     c02:	5c 01       	movw	r10, r24
     c04:	60 2f       	mov	r22, r16
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     c10:	2b 01       	movw	r4, r22
     c12:	3c 01       	movw	r6, r24
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4f e2       	ldi	r20, 0x2F	; 47
     c1a:	54 e4       	ldi	r21, 0x44	; 68
     c1c:	c7 01       	movw	r24, r14
     c1e:	b6 01       	movw	r22, r12
     c20:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     c24:	9b 01       	movw	r18, r22
     c26:	ac 01       	movw	r20, r24
     c28:	c3 01       	movw	r24, r6
     c2a:	b2 01       	movw	r22, r4
     c2c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c5 01       	movw	r24, r10
     c36:	b4 01       	movw	r22, r8
     c38:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	48 e4       	ldi	r20, 0x48	; 72
     c42:	53 e4       	ldi	r21, 0x43	; 67
     c44:	0e 94 35 0b 	call	0x166a	; 0x166a <__divsf3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	44 e0       	ldi	r20, 0x04	; 4
     c4e:	52 e4       	ldi	r21, 0x42	; 66
     c50:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     c54:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fixunssfsi>
     c58:	86 2f       	mov	r24, r22
     c5a:	87 cf       	rjmp	.-242    	; 0xb6a <__stack+0x26b>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c5c:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	fc 01       	movw	r30, r24
     c68:	e9 5b       	subi	r30, 0xB9	; 185
     c6a:	fe 4f       	sbci	r31, 0xFE	; 254
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	b7 01       	movw	r22, r14
     c72:	68 1b       	sub	r22, r24
     c74:	79 0b       	sbc	r23, r25
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     c86:	4b 01       	movw	r8, r22
     c88:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c8a:	b6 01       	movw	r22, r12
     c8c:	dd 0c       	add	r13, r13
     c8e:	88 0b       	sbc	r24, r24
     c90:	99 0b       	sbc	r25, r25
     c92:	0e 94 df 0b 	call	0x17be	; 0x17be <__floatsisf>
     c96:	2b 01       	movw	r4, r22
     c98:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     c9a:	b7 01       	movw	r22, r14
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
     ca8:	60 2f       	mov	r22, r16
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	5f e3       	ldi	r21, 0x3F	; 63
     cbc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     cca:	a5 01       	movw	r20, r10
     ccc:	94 01       	movw	r18, r8
     cce:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ce2:	c3 01       	movw	r24, r6
     ce4:	b2 01       	movw	r22, r4
     ce6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__subsf3>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e2       	ldi	r20, 0x20	; 32
     cf0:	51 e4       	ldi	r21, 0x41	; 65
     cf2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
                b=((int)((int)b/(int)slope));
     cf6:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fixsfsi>
     cfa:	7b 01       	movw	r14, r22
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fixsfsi>
     d04:	ab 01       	movw	r20, r22
     d06:	bc 01       	movw	r22, r24
     d08:	c7 01       	movw	r24, r14
     d0a:	ba 01       	movw	r22, r20
     d0c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
                dist_low=b;
     d10:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d12:	6f 3f       	cpi	r22, 0xFF	; 255
     d14:	09 f0       	breq	.+2      	; 0xd18 <__stack+0x419>
     d16:	52 cf       	rjmp	.-348    	; 0xbbc <__stack+0x2bd>
     d18:	26 cf       	rjmp	.-436    	; 0xb66 <__stack+0x267>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d1a:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     d1c:	85 e0       	ldi	r24, 0x05	; 5
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	7c 01       	movw	r14, r24
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	ef 1a       	sub	r14, r31
     d26:	f1 08       	sbc	r15, r1
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__floatunsisf>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__mulsf3>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	a9 01       	movw	r20, r18
     d44:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__addsf3>
     d48:	69 83       	std	Y+1, r22	; 0x01
     d4a:	7a 83       	std	Y+2, r23	; 0x02
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
     d50:	40 ce       	rjmp	.-896    	; 0x9d2 <__stack+0xd3>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     d52:	01 e0       	ldi	r16, 0x01	; 1
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	84 cf       	rjmp	.-248    	; 0xc62 <__stack+0x363>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	df cf       	rjmp	.-66     	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d62:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	7c cf       	rjmp	.-264    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d6a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	d7 cf       	rjmp	.-82     	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d72:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	74 cf       	rjmp	.-280    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d7a:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     d7c:	83 e0       	ldi	r24, 0x03	; 3
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	cf cf       	rjmp	.-98     	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d82:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	6c cf       	rjmp	.-296    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d8a:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	c7 cf       	rjmp	.-114    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d92:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	64 cf       	rjmp	.-312    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d9a:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	bf cf       	rjmp	.-130    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     da2:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
     da4:	87 e0       	ldi	r24, 0x07	; 7
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	5c cf       	rjmp	.-328    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     daa:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     dac:	87 e0       	ldi	r24, 0x07	; 7
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	b7 cf       	rjmp	.-146    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     db2:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	54 cf       	rjmp	.-344    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dba:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     dbc:	88 e0       	ldi	r24, 0x08	; 8
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	af cf       	rjmp	.-162    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dc2:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
     dc4:	89 e0       	ldi	r24, 0x09	; 9
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	4c cf       	rjmp	.-360    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dca:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     dcc:	89 e0       	ldi	r24, 0x09	; 9
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a7 cf       	rjmp	.-178    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dd2:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
     dd4:	8a e0       	ldi	r24, 0x0A	; 10
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	44 cf       	rjmp	.-376    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     dda:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ddc:	8a e0       	ldi	r24, 0x0A	; 10
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9f cf       	rjmp	.-194    	; 0xd20 <__stack+0x421>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     de2:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     de4:	8b e0       	ldi	r24, 0x0B	; 11
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9b cf       	rjmp	.-202    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dea:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	38 cf       	rjmp	.-400    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     df2:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     df4:	8c e0       	ldi	r24, 0x0C	; 12
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	93 cf       	rjmp	.-218    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     dfa:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
     dfc:	8c e0       	ldi	r24, 0x0C	; 12
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	30 cf       	rjmp	.-416    	; 0xc62 <__stack+0x363>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     e02:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     e04:	8d e0       	ldi	r24, 0x0D	; 13
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	8b cf       	rjmp	.-234    	; 0xd20 <__stack+0x421>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     e0a:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
     e0c:	8d e0       	ldi	r24, 0x0D	; 13
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	28 cf       	rjmp	.-432    	; 0xc62 <__stack+0x363>

00000e12 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
    tx_clock += tx_increment;
     e34:	20 91 68 01 	lds	r18, 0x0168
     e38:	30 91 69 01 	lds	r19, 0x0169
     e3c:	80 91 66 01 	lds	r24, 0x0166
     e40:	90 91 67 01 	lds	r25, 0x0167
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	90 93 69 01 	sts	0x0169, r25
     e4c:	80 93 68 01 	sts	0x0168, r24
    tx_increment = 0xFF;
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 67 01 	sts	0x0167, r25
     e58:	80 93 66 01 	sts	0x0166, r24
    OCR0A = tx_increment;
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     e60:	80 91 44 01 	lds	r24, 0x0144
     e64:	90 91 45 01 	lds	r25, 0x0145
     e68:	a0 91 46 01 	lds	r26, 0x0146
     e6c:	b0 91 47 01 	lds	r27, 0x0147
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	a1 1d       	adc	r26, r1
     e74:	b1 1d       	adc	r27, r1
     e76:	80 93 44 01 	sts	0x0144, r24
     e7a:	90 93 45 01 	sts	0x0145, r25
     e7e:	a0 93 46 01 	sts	0x0146, r26
     e82:	b0 93 47 01 	sts	0x0147, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     e86:	80 91 48 01 	lds	r24, 0x0148
     e8a:	81 11       	cpse	r24, r1
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <__vector_14+0x9a>
     e8e:	80 91 77 01 	lds	r24, 0x0177
     e92:	90 91 78 01 	lds	r25, 0x0178
     e96:	20 91 68 01 	lds	r18, 0x0168
     e9a:	30 91 69 01 	lds	r19, 0x0169
     e9e:	82 17       	cp	r24, r18
     ea0:	93 07       	cpc	r25, r19
     ea2:	20 f4       	brcc	.+8      	; 0xeac <__vector_14+0x9a>
     ea4:	80 91 14 01 	lds	r24, 0x0114
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	89 f0       	breq	.+34     	; 0xece <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     ece:	e0 91 03 01 	lds	r30, 0x0103
     ed2:	f0 91 04 01 	lds	r31, 0x0104
     ed6:	09 95       	icall
        if (msg) {
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	41 f3       	breq	.-48     	; 0xeac <__vector_14+0x9a>
            if (message_send(msg)) {
     edc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <message_send>
     ee0:	81 11       	cpse	r24, r1
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     ee4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <rand>
     ee8:	99 27       	eor	r25, r25
     eea:	90 93 67 01 	sts	0x0167, r25
     eee:	80 93 66 01 	sts	0x0166, r24
                OCR0A = tx_increment;
     ef2:	87 bd       	out	0x27, r24	; 39
     ef4:	db cf       	rjmp	.-74     	; 0xeac <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     ef6:	e0 91 01 01 	lds	r30, 0x0101
     efa:	f0 91 02 01 	lds	r31, 0x0102
     efe:	09 95       	icall
                tx_clock = 0;
     f00:	10 92 69 01 	sts	0x0169, r1
     f04:	10 92 68 01 	sts	0x0168, r1
     f08:	d1 cf       	rjmp	.-94     	; 0xeac <__vector_14+0x9a>

00000f0a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	11 c0       	rjmp	.+34     	; 0xf30 <set_color+0x26>
        DDRD |= (1<<5);
     f0e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     f10:	81 ff       	sbrs	r24, 1
     f12:	11 c0       	rjmp	.+34     	; 0xf36 <set_color+0x2c>
        DDRD |= (1<<4);
     f14:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     f16:	82 ff       	sbrs	r24, 2
     f18:	11 c0       	rjmp	.+34     	; 0xf3c <set_color+0x32>
        DDRC |= (1<<3);
     f1a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     f1c:	83 ff       	sbrs	r24, 3
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <set_color+0x38>
        DDRC |= (1<<2);
     f20:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     f22:	84 ff       	sbrs	r24, 4
     f24:	11 c0       	rjmp	.+34     	; 0xf48 <set_color+0x3e>
        DDRC |= (1<<5);
     f26:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     f28:	85 fd       	sbrc	r24, 5
     f2a:	11 c0       	rjmp	.+34     	; 0xf4e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     f2c:	3c 98       	cbi	0x07, 4	; 7
     f2e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     f30:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     f32:	81 fd       	sbrc	r24, 1
     f34:	ef cf       	rjmp	.-34     	; 0xf14 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     f36:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     f38:	82 fd       	sbrc	r24, 2
     f3a:	ef cf       	rjmp	.-34     	; 0xf1a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     f3c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     f3e:	83 fd       	sbrc	r24, 3
     f40:	ef cf       	rjmp	.-34     	; 0xf20 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     f42:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     f44:	84 fd       	sbrc	r24, 4
     f46:	ef cf       	rjmp	.-34     	; 0xf26 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     f48:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     f4a:	85 ff       	sbrs	r24, 5
     f4c:	ef cf       	rjmp	.-34     	; 0xf2c <set_color+0x22>
        DDRC |= (1<<4);
     f4e:	3c 9a       	sbi	0x07, 4	; 7
     f50:	08 95       	ret

00000f52 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
    rx_timer_off();
     f60:	10 92 81 00 	sts	0x0081, r1
     f64:	10 92 85 00 	sts	0x0085, r1
     f68:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 21 01 	sts	0x0121, r24
    rx_leadingbyte = 1;
     f72:	80 93 65 01 	sts	0x0165, r24
    rx_busy = 0;
     f76:	10 92 48 01 	sts	0x0148, r1
    adc_trigger_high_gain();
     f7a:	10 92 7c 00 	sts	0x007C, r1
     f7e:	93 ea       	ldi	r25, 0xA3	; 163
     f80:	90 93 7a 00 	sts	0x007A, r25
     f84:	80 93 7b 00 	sts	0x007B, r24
}
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     fbc:	20 91 84 00 	lds	r18, 0x0084
     fc0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	40 93 48 01 	sts	0x0148, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     fca:	80 91 21 01 	lds	r24, 0x0121
     fce:	88 23       	and	r24, r24
     fd0:	a9 f1       	breq	.+106    	; 0x103c <__vector_23+0xa6>
        rx_timer_on();
     fd2:	10 92 85 00 	sts	0x0085, r1
     fd6:	10 92 84 00 	sts	0x0084, r1
     fda:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     fde:	10 92 79 01 	sts	0x0179, r1
        rx_leadingbit = 0;
     fe2:	10 92 21 01 	sts	0x0121, r1
        if (rx_leadingbyte) {
     fe6:	80 91 65 01 	lds	r24, 0x0165
     fea:	88 23       	and	r24, r24
     fec:	a1 f0       	breq	.+40     	; 0x1016 <__vector_23+0x80>
            adc_finish_conversion();
     fee:	80 91 7a 00 	lds	r24, 0x007A
     ff2:	86 fd       	sbrc	r24, 6
     ff4:	fc cf       	rjmp	.-8      	; 0xfee <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     ff6:	80 91 78 00 	lds	r24, 0x0078
     ffa:	90 91 79 00 	lds	r25, 0x0079
     ffe:	90 93 43 01 	sts	0x0143, r25
    1002:	80 93 42 01 	sts	0x0142, r24
            adc_trigger_low_gain();
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 7c 00 	sts	0x007C, r24
    100c:	93 ea       	ldi	r25, 0xA3	; 163
    100e:	90 93 7a 00 	sts	0x007A, r25
    1012:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    103c:	c9 01       	movw	r24, r18
    103e:	87 58       	subi	r24, 0x87	; 135
    1040:	91 09       	sbc	r25, r1
    1042:	84 37       	cpi	r24, 0x74	; 116
    1044:	99 40       	sbci	r25, 0x09	; 9
    1046:	08 f0       	brcs	.+2      	; 0x104a <__vector_23+0xb4>
    1048:	52 c0       	rjmp	.+164    	; 0x10ee <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    104a:	26 58       	subi	r18, 0x86	; 134
    104c:	31 09       	sbc	r19, r1
    104e:	a4 ef       	ldi	r26, 0xF4	; 244
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	0e 94 a5 0a 	call	0x154a	; 0x154a <__umulhisi3>
    1056:	aa 27       	eor	r26, r26
    1058:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	91 05       	cpc	r25, r1
    105e:	a1 05       	cpc	r26, r1
    1060:	b1 05       	cpc	r27, r1
    1062:	08 f4       	brcc	.+2      	; 0x1066 <__vector_23+0xd0>
    1064:	7b c0       	rjmp	.+246    	; 0x115c <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1066:	40 93 21 01 	sts	0x0121, r20
                if (rx_leadingbyte) {
    106a:	80 91 65 01 	lds	r24, 0x0165
    106e:	81 11       	cpse	r24, r1
    1070:	52 c0       	rjmp	.+164    	; 0x1116 <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1072:	80 91 3f 01 	lds	r24, 0x013F
    1076:	e8 2f       	mov	r30, r24
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	e5 59       	subi	r30, 0x95	; 149
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	90 91 79 01 	lds	r25, 0x0179
    1082:	90 83       	st	Z, r25
                    rx_byteindex++;
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 3f 01 	sts	0x013F, r24
                    if (rx_byteindex == sizeof(message_t)) {
    108a:	8c 30       	cpi	r24, 0x0C	; 12
    108c:	21 f6       	brne	.-120    	; 0x1016 <__vector_23+0x80>
                        rx_timer_off();
    108e:	10 92 81 00 	sts	0x0081, r1
    1092:	10 92 85 00 	sts	0x0085, r1
    1096:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    109a:	40 93 65 01 	sts	0x0165, r20
                        rx_busy = 0;
    109e:	10 92 48 01 	sts	0x0148, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    10a2:	c0 91 75 01 	lds	r28, 0x0175
    10a6:	d0 91 76 01 	lds	r29, 0x0176
    10aa:	8b e6       	ldi	r24, 0x6B	; 107
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <message_crc>
    10b2:	c8 17       	cp	r28, r24
    10b4:	d9 07       	cpc	r29, r25
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__vector_23+0x124>
    10b8:	ae cf       	rjmp	.-164    	; 0x1016 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    10ba:	80 91 74 01 	lds	r24, 0x0174
    10be:	87 ff       	sbrs	r24, 7
    10c0:	61 c0       	rjmp	.+194    	; 0x1184 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    10c2:	98 e7       	ldi	r25, 0x78	; 120
    10c4:	98 0f       	add	r25, r24
    10c6:	93 30       	cpi	r25, 0x03	; 3
    10c8:	30 f0       	brcs	.+12     	; 0x10d6 <__vector_23+0x140>
        motors_off();
    10ca:	53 98       	cbi	0x0a, 3	; 10
    10cc:	23 98       	cbi	0x04, 3	; 4
    10ce:	10 92 b4 00 	sts	0x00B4, r1
    10d2:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	fc 01       	movw	r30, r24
    10da:	e0 58       	subi	r30, 0x80	; 128
    10dc:	f1 09       	sbc	r31, r1
    10de:	eb 30       	cpi	r30, 0x0B	; 11
    10e0:	f1 05       	cpc	r31, r1
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <__vector_23+0x150>
    10e4:	98 cf       	rjmp	.-208    	; 0x1016 <__vector_23+0x80>
    10e6:	e5 5c       	subi	r30, 0xC5	; 197
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    10ee:	10 92 81 00 	sts	0x0081, r1
    10f2:	10 92 85 00 	sts	0x0085, r1
    10f6:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    10fa:	40 93 21 01 	sts	0x0121, r20
            rx_leadingbyte = 1;
    10fe:	40 93 65 01 	sts	0x0165, r20
            rx_busy = 0;
    1102:	10 92 48 01 	sts	0x0148, r1
            adc_trigger_high_gain();
    1106:	10 92 7c 00 	sts	0x007C, r1
    110a:	83 ea       	ldi	r24, 0xA3	; 163
    110c:	80 93 7a 00 	sts	0x007A, r24
    1110:	40 93 7b 00 	sts	0x007B, r20
    1114:	80 cf       	rjmp	.-256    	; 0x1016 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1116:	80 91 7a 00 	lds	r24, 0x007A
    111a:	86 fd       	sbrc	r24, 6
    111c:	fc cf       	rjmp	.-8      	; 0x1116 <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    111e:	80 91 78 00 	lds	r24, 0x0078
    1122:	90 91 79 00 	lds	r25, 0x0079
    1126:	90 93 41 01 	sts	0x0141, r25
    112a:	80 93 40 01 	sts	0x0140, r24
                    adc_trigger_high_gain();
    112e:	10 92 7c 00 	sts	0x007C, r1
    1132:	83 ea       	ldi	r24, 0xA3	; 163
    1134:	80 93 7a 00 	sts	0x007A, r24
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    113e:	90 91 79 01 	lds	r25, 0x0179
    1142:	99 23       	and	r25, r25
    1144:	d1 f0       	breq	.+52     	; 0x117a <__vector_23+0x1e4>
                        rx_timer_off();
    1146:	10 92 81 00 	sts	0x0081, r1
    114a:	10 92 85 00 	sts	0x0085, r1
    114e:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1152:	80 93 65 01 	sts	0x0165, r24
                        rx_busy = 0;
    1156:	10 92 48 01 	sts	0x0148, r1
    115a:	5d cf       	rjmp	.-326    	; 0x1016 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <__vector_23+0x1d2>
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <__vector_23+0x1ce>
    116c:	cf 01       	movw	r24, r30
    116e:	90 91 79 01 	lds	r25, 0x0179
    1172:	89 2b       	or	r24, r25
    1174:	80 93 79 01 	sts	0x0179, r24
    1178:	4e cf       	rjmp	.-356    	; 0x1016 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    117a:	10 92 65 01 	sts	0x0165, r1
                        rx_byteindex = 0;
    117e:	10 92 3f 01 	sts	0x013F, r1
    1182:	49 cf       	rjmp	.-366    	; 0x1016 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1184:	e0 91 05 01 	lds	r30, 0x0105
    1188:	f0 91 06 01 	lds	r31, 0x0106
    118c:	60 e4       	ldi	r22, 0x40	; 64
    118e:	71 e0       	ldi	r23, 0x01	; 1
    1190:	8b e6       	ldi	r24, 0x6B	; 107
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	09 95       	icall
    1196:	3f cf       	rjmp	.-386    	; 0x1016 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1198:	80 91 6b 01 	lds	r24, 0x016B
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__vector_23+0x20c>
    11a0:	dd c0       	rjmp	.+442    	; 0x135c <__vector_23+0x3c6>
    11a2:	08 f4       	brcc	.+2      	; 0x11a6 <__vector_23+0x210>
    11a4:	ba c0       	rjmp	.+372    	; 0x131a <__vector_23+0x384>
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_23+0x216>
    11aa:	c6 c0       	rjmp	.+396    	; 0x1338 <__vector_23+0x3a2>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <__vector_23+0x21c>
    11b0:	b1 c0       	rjmp	.+354    	; 0x1314 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    11b2:	80 91 12 01 	lds	r24, 0x0112
    11b6:	90 91 71 01 	lds	r25, 0x0171
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <__vector_23+0x22a>
    11be:	e3 c0       	rjmp	.+454    	; 0x1386 <__vector_23+0x3f0>
    11c0:	80 91 70 01 	lds	r24, 0x0170
                        prev_motion = MOVE_STOP;
    11c4:	10 92 13 01 	sts	0x0113, r1
                        cur_motion = MOVE_STRAIGHT;
    11c8:	23 e0       	ldi	r18, 0x03	; 3
    11ca:	20 93 12 01 	sts	0x0112, r18
                        kilo_straight_left = calibmsg->straight_left;
    11ce:	80 93 7c 01 	sts	0x017C, r24
                        kilo_straight_right = calibmsg->straight_right;
    11d2:	90 93 7d 01 	sts	0x017D, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11d6:	80 91 14 01 	lds	r24, 0x0114
    11da:	86 30       	cpi	r24, 0x06	; 6
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <__vector_23+0x24a>
    11de:	1b cf       	rjmp	.-458    	; 0x1016 <__vector_23+0x80>
                motors_on();
    11e0:	53 9a       	sbi	0x0a, 3	; 10
    11e2:	23 9a       	sbi	0x04, 3	; 4
    11e4:	10 92 b4 00 	sts	0x00B4, r1
    11e8:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	80 93 14 01 	sts	0x0114, r24
    11f2:	11 cf       	rjmp	.-478    	; 0x1016 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11f4:	80 91 14 01 	lds	r24, 0x0114
    11f8:	86 30       	cpi	r24, 0x06	; 6
    11fa:	99 f0       	breq	.+38     	; 0x1222 <__vector_23+0x28c>
                motors_on();
    11fc:	53 9a       	sbi	0x0a, 3	; 10
    11fe:	23 9a       	sbi	0x04, 3	; 4
    1200:	10 92 b4 00 	sts	0x00B4, r1
    1204:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1208:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    120a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    120c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    120e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1210:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1212:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1214:	10 92 12 01 	sts	0x0112, r1
    1218:	10 92 13 01 	sts	0x0113, r1
                kilo_state = MOVING;
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	80 93 14 01 	sts	0x0114, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 01       	movw	r18, r24
    1228:	00 90 6b 01 	lds	r0, 0x016B
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <__vector_23+0x29c>
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <__vector_23+0x298>
    1236:	80 91 7a 01 	lds	r24, 0x017A
    123a:	90 91 7b 01 	lds	r25, 0x017B
    123e:	82 23       	and	r24, r18
    1240:	93 23       	and	r25, r19
    1242:	89 2b       	or	r24, r25
    1244:	09 f0       	breq	.+2      	; 0x1248 <__vector_23+0x2b2>
    1246:	86 c0       	rjmp	.+268    	; 0x1354 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1248:	10 92 12 01 	sts	0x0112, r1
    124c:	e4 ce       	rjmp	.-568    	; 0x1016 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 14 01 	sts	0x0114, r24
    1254:	e0 ce       	rjmp	.-576    	; 0x1016 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1256:	e0 e0       	ldi	r30, 0x00	; 0
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    125c:	80 91 6e 00 	lds	r24, 0x006E
    1260:	8d 7f       	andi	r24, 0xFD	; 253
    1262:	80 93 6e 00 	sts	0x006E, r24
    1266:	16 bc       	out	0x26, r1	; 38
            bootload();
    1268:	e0 e0       	ldi	r30, 0x00	; 0
    126a:	f0 e7       	ldi	r31, 0x70	; 112
    126c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    126e:	10 92 14 01 	sts	0x0114, r1
    1272:	d1 ce       	rjmp	.-606    	; 0x1016 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	80 93 14 01 	sts	0x0114, r24
    127a:	cd ce       	rjmp	.-614    	; 0x1016 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    127c:	85 e0       	ldi	r24, 0x05	; 5
    127e:	80 93 14 01 	sts	0x0114, r24
    1282:	c9 ce       	rjmp	.-622    	; 0x1016 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1284:	80 91 14 01 	lds	r24, 0x0114
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	09 f4       	brne	.+2      	; 0x128e <__vector_23+0x2f8>
    128c:	c4 ce       	rjmp	.-632    	; 0x1016 <__vector_23+0x80>
    128e:	80 91 14 01 	lds	r24, 0x0114
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	09 f4       	brne	.+2      	; 0x1298 <__vector_23+0x302>
    1296:	bf ce       	rjmp	.-642    	; 0x1016 <__vector_23+0x80>
                motors_on();
    1298:	53 9a       	sbi	0x0a, 3	; 10
    129a:	23 9a       	sbi	0x04, 3	; 4
    129c:	10 92 b4 00 	sts	0x00B4, r1
    12a0:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	80 93 14 01 	sts	0x0114, r24
    12aa:	b5 ce       	rjmp	.-662    	; 0x1016 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    12ac:	80 91 14 01 	lds	r24, 0x0114
    12b0:	86 30       	cpi	r24, 0x06	; 6
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__vector_23+0x320>
    12b4:	b0 ce       	rjmp	.-672    	; 0x1016 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    12b6:	60 91 7a 01 	lds	r22, 0x017A
    12ba:	80 eb       	ldi	r24, 0xB0	; 176
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    12c2:	60 91 7b 01 	lds	r22, 0x017B
    12c6:	81 eb       	ldi	r24, 0xB1	; 177
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    12ce:	60 91 7e 01 	lds	r22, 0x017E
    12d2:	85 e0       	ldi	r24, 0x05	; 5
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    12da:	60 91 6a 01 	lds	r22, 0x016A
    12de:	89 e0       	ldi	r24, 0x09	; 9
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    12e6:	60 91 7c 01 	lds	r22, 0x017C
    12ea:	8c e0       	ldi	r24, 0x0C	; 12
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    12f2:	60 91 7d 01 	lds	r22, 0x017D
    12f6:	84 e1       	ldi	r24, 0x14	; 20
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <eeprom_write_byte>
                        motors_off();
    12fe:	53 98       	cbi	0x0a, 3	; 10
    1300:	23 98       	cbi	0x04, 3	; 4
    1302:	10 92 b4 00 	sts	0x00B4, r1
    1306:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 14 01 	sts	0x0114, r24
    1310:	80 91 6b 01 	lds	r24, 0x016B
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1314:	81 11       	cpse	r24, r1
    1316:	5f cf       	rjmp	.-322    	; 0x11d6 <__vector_23+0x240>
    1318:	7e ce       	rjmp	.-772    	; 0x1016 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    131a:	88 23       	and	r24, r24
    131c:	39 f2       	breq	.-114    	; 0x12ac <__vector_23+0x316>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	c9 f7       	brne	.-14     	; 0x1314 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1322:	80 91 6c 01 	lds	r24, 0x016C
    1326:	90 91 6d 01 	lds	r25, 0x016D
    132a:	90 93 7b 01 	sts	0x017B, r25
    132e:	80 93 7a 01 	sts	0x017A, r24
                    cur_motion = MOVE_STOP;
    1332:	10 92 12 01 	sts	0x0112, r1
    1336:	4f cf       	rjmp	.-354    	; 0x11d6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1338:	80 91 12 01 	lds	r24, 0x0112
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	71 f1       	breq	.+92     	; 0x139c <__vector_23+0x406>
    1340:	80 91 6f 01 	lds	r24, 0x016F
                        prev_motion = MOVE_STOP;
    1344:	10 92 13 01 	sts	0x0113, r1
                        cur_motion = MOVE_RIGHT;
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	90 93 12 01 	sts	0x0112, r25
                        kilo_turn_right = calibmsg->turn_right;
    134e:	80 93 6a 01 	sts	0x016A, r24
    1352:	41 cf       	rjmp	.-382    	; 0x11d6 <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 12 01 	sts	0x0112, r24
    135a:	5d ce       	rjmp	.-838    	; 0x1016 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    135c:	80 91 12 01 	lds	r24, 0x0112
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	51 f0       	breq	.+20     	; 0x1378 <__vector_23+0x3e2>
    1364:	80 91 6e 01 	lds	r24, 0x016E
                        prev_motion = MOVE_STOP;
    1368:	10 92 13 01 	sts	0x0113, r1
                        cur_motion = MOVE_LEFT;
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	90 93 12 01 	sts	0x0112, r25
                        kilo_turn_left = calibmsg->turn_left;
    1372:	80 93 7e 01 	sts	0x017E, r24
    1376:	2f cf       	rjmp	.-418    	; 0x11d6 <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1378:	80 91 6e 01 	lds	r24, 0x016E
    137c:	90 91 7e 01 	lds	r25, 0x017E
    1380:	89 13       	cpse	r24, r25
    1382:	f2 cf       	rjmp	.-28     	; 0x1368 <__vector_23+0x3d2>
    1384:	28 cf       	rjmp	.-432    	; 0x11d6 <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1386:	80 91 7d 01 	lds	r24, 0x017D
    138a:	98 13       	cpse	r25, r24
    138c:	19 cf       	rjmp	.-462    	; 0x11c0 <__vector_23+0x22a>
    138e:	80 91 70 01 	lds	r24, 0x0170
    1392:	20 91 7c 01 	lds	r18, 0x017C
    1396:	82 13       	cpse	r24, r18
    1398:	15 cf       	rjmp	.-470    	; 0x11c4 <__vector_23+0x22e>
    139a:	1d cf       	rjmp	.-454    	; 0x11d6 <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    139c:	80 91 6f 01 	lds	r24, 0x016F
    13a0:	90 91 6a 01 	lds	r25, 0x016A
    13a4:	89 13       	cpse	r24, r25
    13a6:	ce cf       	rjmp	.-100    	; 0x1344 <__vector_23+0x3ae>
    13a8:	16 cf       	rjmp	.-468    	; 0x11d6 <__vector_23+0x240>

000013aa <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    13aa:	fc 01       	movw	r30, r24
    13ac:	ac 01       	movw	r20, r24
    13ae:	46 5f       	subi	r20, 0xF6	; 246
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13b6:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13b8:	82 27       	eor	r24, r18
    13ba:	08 2e       	mov	r0, r24
    13bc:	82 95       	swap	r24
    13be:	80 7f       	andi	r24, 0xF0	; 240
    13c0:	80 25       	eor	r24, r0
    13c2:	09 2e       	mov	r0, r25
    13c4:	98 2f       	mov	r25, r24
    13c6:	82 95       	swap	r24
    13c8:	8f 70       	andi	r24, 0x0F	; 15
    13ca:	08 26       	eor	r0, r24
    13cc:	86 95       	lsr	r24
    13ce:	98 27       	eor	r25, r24
    13d0:	89 27       	eor	r24, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	88 0f       	add	r24, r24
    13d6:	88 0f       	add	r24, r24
    13d8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13da:	e4 17       	cp	r30, r20
    13dc:	f5 07       	cpc	r31, r21
    13de:	59 f7       	brne	.-42     	; 0x13b6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    13e0:	08 95       	ret

000013e2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    13e2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    13e4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    13e6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    13e8:	20 91 3e 01 	lds	r18, 0x013E
    or tmpreg1, ddrreg
    13ec:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    13ee:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    13f0:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    13f2:	30 91 3e 01 	lds	r19, 0x013E
    13f6:	20 30       	cpi	r18, 0x00	; 0
    13f8:	29 f0       	breq	.+10     	; 0x1404 <message_send+0x22>
    13fa:	00 00       	nop
    13fc:	25 b1       	in	r18, 0x05	; 5
    13fe:	23 2b       	or	r18, r19
    1400:	25 b9       	out	0x05, r18	; 5
    1402:	04 c0       	rjmp	.+8      	; 0x140c <message_send+0x2a>
    1404:	00 00       	nop
    1406:	00 00       	nop
    1408:	00 00       	nop
    140a:	00 c0       	rjmp	.+0      	; 0x140c <message_send+0x2a>
    140c:	00 00       	nop
    140e:	00 00       	nop
    1410:	00 00       	nop
    1412:	30 95       	com	r19
    1414:	25 b1       	in	r18, 0x05	; 5
    1416:	23 23       	and	r18, r19
    1418:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    141a:	2e ea       	ldi	r18, 0xAE	; 174
    141c:	2a 95       	dec	r18
    141e:	f1 f7       	brne	.-4      	; 0x141c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1420:	2b ee       	ldi	r18, 0xEB	; 235

00001422 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1422:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1424:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1426:	0a c0       	rjmp	.+20     	; 0x143c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1428:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    142a:	30 91 3e 01 	lds	r19, 0x013E
    com tmpreg2
    142e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1430:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1432:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1434:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1436:	0f be       	out	0x3f, r0	; 63
    return 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret

0000143c <nocollision>:
nocollision:
    nop
    143c:	00 00       	nop
    dec tmpreg1
    143e:	2a 95       	dec	r18
    brne checkcollision
    1440:	81 f7       	brne	.-32     	; 0x1422 <checkcollision>

    ldi tmpreg1, 0x01
    1442:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1444:	30 91 3e 01 	lds	r19, 0x013E
    1448:	20 30       	cpi	r18, 0x00	; 0
    144a:	29 f0       	breq	.+10     	; 0x1456 <nocollision+0x1a>
    144c:	00 00       	nop
    144e:	25 b1       	in	r18, 0x05	; 5
    1450:	23 2b       	or	r18, r19
    1452:	25 b9       	out	0x05, r18	; 5
    1454:	04 c0       	rjmp	.+8      	; 0x145e <nocollision+0x22>
    1456:	00 00       	nop
    1458:	00 00       	nop
    145a:	00 00       	nop
    145c:	00 c0       	rjmp	.+0      	; 0x145e <nocollision+0x22>
    145e:	00 00       	nop
    1460:	00 00       	nop
    1462:	00 00       	nop
    1464:	30 95       	com	r19
    1466:	25 b1       	in	r18, 0x05	; 5
    1468:	23 23       	and	r18, r19
    146a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    146c:	00 00       	nop
    146e:	24 e5       	ldi	r18, 0x54	; 84
    1470:	2a 95       	dec	r18
    1472:	f1 f7       	brne	.-4      	; 0x1470 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1474:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1476:	8c e0       	ldi	r24, 0x0C	; 12

00001478 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1478:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    147a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    147c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    147e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1480:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1482:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1484:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1486:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1488:	50 e0       	ldi	r21, 0x00	; 0

0000148a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    148a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    148c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    148e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1490:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1492:	30 91 3e 01 	lds	r19, 0x013E
    1496:	20 30       	cpi	r18, 0x00	; 0
    1498:	29 f0       	breq	.+10     	; 0x14a4 <sendbit+0x1a>
    149a:	00 00       	nop
    149c:	25 b1       	in	r18, 0x05	; 5
    149e:	23 2b       	or	r18, r19
    14a0:	25 b9       	out	0x05, r18	; 5
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <sendbit+0x22>
    14a4:	00 00       	nop
    14a6:	00 00       	nop
    14a8:	00 00       	nop
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <sendbit+0x22>
    14ac:	00 00       	nop
    14ae:	00 00       	nop
    14b0:	00 00       	nop
    14b2:	30 95       	com	r19
    14b4:	25 b1       	in	r18, 0x05	; 5
    14b6:	23 23       	and	r18, r19
    14b8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14ba:	00 00       	nop
    14bc:	21 e5       	ldi	r18, 0x51	; 81
    14be:	2a 95       	dec	r18
    14c0:	f1 f7       	brne	.-4      	; 0x14be <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14c2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14c4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14c6:	9a 95       	dec	r25
    brne sendbit
    14c8:	01 f7       	brne	.-64     	; 0x148a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14ca:	8a 95       	dec	r24
    brne sendbyte
    14cc:	a9 f6       	brne	.-86     	; 0x1478 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14ce:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14d0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14d2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14d4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14d6:	30 91 3e 01 	lds	r19, 0x013E
    com tmpreg2
    14da:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14dc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14de:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    14e0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    14e2:	0f be       	out	0x3f, r0	; 63
    return 1
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	08 95       	ret

000014e8 <main>:
    broadcast();
}

int main()
{
    kilo_init();
    14e8:	0e 94 05 01 	call	0x20a	; 0x20a <kilo_init>
    // Register the message_tx callback function.
    kilo_message_tx = message_tx;
    14ec:	81 e7       	ldi	r24, 0x71	; 113
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	90 93 04 01 	sts	0x0104, r25
    14f4:	80 93 03 01 	sts	0x0103, r24
    // Register the message_tx_success callback function.
    kilo_message_tx_success = tx_message_success;
    14f8:	8b e7       	ldi	r24, 0x7B	; 123
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	90 93 02 01 	sts	0x0102, r25
    1500:	80 93 01 01 	sts	0x0101, r24

#if REAL
    debug_init();
#endif

    kilo_start(setup, loop);
    1504:	6c e8       	ldi	r22, 0x8C	; 140
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	8e e7       	ldi	r24, 0x7E	; 126
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 01 02 	call	0x402	; 0x402 <kilo_start>

    return 0;
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	08 95       	ret

00001516 <__divmodhi4>:
    1516:	97 fb       	bst	r25, 7
    1518:	07 2e       	mov	r0, r23
    151a:	16 f4       	brtc	.+4      	; 0x1520 <__divmodhi4+0xa>
    151c:	00 94       	com	r0
    151e:	07 d0       	rcall	.+14     	; 0x152e <__divmodhi4_neg1>
    1520:	77 fd       	sbrc	r23, 7
    1522:	09 d0       	rcall	.+18     	; 0x1536 <__divmodhi4_neg2>
    1524:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__udivmodhi4>
    1528:	07 fc       	sbrc	r0, 7
    152a:	05 d0       	rcall	.+10     	; 0x1536 <__divmodhi4_neg2>
    152c:	3e f4       	brtc	.+14     	; 0x153c <__divmodhi4_exit>

0000152e <__divmodhi4_neg1>:
    152e:	90 95       	com	r25
    1530:	81 95       	neg	r24
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__divmodhi4_neg2>:
    1536:	70 95       	com	r23
    1538:	61 95       	neg	r22
    153a:	7f 4f       	sbci	r23, 0xFF	; 255

0000153c <__divmodhi4_exit>:
    153c:	08 95       	ret

0000153e <__tablejump2__>:
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	05 90       	lpm	r0, Z+
    1544:	f4 91       	lpm	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	09 94       	ijmp

0000154a <__umulhisi3>:
    154a:	a2 9f       	mul	r26, r18
    154c:	b0 01       	movw	r22, r0
    154e:	b3 9f       	mul	r27, r19
    1550:	c0 01       	movw	r24, r0
    1552:	a3 9f       	mul	r26, r19
    1554:	70 0d       	add	r23, r0
    1556:	81 1d       	adc	r24, r1
    1558:	11 24       	eor	r1, r1
    155a:	91 1d       	adc	r25, r1
    155c:	b2 9f       	mul	r27, r18
    155e:	70 0d       	add	r23, r0
    1560:	81 1d       	adc	r24, r1
    1562:	11 24       	eor	r1, r1
    1564:	91 1d       	adc	r25, r1
    1566:	08 95       	ret

00001568 <__udivmodhi4>:
    1568:	aa 1b       	sub	r26, r26
    156a:	bb 1b       	sub	r27, r27
    156c:	51 e1       	ldi	r21, 0x11	; 17
    156e:	07 c0       	rjmp	.+14     	; 0x157e <__udivmodhi4_ep>

00001570 <__udivmodhi4_loop>:
    1570:	aa 1f       	adc	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	a6 17       	cp	r26, r22
    1576:	b7 07       	cpc	r27, r23
    1578:	10 f0       	brcs	.+4      	; 0x157e <__udivmodhi4_ep>
    157a:	a6 1b       	sub	r26, r22
    157c:	b7 0b       	sbc	r27, r23

0000157e <__udivmodhi4_ep>:
    157e:	88 1f       	adc	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	5a 95       	dec	r21
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__udivmodhi4_loop>
    1586:	80 95       	com	r24
    1588:	90 95       	com	r25
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	08 95       	ret

00001590 <__subsf3>:
    1590:	50 58       	subi	r21, 0x80	; 128

00001592 <__addsf3>:
    1592:	bb 27       	eor	r27, r27
    1594:	aa 27       	eor	r26, r26
    1596:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__addsf3x>
    159a:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__fp_round>
    159e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_pscA>
    15a2:	38 f0       	brcs	.+14     	; 0x15b2 <__addsf3+0x20>
    15a4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fp_pscB>
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <__addsf3+0x20>
    15aa:	39 f4       	brne	.+14     	; 0x15ba <__addsf3+0x28>
    15ac:	9f 3f       	cpi	r25, 0xFF	; 255
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <__addsf3+0x24>
    15b0:	26 f4       	brtc	.+8      	; 0x15ba <__addsf3+0x28>
    15b2:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_nan>
    15b6:	0e f4       	brtc	.+2      	; 0x15ba <__addsf3+0x28>
    15b8:	e0 95       	com	r30
    15ba:	e7 fb       	bst	r30, 7
    15bc:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_inf>

000015c0 <__addsf3x>:
    15c0:	e9 2f       	mov	r30, r25
    15c2:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_split3>
    15c6:	58 f3       	brcs	.-42     	; 0x159e <__addsf3+0xc>
    15c8:	ba 17       	cp	r27, r26
    15ca:	62 07       	cpc	r22, r18
    15cc:	73 07       	cpc	r23, r19
    15ce:	84 07       	cpc	r24, r20
    15d0:	95 07       	cpc	r25, r21
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <__addsf3x+0x1c>
    15d4:	79 f4       	brne	.+30     	; 0x15f4 <__addsf3x+0x34>
    15d6:	a6 f5       	brtc	.+104    	; 0x1640 <__addsf3x+0x80>
    15d8:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_zero>
    15dc:	0e f4       	brtc	.+2      	; 0x15e0 <__addsf3x+0x20>
    15de:	e0 95       	com	r30
    15e0:	0b 2e       	mov	r0, r27
    15e2:	ba 2f       	mov	r27, r26
    15e4:	a0 2d       	mov	r26, r0
    15e6:	0b 01       	movw	r0, r22
    15e8:	b9 01       	movw	r22, r18
    15ea:	90 01       	movw	r18, r0
    15ec:	0c 01       	movw	r0, r24
    15ee:	ca 01       	movw	r24, r20
    15f0:	a0 01       	movw	r20, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	ff 27       	eor	r31, r31
    15f6:	59 1b       	sub	r21, r25
    15f8:	99 f0       	breq	.+38     	; 0x1620 <__addsf3x+0x60>
    15fa:	59 3f       	cpi	r21, 0xF9	; 249
    15fc:	50 f4       	brcc	.+20     	; 0x1612 <__addsf3x+0x52>
    15fe:	50 3e       	cpi	r21, 0xE0	; 224
    1600:	68 f1       	brcs	.+90     	; 0x165c <__addsf3x+0x9c>
    1602:	1a 16       	cp	r1, r26
    1604:	f0 40       	sbci	r31, 0x00	; 0
    1606:	a2 2f       	mov	r26, r18
    1608:	23 2f       	mov	r18, r19
    160a:	34 2f       	mov	r19, r20
    160c:	44 27       	eor	r20, r20
    160e:	58 5f       	subi	r21, 0xF8	; 248
    1610:	f3 cf       	rjmp	.-26     	; 0x15f8 <__addsf3x+0x38>
    1612:	46 95       	lsr	r20
    1614:	37 95       	ror	r19
    1616:	27 95       	ror	r18
    1618:	a7 95       	ror	r26
    161a:	f0 40       	sbci	r31, 0x00	; 0
    161c:	53 95       	inc	r21
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__addsf3x+0x52>
    1620:	7e f4       	brtc	.+30     	; 0x1640 <__addsf3x+0x80>
    1622:	1f 16       	cp	r1, r31
    1624:	ba 0b       	sbc	r27, r26
    1626:	62 0b       	sbc	r22, r18
    1628:	73 0b       	sbc	r23, r19
    162a:	84 0b       	sbc	r24, r20
    162c:	ba f0       	brmi	.+46     	; 0x165c <__addsf3x+0x9c>
    162e:	91 50       	subi	r25, 0x01	; 1
    1630:	a1 f0       	breq	.+40     	; 0x165a <__addsf3x+0x9a>
    1632:	ff 0f       	add	r31, r31
    1634:	bb 1f       	adc	r27, r27
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	c2 f7       	brpl	.-16     	; 0x162e <__addsf3x+0x6e>
    163e:	0e c0       	rjmp	.+28     	; 0x165c <__addsf3x+0x9c>
    1640:	ba 0f       	add	r27, r26
    1642:	62 1f       	adc	r22, r18
    1644:	73 1f       	adc	r23, r19
    1646:	84 1f       	adc	r24, r20
    1648:	48 f4       	brcc	.+18     	; 0x165c <__addsf3x+0x9c>
    164a:	87 95       	ror	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	b7 95       	ror	r27
    1652:	f7 95       	ror	r31
    1654:	9e 3f       	cpi	r25, 0xFE	; 254
    1656:	08 f0       	brcs	.+2      	; 0x165a <__addsf3x+0x9a>
    1658:	b0 cf       	rjmp	.-160    	; 0x15ba <__addsf3+0x28>
    165a:	93 95       	inc	r25
    165c:	88 0f       	add	r24, r24
    165e:	08 f0       	brcs	.+2      	; 0x1662 <__addsf3x+0xa2>
    1660:	99 27       	eor	r25, r25
    1662:	ee 0f       	add	r30, r30
    1664:	97 95       	ror	r25
    1666:	87 95       	ror	r24
    1668:	08 95       	ret

0000166a <__divsf3>:
    166a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__divsf3x>
    166e:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__fp_round>
    1672:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fp_pscB>
    1676:	58 f0       	brcs	.+22     	; 0x168e <__divsf3+0x24>
    1678:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_pscA>
    167c:	40 f0       	brcs	.+16     	; 0x168e <__divsf3+0x24>
    167e:	29 f4       	brne	.+10     	; 0x168a <__divsf3+0x20>
    1680:	5f 3f       	cpi	r21, 0xFF	; 255
    1682:	29 f0       	breq	.+10     	; 0x168e <__divsf3+0x24>
    1684:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_inf>
    1688:	51 11       	cpse	r21, r1
    168a:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_szero>
    168e:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_nan>

00001692 <__divsf3x>:
    1692:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_split3>
    1696:	68 f3       	brcs	.-38     	; 0x1672 <__divsf3+0x8>

00001698 <__divsf3_pse>:
    1698:	99 23       	and	r25, r25
    169a:	b1 f3       	breq	.-20     	; 0x1688 <__divsf3+0x1e>
    169c:	55 23       	and	r21, r21
    169e:	91 f3       	breq	.-28     	; 0x1684 <__divsf3+0x1a>
    16a0:	95 1b       	sub	r25, r21
    16a2:	55 0b       	sbc	r21, r21
    16a4:	bb 27       	eor	r27, r27
    16a6:	aa 27       	eor	r26, r26
    16a8:	62 17       	cp	r22, r18
    16aa:	73 07       	cpc	r23, r19
    16ac:	84 07       	cpc	r24, r20
    16ae:	38 f0       	brcs	.+14     	; 0x16be <__divsf3_pse+0x26>
    16b0:	9f 5f       	subi	r25, 0xFF	; 255
    16b2:	5f 4f       	sbci	r21, 0xFF	; 255
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	44 1f       	adc	r20, r20
    16ba:	aa 1f       	adc	r26, r26
    16bc:	a9 f3       	breq	.-22     	; 0x16a8 <__divsf3_pse+0x10>
    16be:	35 d0       	rcall	.+106    	; 0x172a <__divsf3_pse+0x92>
    16c0:	0e 2e       	mov	r0, r30
    16c2:	3a f0       	brmi	.+14     	; 0x16d2 <__divsf3_pse+0x3a>
    16c4:	e0 e8       	ldi	r30, 0x80	; 128
    16c6:	32 d0       	rcall	.+100    	; 0x172c <__divsf3_pse+0x94>
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	50 40       	sbci	r21, 0x00	; 0
    16cc:	e6 95       	lsr	r30
    16ce:	00 1c       	adc	r0, r0
    16d0:	ca f7       	brpl	.-14     	; 0x16c4 <__divsf3_pse+0x2c>
    16d2:	2b d0       	rcall	.+86     	; 0x172a <__divsf3_pse+0x92>
    16d4:	fe 2f       	mov	r31, r30
    16d6:	29 d0       	rcall	.+82     	; 0x172a <__divsf3_pse+0x92>
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	bb 1f       	adc	r27, r27
    16e0:	26 17       	cp	r18, r22
    16e2:	37 07       	cpc	r19, r23
    16e4:	48 07       	cpc	r20, r24
    16e6:	ab 07       	cpc	r26, r27
    16e8:	b0 e8       	ldi	r27, 0x80	; 128
    16ea:	09 f0       	breq	.+2      	; 0x16ee <__divsf3_pse+0x56>
    16ec:	bb 0b       	sbc	r27, r27
    16ee:	80 2d       	mov	r24, r0
    16f0:	bf 01       	movw	r22, r30
    16f2:	ff 27       	eor	r31, r31
    16f4:	93 58       	subi	r25, 0x83	; 131
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255
    16f8:	3a f0       	brmi	.+14     	; 0x1708 <__divsf3_pse+0x70>
    16fa:	9e 3f       	cpi	r25, 0xFE	; 254
    16fc:	51 05       	cpc	r21, r1
    16fe:	78 f0       	brcs	.+30     	; 0x171e <__divsf3_pse+0x86>
    1700:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_inf>
    1704:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_szero>
    1708:	5f 3f       	cpi	r21, 0xFF	; 255
    170a:	e4 f3       	brlt	.-8      	; 0x1704 <__divsf3_pse+0x6c>
    170c:	98 3e       	cpi	r25, 0xE8	; 232
    170e:	d4 f3       	brlt	.-12     	; 0x1704 <__divsf3_pse+0x6c>
    1710:	86 95       	lsr	r24
    1712:	77 95       	ror	r23
    1714:	67 95       	ror	r22
    1716:	b7 95       	ror	r27
    1718:	f7 95       	ror	r31
    171a:	9f 5f       	subi	r25, 0xFF	; 255
    171c:	c9 f7       	brne	.-14     	; 0x1710 <__divsf3_pse+0x78>
    171e:	88 0f       	add	r24, r24
    1720:	91 1d       	adc	r25, r1
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret
    172a:	e1 e0       	ldi	r30, 0x01	; 1
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	bb 1f       	adc	r27, r27
    1734:	62 17       	cp	r22, r18
    1736:	73 07       	cpc	r23, r19
    1738:	84 07       	cpc	r24, r20
    173a:	ba 07       	cpc	r27, r26
    173c:	20 f0       	brcs	.+8      	; 0x1746 <__divsf3_pse+0xae>
    173e:	62 1b       	sub	r22, r18
    1740:	73 0b       	sbc	r23, r19
    1742:	84 0b       	sbc	r24, r20
    1744:	ba 0b       	sbc	r27, r26
    1746:	ee 1f       	adc	r30, r30
    1748:	88 f7       	brcc	.-30     	; 0x172c <__divsf3_pse+0x94>
    174a:	e0 95       	com	r30
    174c:	08 95       	ret

0000174e <__fixsfsi>:
    174e:	0e 94 ae 0b 	call	0x175c	; 0x175c <__fixunssfsi>
    1752:	68 94       	set
    1754:	b1 11       	cpse	r27, r1
    1756:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_szero>
    175a:	08 95       	ret

0000175c <__fixunssfsi>:
    175c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__fp_splitA>
    1760:	88 f0       	brcs	.+34     	; 0x1784 <__fixunssfsi+0x28>
    1762:	9f 57       	subi	r25, 0x7F	; 127
    1764:	98 f0       	brcs	.+38     	; 0x178c <__fixunssfsi+0x30>
    1766:	b9 2f       	mov	r27, r25
    1768:	99 27       	eor	r25, r25
    176a:	b7 51       	subi	r27, 0x17	; 23
    176c:	b0 f0       	brcs	.+44     	; 0x179a <__fixunssfsi+0x3e>
    176e:	e1 f0       	breq	.+56     	; 0x17a8 <__fixunssfsi+0x4c>
    1770:	66 0f       	add	r22, r22
    1772:	77 1f       	adc	r23, r23
    1774:	88 1f       	adc	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	1a f0       	brmi	.+6      	; 0x1780 <__fixunssfsi+0x24>
    177a:	ba 95       	dec	r27
    177c:	c9 f7       	brne	.-14     	; 0x1770 <__fixunssfsi+0x14>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <__fixunssfsi+0x4c>
    1780:	b1 30       	cpi	r27, 0x01	; 1
    1782:	91 f0       	breq	.+36     	; 0x17a8 <__fixunssfsi+0x4c>
    1784:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__fp_zero>
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	08 95       	ret
    178c:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_zero>
    1790:	67 2f       	mov	r22, r23
    1792:	78 2f       	mov	r23, r24
    1794:	88 27       	eor	r24, r24
    1796:	b8 5f       	subi	r27, 0xF8	; 248
    1798:	39 f0       	breq	.+14     	; 0x17a8 <__fixunssfsi+0x4c>
    179a:	b9 3f       	cpi	r27, 0xF9	; 249
    179c:	cc f3       	brlt	.-14     	; 0x1790 <__fixunssfsi+0x34>
    179e:	86 95       	lsr	r24
    17a0:	77 95       	ror	r23
    17a2:	67 95       	ror	r22
    17a4:	b3 95       	inc	r27
    17a6:	d9 f7       	brne	.-10     	; 0x179e <__fixunssfsi+0x42>
    17a8:	3e f4       	brtc	.+14     	; 0x17b8 <__fixunssfsi+0x5c>
    17aa:	90 95       	com	r25
    17ac:	80 95       	com	r24
    17ae:	70 95       	com	r23
    17b0:	61 95       	neg	r22
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	8f 4f       	sbci	r24, 0xFF	; 255
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	08 95       	ret

000017ba <__floatunsisf>:
    17ba:	e8 94       	clt
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <__floatsisf+0x12>

000017be <__floatsisf>:
    17be:	97 fb       	bst	r25, 7
    17c0:	3e f4       	brtc	.+14     	; 0x17d0 <__floatsisf+0x12>
    17c2:	90 95       	com	r25
    17c4:	80 95       	com	r24
    17c6:	70 95       	com	r23
    17c8:	61 95       	neg	r22
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	99 23       	and	r25, r25
    17d2:	a9 f0       	breq	.+42     	; 0x17fe <__floatsisf+0x40>
    17d4:	f9 2f       	mov	r31, r25
    17d6:	96 e9       	ldi	r25, 0x96	; 150
    17d8:	bb 27       	eor	r27, r27
    17da:	93 95       	inc	r25
    17dc:	f6 95       	lsr	r31
    17de:	87 95       	ror	r24
    17e0:	77 95       	ror	r23
    17e2:	67 95       	ror	r22
    17e4:	b7 95       	ror	r27
    17e6:	f1 11       	cpse	r31, r1
    17e8:	f8 cf       	rjmp	.-16     	; 0x17da <__floatsisf+0x1c>
    17ea:	fa f4       	brpl	.+62     	; 0x182a <__floatsisf+0x6c>
    17ec:	bb 0f       	add	r27, r27
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <__floatsisf+0x36>
    17f0:	60 ff       	sbrs	r22, 0
    17f2:	1b c0       	rjmp	.+54     	; 0x182a <__floatsisf+0x6c>
    17f4:	6f 5f       	subi	r22, 0xFF	; 255
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <__floatsisf+0x6c>
    17fe:	88 23       	and	r24, r24
    1800:	11 f0       	breq	.+4      	; 0x1806 <__floatsisf+0x48>
    1802:	96 e9       	ldi	r25, 0x96	; 150
    1804:	11 c0       	rjmp	.+34     	; 0x1828 <__floatsisf+0x6a>
    1806:	77 23       	and	r23, r23
    1808:	21 f0       	breq	.+8      	; 0x1812 <__floatsisf+0x54>
    180a:	9e e8       	ldi	r25, 0x8E	; 142
    180c:	87 2f       	mov	r24, r23
    180e:	76 2f       	mov	r23, r22
    1810:	05 c0       	rjmp	.+10     	; 0x181c <__floatsisf+0x5e>
    1812:	66 23       	and	r22, r22
    1814:	71 f0       	breq	.+28     	; 0x1832 <__floatsisf+0x74>
    1816:	96 e8       	ldi	r25, 0x86	; 134
    1818:	86 2f       	mov	r24, r22
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	2a f0       	brmi	.+10     	; 0x182a <__floatsisf+0x6c>
    1820:	9a 95       	dec	r25
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	da f7       	brpl	.-10     	; 0x1820 <__floatsisf+0x62>
    182a:	88 0f       	add	r24, r24
    182c:	96 95       	lsr	r25
    182e:	87 95       	ror	r24
    1830:	97 f9       	bld	r25, 7
    1832:	08 95       	ret

00001834 <__fp_inf>:
    1834:	97 f9       	bld	r25, 7
    1836:	9f 67       	ori	r25, 0x7F	; 127
    1838:	80 e8       	ldi	r24, 0x80	; 128
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	08 95       	ret

00001840 <__fp_nan>:
    1840:	9f ef       	ldi	r25, 0xFF	; 255
    1842:	80 ec       	ldi	r24, 0xC0	; 192
    1844:	08 95       	ret

00001846 <__fp_pscA>:
    1846:	00 24       	eor	r0, r0
    1848:	0a 94       	dec	r0
    184a:	16 16       	cp	r1, r22
    184c:	17 06       	cpc	r1, r23
    184e:	18 06       	cpc	r1, r24
    1850:	09 06       	cpc	r0, r25
    1852:	08 95       	ret

00001854 <__fp_pscB>:
    1854:	00 24       	eor	r0, r0
    1856:	0a 94       	dec	r0
    1858:	12 16       	cp	r1, r18
    185a:	13 06       	cpc	r1, r19
    185c:	14 06       	cpc	r1, r20
    185e:	05 06       	cpc	r0, r21
    1860:	08 95       	ret

00001862 <__fp_round>:
    1862:	09 2e       	mov	r0, r25
    1864:	03 94       	inc	r0
    1866:	00 0c       	add	r0, r0
    1868:	11 f4       	brne	.+4      	; 0x186e <__fp_round+0xc>
    186a:	88 23       	and	r24, r24
    186c:	52 f0       	brmi	.+20     	; 0x1882 <__fp_round+0x20>
    186e:	bb 0f       	add	r27, r27
    1870:	40 f4       	brcc	.+16     	; 0x1882 <__fp_round+0x20>
    1872:	bf 2b       	or	r27, r31
    1874:	11 f4       	brne	.+4      	; 0x187a <__fp_round+0x18>
    1876:	60 ff       	sbrs	r22, 0
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <__fp_round+0x20>
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	8f 4f       	sbci	r24, 0xFF	; 255
    1880:	9f 4f       	sbci	r25, 0xFF	; 255
    1882:	08 95       	ret

00001884 <__fp_split3>:
    1884:	57 fd       	sbrc	r21, 7
    1886:	90 58       	subi	r25, 0x80	; 128
    1888:	44 0f       	add	r20, r20
    188a:	55 1f       	adc	r21, r21
    188c:	59 f0       	breq	.+22     	; 0x18a4 <__fp_splitA+0x10>
    188e:	5f 3f       	cpi	r21, 0xFF	; 255
    1890:	71 f0       	breq	.+28     	; 0x18ae <__fp_splitA+0x1a>
    1892:	47 95       	ror	r20

00001894 <__fp_splitA>:
    1894:	88 0f       	add	r24, r24
    1896:	97 fb       	bst	r25, 7
    1898:	99 1f       	adc	r25, r25
    189a:	61 f0       	breq	.+24     	; 0x18b4 <__fp_splitA+0x20>
    189c:	9f 3f       	cpi	r25, 0xFF	; 255
    189e:	79 f0       	breq	.+30     	; 0x18be <__fp_splitA+0x2a>
    18a0:	87 95       	ror	r24
    18a2:	08 95       	ret
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	14 06       	cpc	r1, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	f2 cf       	rjmp	.-28     	; 0x1892 <__fp_split3+0xe>
    18ae:	46 95       	lsr	r20
    18b0:	f1 df       	rcall	.-30     	; 0x1894 <__fp_splitA>
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <__fp_splitA+0x30>
    18b4:	16 16       	cp	r1, r22
    18b6:	17 06       	cpc	r1, r23
    18b8:	18 06       	cpc	r1, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	f1 cf       	rjmp	.-30     	; 0x18a0 <__fp_splitA+0xc>
    18be:	86 95       	lsr	r24
    18c0:	71 05       	cpc	r23, r1
    18c2:	61 05       	cpc	r22, r1
    18c4:	08 94       	sec
    18c6:	08 95       	ret

000018c8 <__fp_zero>:
    18c8:	e8 94       	clt

000018ca <__fp_szero>:
    18ca:	bb 27       	eor	r27, r27
    18cc:	66 27       	eor	r22, r22
    18ce:	77 27       	eor	r23, r23
    18d0:	cb 01       	movw	r24, r22
    18d2:	97 f9       	bld	r25, 7
    18d4:	08 95       	ret

000018d6 <__mulsf3>:
    18d6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__mulsf3x>
    18da:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__fp_round>
    18de:	0e 94 23 0c 	call	0x1846	; 0x1846 <__fp_pscA>
    18e2:	38 f0       	brcs	.+14     	; 0x18f2 <__mulsf3+0x1c>
    18e4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__fp_pscB>
    18e8:	20 f0       	brcs	.+8      	; 0x18f2 <__mulsf3+0x1c>
    18ea:	95 23       	and	r25, r21
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <__mulsf3+0x1c>
    18ee:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_inf>
    18f2:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_nan>
    18f6:	11 24       	eor	r1, r1
    18f8:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_szero>

000018fc <__mulsf3x>:
    18fc:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_split3>
    1900:	70 f3       	brcs	.-36     	; 0x18de <__mulsf3+0x8>

00001902 <__mulsf3_pse>:
    1902:	95 9f       	mul	r25, r21
    1904:	c1 f3       	breq	.-16     	; 0x18f6 <__mulsf3+0x20>
    1906:	95 0f       	add	r25, r21
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	55 1f       	adc	r21, r21
    190c:	62 9f       	mul	r22, r18
    190e:	f0 01       	movw	r30, r0
    1910:	72 9f       	mul	r23, r18
    1912:	bb 27       	eor	r27, r27
    1914:	f0 0d       	add	r31, r0
    1916:	b1 1d       	adc	r27, r1
    1918:	63 9f       	mul	r22, r19
    191a:	aa 27       	eor	r26, r26
    191c:	f0 0d       	add	r31, r0
    191e:	b1 1d       	adc	r27, r1
    1920:	aa 1f       	adc	r26, r26
    1922:	64 9f       	mul	r22, r20
    1924:	66 27       	eor	r22, r22
    1926:	b0 0d       	add	r27, r0
    1928:	a1 1d       	adc	r26, r1
    192a:	66 1f       	adc	r22, r22
    192c:	82 9f       	mul	r24, r18
    192e:	22 27       	eor	r18, r18
    1930:	b0 0d       	add	r27, r0
    1932:	a1 1d       	adc	r26, r1
    1934:	62 1f       	adc	r22, r18
    1936:	73 9f       	mul	r23, r19
    1938:	b0 0d       	add	r27, r0
    193a:	a1 1d       	adc	r26, r1
    193c:	62 1f       	adc	r22, r18
    193e:	83 9f       	mul	r24, r19
    1940:	a0 0d       	add	r26, r0
    1942:	61 1d       	adc	r22, r1
    1944:	22 1f       	adc	r18, r18
    1946:	74 9f       	mul	r23, r20
    1948:	33 27       	eor	r19, r19
    194a:	a0 0d       	add	r26, r0
    194c:	61 1d       	adc	r22, r1
    194e:	23 1f       	adc	r18, r19
    1950:	84 9f       	mul	r24, r20
    1952:	60 0d       	add	r22, r0
    1954:	21 1d       	adc	r18, r1
    1956:	82 2f       	mov	r24, r18
    1958:	76 2f       	mov	r23, r22
    195a:	6a 2f       	mov	r22, r26
    195c:	11 24       	eor	r1, r1
    195e:	9f 57       	subi	r25, 0x7F	; 127
    1960:	50 40       	sbci	r21, 0x00	; 0
    1962:	9a f0       	brmi	.+38     	; 0x198a <__mulsf3_pse+0x88>
    1964:	f1 f0       	breq	.+60     	; 0x19a2 <__mulsf3_pse+0xa0>
    1966:	88 23       	and	r24, r24
    1968:	4a f0       	brmi	.+18     	; 0x197c <__mulsf3_pse+0x7a>
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	bb 1f       	adc	r27, r27
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__mulsf3_pse+0x64>
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	51 05       	cpc	r21, r1
    1980:	80 f0       	brcs	.+32     	; 0x19a2 <__mulsf3_pse+0xa0>
    1982:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_inf>
    1986:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__fp_szero>
    198a:	5f 3f       	cpi	r21, 0xFF	; 255
    198c:	e4 f3       	brlt	.-8      	; 0x1986 <__mulsf3_pse+0x84>
    198e:	98 3e       	cpi	r25, 0xE8	; 232
    1990:	d4 f3       	brlt	.-12     	; 0x1986 <__mulsf3_pse+0x84>
    1992:	86 95       	lsr	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	b7 95       	ror	r27
    199a:	f7 95       	ror	r31
    199c:	e7 95       	ror	r30
    199e:	9f 5f       	subi	r25, 0xFF	; 255
    19a0:	c1 f7       	brne	.-16     	; 0x1992 <__mulsf3_pse+0x90>
    19a2:	fe 2b       	or	r31, r30
    19a4:	88 0f       	add	r24, r24
    19a6:	91 1d       	adc	r25, r1
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret

000019b0 <do_rand>:
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
    19c6:	68 81       	ld	r22, Y
    19c8:	79 81       	ldd	r23, Y+1	; 0x01
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	81 05       	cpc	r24, r1
    19d4:	91 05       	cpc	r25, r1
    19d6:	21 f4       	brne	.+8      	; 0x19e0 <do_rand+0x30>
    19d8:	64 e2       	ldi	r22, 0x24	; 36
    19da:	79 ed       	ldi	r23, 0xD9	; 217
    19dc:	8b e5       	ldi	r24, 0x5B	; 91
    19de:	97 e0       	ldi	r25, 0x07	; 7
    19e0:	2d e1       	ldi	r18, 0x1D	; 29
    19e2:	33 ef       	ldi	r19, 0xF3	; 243
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__divmodsi4>
    19ec:	49 01       	movw	r8, r18
    19ee:	5a 01       	movw	r10, r20
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	a7 ea       	ldi	r26, 0xA7	; 167
    19f6:	b1 e4       	ldi	r27, 0x41	; 65
    19f8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    19fc:	6b 01       	movw	r12, r22
    19fe:	7c 01       	movw	r14, r24
    1a00:	ac ee       	ldi	r26, 0xEC	; 236
    1a02:	b4 ef       	ldi	r27, 0xF4	; 244
    1a04:	a5 01       	movw	r20, r10
    1a06:	94 01       	movw	r18, r8
    1a08:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__mulohisi3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	8c 0d       	add	r24, r12
    1a12:	9d 1d       	adc	r25, r13
    1a14:	ae 1d       	adc	r26, r14
    1a16:	bf 1d       	adc	r27, r15
    1a18:	b7 ff       	sbrs	r27, 7
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <do_rand+0x72>
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	a1 09       	sbc	r26, r1
    1a20:	b0 48       	sbci	r27, 0x80	; 128
    1a22:	88 83       	st	Y, r24
    1a24:	99 83       	std	Y+1, r25	; 0x01
    1a26:	aa 83       	std	Y+2, r26	; 0x02
    1a28:	bb 83       	std	Y+3, r27	; 0x03
    1a2a:	9f 77       	andi	r25, 0x7F	; 127
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	df 90       	pop	r13
    1a36:	cf 90       	pop	r12
    1a38:	bf 90       	pop	r11
    1a3a:	af 90       	pop	r10
    1a3c:	9f 90       	pop	r9
    1a3e:	8f 90       	pop	r8
    1a40:	08 95       	ret

00001a42 <rand_r>:
    1a42:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a46:	08 95       	ret

00001a48 <rand>:
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <do_rand>
    1a50:	08 95       	ret

00001a52 <srand>:
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	80 93 07 01 	sts	0x0107, r24
    1a5a:	90 93 08 01 	sts	0x0108, r25
    1a5e:	a0 93 09 01 	sts	0x0109, r26
    1a62:	b0 93 0a 01 	sts	0x010A, r27
    1a66:	08 95       	ret

00001a68 <eeprom_read_byte>:
    1a68:	f9 99       	sbic	0x1f, 1	; 31
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <eeprom_read_byte>
    1a6c:	92 bd       	out	0x22, r25	; 34
    1a6e:	81 bd       	out	0x21, r24	; 33
    1a70:	f8 9a       	sbi	0x1f, 0	; 31
    1a72:	99 27       	eor	r25, r25
    1a74:	80 b5       	in	r24, 0x20	; 32
    1a76:	08 95       	ret

00001a78 <eeprom_write_byte>:
    1a78:	26 2f       	mov	r18, r22

00001a7a <eeprom_write_r18>:
    1a7a:	f9 99       	sbic	0x1f, 1	; 31
    1a7c:	fe cf       	rjmp	.-4      	; 0x1a7a <eeprom_write_r18>
    1a7e:	1f ba       	out	0x1f, r1	; 31
    1a80:	92 bd       	out	0x22, r25	; 34
    1a82:	81 bd       	out	0x21, r24	; 33
    1a84:	20 bd       	out	0x20, r18	; 32
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	fa 9a       	sbi	0x1f, 2	; 31
    1a8c:	f9 9a       	sbi	0x1f, 1	; 31
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	08 95       	ret

00001a94 <__divmodsi4>:
    1a94:	05 2e       	mov	r0, r21
    1a96:	97 fb       	bst	r25, 7
    1a98:	1e f4       	brtc	.+6      	; 0x1aa0 <__divmodsi4+0xc>
    1a9a:	00 94       	com	r0
    1a9c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__negsi2>
    1aa0:	57 fd       	sbrc	r21, 7
    1aa2:	07 d0       	rcall	.+14     	; 0x1ab2 <__divmodsi4_neg2>
    1aa4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__udivmodsi4>
    1aa8:	07 fc       	sbrc	r0, 7
    1aaa:	03 d0       	rcall	.+6      	; 0x1ab2 <__divmodsi4_neg2>
    1aac:	4e f4       	brtc	.+18     	; 0x1ac0 <__divmodsi4_exit>
    1aae:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__negsi2>

00001ab2 <__divmodsi4_neg2>:
    1ab2:	50 95       	com	r21
    1ab4:	40 95       	com	r20
    1ab6:	30 95       	com	r19
    1ab8:	21 95       	neg	r18
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	4f 4f       	sbci	r20, 0xFF	; 255
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255

00001ac0 <__divmodsi4_exit>:
    1ac0:	08 95       	ret

00001ac2 <__negsi2>:
    1ac2:	90 95       	com	r25
    1ac4:	80 95       	com	r24
    1ac6:	70 95       	com	r23
    1ac8:	61 95       	neg	r22
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ace:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad0:	08 95       	ret

00001ad2 <__muluhisi3>:
    1ad2:	0e 94 a5 0a 	call	0x154a	; 0x154a <__umulhisi3>
    1ad6:	a5 9f       	mul	r26, r21
    1ad8:	90 0d       	add	r25, r0
    1ada:	b4 9f       	mul	r27, r20
    1adc:	90 0d       	add	r25, r0
    1ade:	a4 9f       	mul	r26, r20
    1ae0:	80 0d       	add	r24, r0
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	11 24       	eor	r1, r1
    1ae6:	08 95       	ret

00001ae8 <__mulshisi3>:
    1ae8:	b7 ff       	sbrs	r27, 7
    1aea:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__muluhisi3>

00001aee <__mulohisi3>:
    1aee:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__muluhisi3>
    1af2:	82 1b       	sub	r24, r18
    1af4:	93 0b       	sbc	r25, r19
    1af6:	08 95       	ret

00001af8 <__udivmodsi4>:
    1af8:	a1 e2       	ldi	r26, 0x21	; 33
    1afa:	1a 2e       	mov	r1, r26
    1afc:	aa 1b       	sub	r26, r26
    1afe:	bb 1b       	sub	r27, r27
    1b00:	fd 01       	movw	r30, r26
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <__udivmodsi4_ep>

00001b04 <__udivmodsi4_loop>:
    1b04:	aa 1f       	adc	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	ee 1f       	adc	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	a2 17       	cp	r26, r18
    1b0e:	b3 07       	cpc	r27, r19
    1b10:	e4 07       	cpc	r30, r20
    1b12:	f5 07       	cpc	r31, r21
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <__udivmodsi4_ep>
    1b16:	a2 1b       	sub	r26, r18
    1b18:	b3 0b       	sbc	r27, r19
    1b1a:	e4 0b       	sbc	r30, r20
    1b1c:	f5 0b       	sbc	r31, r21

00001b1e <__udivmodsi4_ep>:
    1b1e:	66 1f       	adc	r22, r22
    1b20:	77 1f       	adc	r23, r23
    1b22:	88 1f       	adc	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	1a 94       	dec	r1
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <__udivmodsi4_loop>
    1b2a:	60 95       	com	r22
    1b2c:	70 95       	com	r23
    1b2e:	80 95       	com	r24
    1b30:	90 95       	com	r25
    1b32:	9b 01       	movw	r18, r22
    1b34:	ac 01       	movw	r20, r24
    1b36:	bd 01       	movw	r22, r26
    1b38:	cf 01       	movw	r24, r30
    1b3a:	08 95       	ret

00001b3c <_exit>:
    1b3c:	f8 94       	cli

00001b3e <__stop_program>:
    1b3e:	ff cf       	rjmp	.-2      	; 0x1b3e <__stop_program>
