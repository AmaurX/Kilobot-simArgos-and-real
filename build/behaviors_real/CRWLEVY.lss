
../../build/behaviors_real/CRWLEVY.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 be 00 	jmp	0x17c	; 0x17c <__ctors_end>
       4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       8:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
       c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      14:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      18:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__vector_6>
      1c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      20:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      24:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      28:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      2c:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_11>
      30:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      34:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      38:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__vector_14>
      3c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      40:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      44:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      50:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      54:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      58:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      5c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <__vector_23>
      60:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      64:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__bad_interrupt>
      68:	d2 08       	sbc	r13, r2
      6a:	4e 09       	sbc	r20, r14
      6c:	a6 08       	sbc	r10, r6
      6e:	9d 08       	sbc	r9, r13
      70:	a3 08       	sbc	r10, r3
      72:	30 09       	sbc	r19, r0
      74:	25 09       	sbc	r18, r5
      76:	b0 0f       	add	r27, r16
      78:	8d 0e       	add	r8, r29
      7a:	8d 0e       	add	r8, r29
      7c:	ad 0f       	add	r26, r29
      7e:	b9 0f       	add	r27, r25
      80:	a9 0f       	add	r26, r25
      82:	c0 0f       	add	r28, r16
      84:	bc 0f       	add	r27, r28
      86:	c4 0f       	add	r28, r20
      88:	7c 0f       	add	r23, r28
      8a:	4e 0f       	add	r20, r30
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <wrapped_cauchy_ppf+0x5a>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <loop+0x8e>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <uniform_distribution+0x66>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	00 06       	cpc	r0, r16
     132:	64 ec       	ldi	r22, 0xC4	; 196
     134:	1b 3c       	cpi	r17, 0xCB	; 203
     136:	04 bc       	out	0x24, r0	; 36
     138:	16 3e       	cpi	r17, 0xE6	; 230
     13a:	3b e5       	ldi	r19, 0x5B	; 91
     13c:	b9 3c       	cpi	r27, 0xC9	; 201
     13e:	c9 3c       	cpi	r28, 0xC9	; 201
     140:	37 c2       	rjmp	.+1134   	; 0x5b0 <loop+0x224>
     142:	9e 5a       	subi	r25, 0xAE	; 174
     144:	3d 66       	ori	r19, 0x6D	; 109
     146:	04 98       	cbi	0x00, 4	; 0
     148:	08 3e       	cpi	r16, 0xE8	; 232
     14a:	ea 69       	ori	r30, 0x9A	; 154
     14c:	aa aa       	std	Y+50, r10	; 0x32
     14e:	3e 00       	.word	0x003e	; ????
     150:	00 00       	nop
     152:	80 3f       	cpi	r24, 0xF0	; 240
     154:	07 63       	ori	r16, 0x37	; 55
     156:	42 36       	cpi	r20, 0x62	; 98
     158:	b7 9b       	sbis	0x16, 7	; 22
     15a:	d8 a7       	std	Y+40, r29	; 0x28
     15c:	1a 39       	cpi	r17, 0x9A	; 154
     15e:	68 56       	subi	r22, 0x68	; 104
     160:	18 ae       	std	Y+56, r1	; 0x38
     162:	ba ab       	std	Y+50, r27	; 0x32
     164:	55 8c       	ldd	r5, Z+29	; 0x1d
     166:	1d 3c       	cpi	r17, 0xCD	; 205
     168:	b7 cc       	rjmp	.-1682   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     16a:	57 63       	ori	r21, 0x37	; 55
     16c:	bd 6d       	ori	r27, 0xDD	; 221
     16e:	ed fd       	.word	0xfded	; ????
     170:	75 3e       	cpi	r23, 0xE5	; 229
     172:	f6 17       	cp	r31, r22
     174:	72 31       	cpi	r23, 0x12	; 18
     176:	bf 00       	.word	0x00bf	; ????
     178:	00 00       	nop
     17a:	80 3f       	cpi	r24, 0xF0	; 240

0000017c <__ctors_end>:
     17c:	11 24       	eor	r1, r1
     17e:	1f be       	out	0x3f, r1	; 63
     180:	cf ef       	ldi	r28, 0xFF	; 255
     182:	d8 e0       	ldi	r29, 0x08	; 8
     184:	de bf       	out	0x3e, r29	; 62
     186:	cd bf       	out	0x3d, r28	; 61

00000188 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
     188:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	a8 95       	wdr
     190:	80 91 60 00 	lds	r24, 0x0060
     194:	88 61       	ori	r24, 0x18	; 24
     196:	80 93 60 00 	sts	0x0060, r24
     19a:	10 92 60 00 	sts	0x0060, r1
     19e:	0f be       	out	0x3f, r0	; 63

000001a0 <__do_copy_data>:
     1a0:	11 e0       	ldi	r17, 0x01	; 1
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b1 e0       	ldi	r27, 0x01	; 1
     1a6:	e6 eb       	ldi	r30, 0xB6	; 182
     1a8:	fd e2       	ldi	r31, 0x2D	; 45
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__do_copy_data+0x10>
     1ac:	05 90       	lpm	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	ac 31       	cpi	r26, 0x1C	; 28
     1b2:	b1 07       	cpc	r27, r17
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <__do_copy_data+0xc>

000001b6 <__do_clear_bss>:
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	ac e1       	ldi	r26, 0x1C	; 28
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <.do_clear_bss_start>

000001be <.do_clear_bss_loop>:
     1be:	1d 92       	st	X+, r1

000001c0 <.do_clear_bss_start>:
     1c0:	a9 3a       	cpi	r26, 0xA9	; 169
     1c2:	b2 07       	cpc	r27, r18
     1c4:	e1 f7       	brne	.-8      	; 0x1be <.do_clear_bss_loop>
     1c6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <main>
     1ca:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <_exit>

000001ce <__bad_interrupt>:
     1ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d2 <message_tx>:
/*-------------------------------------------------------------------*/
/* Callback function for message transmission                        */
/*-------------------------------------------------------------------*/
message_t *message_tx()
{
  if (sending_msg)
     1d2:	80 91 31 01 	lds	r24, 0x0131
     1d6:	88 23       	and	r24, r24
     1d8:	19 f0       	breq	.+6      	; 0x1e0 <message_tx+0xe>
  {
    return &messageA;
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	91 e0       	ldi	r25, 0x01	; 1
  }
  return 0;
}
     1de:	08 95       	ret
{
  if (sending_msg)
  {
    return &messageA;
  }
  return 0;
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret

000001e6 <tx_message_success>:
/*-------------------------------------------------------------------*/
/* Callback function for successful transmission                     */
/*-------------------------------------------------------------------*/
void tx_message_success()
{
  sending_msg = false;
     1e6:	10 92 31 01 	sts	0x0131, r1
     1ea:	08 95       	ret

000001ec <message_rx>:

/*-------------------------------------------------------------------*/
/* Callback function for message reception                           */
/*-------------------------------------------------------------------*/
void message_rx(message_t *msg, distance_measurement_t *d)
{
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	ec 01       	movw	r28, r24
  uint8_t cur_distance = estimate_distance(d);
     1f2:	cb 01       	movw	r24, r22
     1f4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <estimate_distance>
  if (cur_distance > 100)
     1f8:	85 36       	cpi	r24, 0x65	; 101
     1fa:	e0 f4       	brcc	.+56     	; 0x234 <message_rx+0x48>
  {
    return;
  }
  uint8_t agent_type = msg->data[0] & 0x01;
     1fc:	88 81       	ld	r24, Y
  //printf("%u" "\n",agent_type);
  //if the message received is 0 so the id of the target set color red
  if (agent_type == id_target)
     1fe:	80 fd       	sbrc	r24, 0
     200:	1c c0       	rjmp	.+56     	; 0x23a <message_rx+0x4e>
  {
    if (f_p_t == 0)
     202:	80 91 37 01 	lds	r24, 0x0137
     206:	90 91 38 01 	lds	r25, 0x0138
     20a:	a0 91 39 01 	lds	r26, 0x0139
     20e:	b0 91 3a 01 	lds	r27, 0x013A
     212:	89 2b       	or	r24, r25
     214:	8a 2b       	or	r24, r26
     216:	8b 2b       	or	r24, r27
     218:	09 f4       	brne	.+2      	; 0x21c <message_rx+0x30>
     21a:	64 c0       	rjmp	.+200    	; 0x2e4 <message_rx+0xf8>
      //printf("The kilobot is on target for the first time\n");
      //printf("%" PRIu32 "\n", f_p_t);
      information_target_id = true;
      set_color(RGB(1, 0, 1));
    }
    if (f_i_t == 0)
     21c:	80 91 33 01 	lds	r24, 0x0133
     220:	90 91 34 01 	lds	r25, 0x0134
     224:	a0 91 35 01 	lds	r26, 0x0135
     228:	b0 91 36 01 	lds	r27, 0x0136
     22c:	89 2b       	or	r24, r25
     22e:	8a 2b       	or	r24, r26
     230:	8b 2b       	or	r24, r27
     232:	b9 f1       	breq	.+110    	; 0x2a2 <message_rx+0xb6>
      //printf("%" PRIu32 "\n", f_i_t);
      information_target_id = true;
      set_color(RGB(0, 1, 0));
    }
  }
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret
  }
  //if the message received is 1 so the id of the target set color green
  else if (agent_type == id_robot)
  {
    //printf("%u" "\n",agent_type);
    if (f_i_t == 0)
     23a:	80 91 33 01 	lds	r24, 0x0133
     23e:	90 91 34 01 	lds	r25, 0x0134
     242:	a0 91 35 01 	lds	r26, 0x0135
     246:	b0 91 36 01 	lds	r27, 0x0136
     24a:	89 2b       	or	r24, r25
     24c:	8a 2b       	or	r24, r26
     24e:	8b 2b       	or	r24, r27
     250:	89 f7       	brne	.-30     	; 0x234 <message_rx+0x48>
    {
      f_i_t = kilo_ticks;
     252:	80 91 6e 01 	lds	r24, 0x016E
     256:	90 91 6f 01 	lds	r25, 0x016F
     25a:	a0 91 70 01 	lds	r26, 0x0170
     25e:	b0 91 71 01 	lds	r27, 0x0171
     262:	80 93 33 01 	sts	0x0133, r24
     266:	90 93 34 01 	sts	0x0134, r25
     26a:	a0 93 35 01 	sts	0x0135, r26
     26e:	b0 93 36 01 	sts	0x0136, r27
      memcpy(((void *)(&(messageA.data[1]))), &f_i_t, sizeof(int32_t));
     272:	80 93 40 01 	sts	0x0140, r24
     276:	90 93 41 01 	sts	0x0141, r25
     27a:	a0 93 42 01 	sts	0x0142, r26
     27e:	b0 93 43 01 	sts	0x0143, r27
      messageA.crc = message_crc(&messageA);
     282:	8f e3       	ldi	r24, 0x3F	; 63
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 57 10 	call	0x20ae	; 0x20ae <message_crc>
     28a:	90 93 4a 01 	sts	0x014A, r25
     28e:	80 93 49 01 	sts	0x0149, r24
      //printf("The kilobot receive information from the other robot\n");
      //printf("%" PRIu32 "\n", f_i_t);
      information_target_id = true;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 30 01 	sts	0x0130, r24
      set_color(RGB(0, 1, 0));
     298:	84 e0       	ldi	r24, 0x04	; 4
    }
  }
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
      memcpy(((void *)(&(messageA.data[1]))), &f_i_t, sizeof(int32_t));
      messageA.crc = message_crc(&messageA);
      //printf("The kilobot receive information from the other robot\n");
      //printf("%" PRIu32 "\n", f_i_t);
      information_target_id = true;
      set_color(RGB(0, 1, 0));
     29e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <set_color>
      information_target_id = true;
      set_color(RGB(1, 0, 1));
    }
    if (f_i_t == 0)
    {
      f_i_t = kilo_ticks;
     2a2:	80 91 6e 01 	lds	r24, 0x016E
     2a6:	90 91 6f 01 	lds	r25, 0x016F
     2aa:	a0 91 70 01 	lds	r26, 0x0170
     2ae:	b0 91 71 01 	lds	r27, 0x0171
     2b2:	80 93 33 01 	sts	0x0133, r24
     2b6:	90 93 34 01 	sts	0x0134, r25
     2ba:	a0 93 35 01 	sts	0x0135, r26
     2be:	b0 93 36 01 	sts	0x0136, r27
      memcpy(((void *)(&(messageA.data[1]))), &f_i_t, sizeof(int32_t));
     2c2:	80 93 40 01 	sts	0x0140, r24
     2c6:	90 93 41 01 	sts	0x0141, r25
     2ca:	a0 93 42 01 	sts	0x0142, r26
     2ce:	b0 93 43 01 	sts	0x0143, r27
      messageA.crc = message_crc(&messageA);
     2d2:	8f e3       	ldi	r24, 0x3F	; 63
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 57 10 	call	0x20ae	; 0x20ae <message_crc>
     2da:	90 93 4a 01 	sts	0x014A, r25
     2de:	80 93 49 01 	sts	0x0149, r24
     2e2:	a8 cf       	rjmp	.-176    	; 0x234 <message_rx+0x48>
  //if the message received is 0 so the id of the target set color red
  if (agent_type == id_target)
  {
    if (f_p_t == 0)
    {
      f_p_t = kilo_ticks;
     2e4:	80 91 6e 01 	lds	r24, 0x016E
     2e8:	90 91 6f 01 	lds	r25, 0x016F
     2ec:	a0 91 70 01 	lds	r26, 0x0170
     2f0:	b0 91 71 01 	lds	r27, 0x0171
     2f4:	80 93 37 01 	sts	0x0137, r24
     2f8:	90 93 38 01 	sts	0x0138, r25
     2fc:	a0 93 39 01 	sts	0x0139, r26
     300:	b0 93 3a 01 	sts	0x013A, r27
      memcpy(((void *)(&(messageA.data[5]))), &f_p_t, sizeof(int32_t));
     304:	80 93 44 01 	sts	0x0144, r24
     308:	90 93 45 01 	sts	0x0145, r25
     30c:	a0 93 46 01 	sts	0x0146, r26
     310:	b0 93 47 01 	sts	0x0147, r27
      messageA.crc = message_crc(&messageA);
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 57 10 	call	0x20ae	; 0x20ae <message_crc>
     31c:	90 93 4a 01 	sts	0x014A, r25
     320:	80 93 49 01 	sts	0x0149, r24

      //printf("The kilobot is on target for the first time\n");
      //printf("%" PRIu32 "\n", f_p_t);
      information_target_id = true;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 30 01 	sts	0x0130, r24
      set_color(RGB(1, 0, 1));
     32a:	81 e1       	ldi	r24, 0x11	; 17
     32c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <set_color>
     330:	75 cf       	rjmp	.-278    	; 0x21c <message_rx+0x30>

00000332 <setup>:

/*-------------------------------------------------------------------*/
/* Init function                                                     */
/*-------------------------------------------------------------------*/
void setup()
{
     332:	cf 93       	push	r28

  /* Initialise LED and motors */
  set_motors(0, 0);
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
  /* Initialise random seed */
  uint8_t seed = rand_hard();
     33c:	0e 94 45 0a 	call	0x148a	; 0x148a <rand_hard>
     340:	c8 2f       	mov	r28, r24
  rand_seed(seed);
     342:	0e 94 ac 0a 	call	0x1558	; 0x1558 <rand_seed>
  srand(seed);
     346:	8c 2f       	mov	r24, r28
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <srand>

  /*Compute the message CRC value for the Target_id*/
  messageA.data[0] = (uint8_t)id_robot;
     34e:	c1 e0       	ldi	r28, 0x01	; 1
     350:	c0 93 3f 01 	sts	0x013F, r28
  /* Compute the message CRC value for the id */
  messageA.data[1] = 0; // 0 I don't have the message
     354:	10 92 40 01 	sts	0x0140, r1
  messageA.type = NORMAL;
     358:	10 92 48 01 	sts	0x0148, r1
  messageA.crc = message_crc(&messageA);
     35c:	8f e3       	ldi	r24, 0x3F	; 63
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	0e 94 57 10 	call	0x20ae	; 0x20ae <message_crc>
     364:	90 93 4a 01 	sts	0x014A, r25
     368:	80 93 49 01 	sts	0x0149, r24
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     36c:	80 91 32 01 	lds	r24, 0x0132
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	51 f0       	breq	.+20     	; 0x388 <setup+0x56>
  {
    switch (new_motion_type)
    {
    case FORWARD:
      spinup_motors();
     374:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_straight_left, kilo_straight_right);
     378:	60 91 a7 01 	lds	r22, 0x01A7
     37c:	80 91 a6 01 	lds	r24, 0x01A6
     380:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     384:	c0 93 32 01 	sts	0x0132, r28
  messageA.type = NORMAL;
  messageA.crc = message_crc(&messageA);

  /* Initialise motion variables */
  set_motion(FORWARD);
}
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <loop>:
}
/*-------------------------------------------------------------------*/
/* Main loop                                                         */
/*-------------------------------------------------------------------*/
void loop()
{
     38c:	8f 92       	push	r8
     38e:	9f 92       	push	r9
     390:	af 92       	push	r10
     392:	bf 92       	push	r11
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
/*----------------------------------------------------------------------*/
/* Function implementing the correlated random walk and levy random walk*/
/*----------------------------------------------------------------------*/
void random_walk()
{
  switch (current_motion_type)
     39c:	80 91 32 01 	lds	r24, 0x0132
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <loop+0x1a>
     3a4:	96 c0       	rjmp	.+300    	; 0x4d2 <loop+0x146>
     3a6:	08 f4       	brcc	.+2      	; 0x3aa <loop+0x1e>
     3a8:	8a c0       	rjmp	.+276    	; 0x4be <loop+0x132>
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	08 f0       	brcs	.+2      	; 0x3b0 <loop+0x24>
     3ae:	87 c0       	rjmp	.+270    	; 0x4be <loop+0x132>
  {
  case TURN_LEFT:
  case TURN_RIGHT:
    if (kilo_ticks > last_motion_ticks + turning_ticks)
     3b0:	40 91 6e 01 	lds	r20, 0x016E
     3b4:	50 91 6f 01 	lds	r21, 0x016F
     3b8:	60 91 70 01 	lds	r22, 0x0170
     3bc:	70 91 71 01 	lds	r23, 0x0171
     3c0:	c0 90 2b 01 	lds	r12, 0x012B
     3c4:	d0 90 2c 01 	lds	r13, 0x012C
     3c8:	e0 90 2d 01 	lds	r14, 0x012D
     3cc:	f0 90 2e 01 	lds	r15, 0x012E
     3d0:	80 91 24 01 	lds	r24, 0x0124
     3d4:	90 91 25 01 	lds	r25, 0x0125
     3d8:	a0 91 26 01 	lds	r26, 0x0126
     3dc:	b0 91 27 01 	lds	r27, 0x0127
     3e0:	8c 0d       	add	r24, r12
     3e2:	9d 1d       	adc	r25, r13
     3e4:	ae 1d       	adc	r26, r14
     3e6:	bf 1d       	adc	r27, r15
     3e8:	84 17       	cp	r24, r20
     3ea:	95 07       	cpc	r25, r21
     3ec:	a6 07       	cpc	r26, r22
     3ee:	b7 07       	cpc	r27, r23
     3f0:	08 f4       	brcc	.+2      	; 0x3f4 <loop+0x68>
     3f2:	6c c1       	rjmp	.+728    	; 0x6cc <loop+0x340>
/* Function to send a message                                        */
/*-------------------------------------------------------------------*/
void broadcast()
{

  if (information_target_id && !sending_msg && kilo_ticks > last_broadcast_ticks + max_broadcast_ticks)
     3f4:	80 91 30 01 	lds	r24, 0x0130
     3f8:	88 23       	and	r24, r24
     3fa:	79 f1       	breq	.+94     	; 0x45a <loop+0xce>
     3fc:	80 91 31 01 	lds	r24, 0x0131
     400:	81 11       	cpse	r24, r1
     402:	2b c0       	rjmp	.+86     	; 0x45a <loop+0xce>
     404:	40 91 6e 01 	lds	r20, 0x016E
     408:	50 91 6f 01 	lds	r21, 0x016F
     40c:	60 91 70 01 	lds	r22, 0x0170
     410:	70 91 71 01 	lds	r23, 0x0171
     414:	80 91 20 01 	lds	r24, 0x0120
     418:	90 91 21 01 	lds	r25, 0x0121
     41c:	a0 91 22 01 	lds	r26, 0x0122
     420:	b0 91 23 01 	lds	r27, 0x0123
     424:	80 96       	adiw	r24, 0x20	; 32
     426:	a1 1d       	adc	r26, r1
     428:	b1 1d       	adc	r27, r1
     42a:	84 17       	cp	r24, r20
     42c:	95 07       	cpc	r25, r21
     42e:	a6 07       	cpc	r26, r22
     430:	b7 07       	cpc	r27, r23
     432:	98 f4       	brcc	.+38     	; 0x45a <loop+0xce>
  {
    last_broadcast_ticks = kilo_ticks;
     434:	80 91 6e 01 	lds	r24, 0x016E
     438:	90 91 6f 01 	lds	r25, 0x016F
     43c:	a0 91 70 01 	lds	r26, 0x0170
     440:	b0 91 71 01 	lds	r27, 0x0171
     444:	80 93 20 01 	sts	0x0120, r24
     448:	90 93 21 01 	sts	0x0121, r25
     44c:	a0 93 22 01 	sts	0x0122, r26
     450:	b0 93 23 01 	sts	0x0123, r27
    sending_msg = true;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 31 01 	sts	0x0131, r24
  }
}

void kilobotinfo()
{
  if (kilo_ticks > last_info_ticks + max_info_ticks)
     45a:	40 91 6e 01 	lds	r20, 0x016E
     45e:	50 91 6f 01 	lds	r21, 0x016F
     462:	60 91 70 01 	lds	r22, 0x0170
     466:	70 91 71 01 	lds	r23, 0x0171
     46a:	80 91 1c 01 	lds	r24, 0x011C
     46e:	90 91 1d 01 	lds	r25, 0x011D
     472:	a0 91 1e 01 	lds	r26, 0x011E
     476:	b0 91 1f 01 	lds	r27, 0x011F
     47a:	80 59       	subi	r24, 0x90	; 144
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	af 4f       	sbci	r26, 0xFF	; 255
     480:	bf 4f       	sbci	r27, 0xFF	; 255
     482:	84 17       	cp	r24, r20
     484:	95 07       	cpc	r25, r21
     486:	a6 07       	cpc	r26, r22
     488:	b7 07       	cpc	r27, r23
     48a:	80 f4       	brcc	.+32     	; 0x4ac <loop+0x120>
  {
    last_info_ticks = kilo_ticks;
     48c:	80 91 6e 01 	lds	r24, 0x016E
     490:	90 91 6f 01 	lds	r25, 0x016F
     494:	a0 91 70 01 	lds	r26, 0x0170
     498:	b0 91 71 01 	lds	r27, 0x0171
     49c:	80 93 1c 01 	sts	0x011C, r24
     4a0:	90 93 1d 01 	sts	0x011D, r25
     4a4:	a0 93 1e 01 	sts	0x011E, r26
     4a8:	b0 93 1f 01 	sts	0x011F, r27
{

  random_walk();
  broadcast();
  kilobotinfo();
}
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	08 95       	ret
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <loop+0x138>
     4c2:	98 cf       	rjmp	.-208    	; 0x3f4 <loop+0x68>
      spinup_motors();
      set_motors(0, kilo_turn_right);
      break;
    case STOP:
    default:
      set_motors(0, 0);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
    }
    current_motion_type = new_motion_type;
     4cc:	10 92 32 01 	sts	0x0132, r1
     4d0:	91 cf       	rjmp	.-222    	; 0x3f4 <loop+0x68>
      last_motion_ticks = kilo_ticks;
      set_motion(FORWARD);
    }
    break;
  case FORWARD:
    if (kilo_ticks > last_motion_ticks + straight_ticks)
     4d2:	40 91 6e 01 	lds	r20, 0x016E
     4d6:	50 91 6f 01 	lds	r21, 0x016F
     4da:	60 91 70 01 	lds	r22, 0x0170
     4de:	70 91 71 01 	lds	r23, 0x0171
     4e2:	20 91 28 01 	lds	r18, 0x0128
     4e6:	30 91 29 01 	lds	r19, 0x0129
     4ea:	80 91 24 01 	lds	r24, 0x0124
     4ee:	90 91 25 01 	lds	r25, 0x0125
     4f2:	a0 91 26 01 	lds	r26, 0x0126
     4f6:	b0 91 27 01 	lds	r27, 0x0127
     4fa:	82 0f       	add	r24, r18
     4fc:	93 1f       	adc	r25, r19
     4fe:	a1 1d       	adc	r26, r1
     500:	b1 1d       	adc	r27, r1
     502:	84 17       	cp	r24, r20
     504:	95 07       	cpc	r25, r21
     506:	a6 07       	cpc	r26, r22
     508:	b7 07       	cpc	r27, r23
     50a:	08 f0       	brcs	.+2      	; 0x50e <loop+0x182>
     50c:	73 cf       	rjmp	.-282    	; 0x3f4 <loop+0x68>
    {
      /* perform a random turn */
      last_motion_ticks = kilo_ticks;
     50e:	80 91 6e 01 	lds	r24, 0x016E
     512:	90 91 6f 01 	lds	r25, 0x016F
     516:	a0 91 70 01 	lds	r26, 0x0170
     51a:	b0 91 71 01 	lds	r27, 0x0171
     51e:	80 93 24 01 	sts	0x0124, r24
     522:	90 93 25 01 	sts	0x0125, r25
     526:	a0 93 26 01 	sts	0x0126, r26
     52a:	b0 93 27 01 	sts	0x0127, r27
      if (rand_soft() % 2)
     52e:	0e 94 94 0a 	call	0x1528	; 0x1528 <rand_soft>
     532:	80 ff       	sbrs	r24, 0
     534:	e7 c0       	rjmp	.+462    	; 0x704 <loop+0x378>
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     536:	80 91 32 01 	lds	r24, 0x0132
     53a:	82 30       	cpi	r24, 0x02	; 2
     53c:	51 f0       	breq	.+20     	; 0x552 <loop+0x1c6>
    case FORWARD:
      spinup_motors();
      set_motors(kilo_straight_left, kilo_straight_right);
      break;
    case TURN_LEFT:
      spinup_motors();
     53e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_turn_left, 0);
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	80 91 a8 01 	lds	r24, 0x01A8
     548:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	80 93 32 01 	sts	0x0132, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     552:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     556:	bc 01       	movw	r22, r24
     558:	99 0f       	add	r25, r25
     55a:	88 0b       	sbc	r24, r24
     55c:	99 0b       	sbc	r25, r25
     55e:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	a9 01       	movw	r20, r18
     568:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	58 e3       	ldi	r21, 0x38	; 56
     574:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
{
  double val, theta, u, q;
  q = 0.5;
  u = uniform_distribution(0.0, 1.0);
  val = (1.0 - c) / (1.0 + c);
  theta = 2 * atan(val * tan(M_PI * (u - q)));
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	5f e3       	ldi	r21, 0x3F	; 63
     580:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     584:	2b ed       	ldi	r18, 0xDB	; 219
     586:	3f e0       	ldi	r19, 0x0F	; 15
     588:	49 e4       	ldi	r20, 0x49	; 73
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     590:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <tan>
     594:	29 e3       	ldi	r18, 0x39	; 57
     596:	34 e9       	ldi	r19, 0x94	; 148
     598:	47 e5       	ldi	r20, 0x57	; 87
     59a:	5d e3       	ldi	r21, 0x3D	; 61
     59c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     5a0:	0e 94 bd 11 	call	0x237a	; 0x237a <atan>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
        //printf("%" PRIu32 "\n", turning_ticks);
        // //printf("%u" "\n", rand());
      }
      else
      {
        angle = fabs(wrapped_cauchy_ppf(CRW_exponent));
     5ac:	9f 77       	andi	r25, 0x7F	; 127
      }
      turning_ticks = (uint32_t)((angle / M_PI) * max_turning_ticks);
     5ae:	2b ed       	ldi	r18, 0xDB	; 219
     5b0:	3f e0       	ldi	r19, 0x0F	; 15
     5b2:	49 e4       	ldi	r20, 0x49	; 73
     5b4:	50 e4       	ldi	r21, 0x40	; 64
     5b6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 e2       	ldi	r20, 0x20	; 32
     5c0:	53 e4       	ldi	r21, 0x43	; 67
     5c2:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     5c6:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
     5ca:	60 93 2b 01 	sts	0x012B, r22
     5ce:	70 93 2c 01 	sts	0x012C, r23
     5d2:	80 93 2d 01 	sts	0x012D, r24
     5d6:	90 93 2e 01 	sts	0x012E, r25
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     5da:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     5de:	bc 01       	movw	r22, r24
     5e0:	99 0f       	add	r25, r25
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	a9 01       	movw	r20, r18
     5f0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	58 e3       	ldi	r21, 0x38	; 56
     5fc:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>

int levy(const double c, const double alpha)
{
  double u, v, t, s;

  u = M_PI * (uniform_distribution(0.0, 1.0) - 0.5); /*vedi uniform distribution */
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	5f e3       	ldi	r21, 0x3F	; 63
     608:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     60c:	2b ed       	ldi	r18, 0xDB	; 219
     60e:	3f e0       	ldi	r19, 0x0F	; 15
     610:	49 e4       	ldi	r20, 0x49	; 73
     612:	50 e4       	ldi	r21, 0x40	; 64
     614:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     618:	4b 01       	movw	r8, r22
     61a:	5c 01       	movw	r10, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     61c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     620:	bc 01       	movw	r22, r24
     622:	99 0f       	add	r25, r25
     624:	88 0b       	sbc	r24, r24
     626:	99 0b       	sbc	r25, r25
     628:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	58 e3       	ldi	r21, 0x38	; 56
     63e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24

double exponential_distribution(double lambda)
{
  double u, x;
  u = uniform_distribution(0.0, 1.0);
  x = (-lambda) * log(1 - u);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	80 e8       	ldi	r24, 0x80	; 128
     64c:	9f e3       	ldi	r25, 0x3F	; 63
     64e:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     652:	0e 94 c6 13 	call	0x278c	; 0x278c <log>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
     65a:	f7 fa       	bst	r15, 7
     65c:	f0 94       	com	r15
     65e:	f7 f8       	bld	r15, 7
     660:	f0 94       	com	r15
  }

  do
  {
    v = exponential_distribution(1.0); /*vedi esponential distribution */
  } while (v == 0);
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	a9 01       	movw	r20, r18
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__cmpsf2>
     670:	88 23       	and	r24, r24
     672:	a1 f2       	breq	.-88     	; 0x61c <loop+0x290>

  if (alpha == 2) /* gaussian case */
  {
    t = 2 * sin(u) * sqrt(v);
     674:	c5 01       	movw	r24, r10
     676:	b4 01       	movw	r22, r8
     678:	0e 94 cb 14 	call	0x2996	; 0x2996 <sin>
     67c:	4b 01       	movw	r8, r22
     67e:	5c 01       	movw	r10, r24
     680:	c7 01       	movw	r24, r14
     682:	b6 01       	movw	r22, r12
     684:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <sqrt>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
     68c:	a5 01       	movw	r20, r10
     68e:	94 01       	movw	r18, r8
     690:	c5 01       	movw	r24, r10
     692:	b4 01       	movw	r22, r8
     694:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     698:	a7 01       	movw	r20, r14
     69a:	96 01       	movw	r18, r12
     69c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    return (int)(c * t);
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 ea       	ldi	r20, 0xA0	; 160
     6a6:	52 e4       	ldi	r21, 0x42	; 66
     6a8:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     6ac:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
      straight_ticks = (uint32_t)(fabs(levy(std_motion_steps, levy_exponent)));
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     6bc:	9f 77       	andi	r25, 0x7F	; 127
     6be:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
     6c2:	70 93 29 01 	sts	0x0129, r23
     6c6:	60 93 28 01 	sts	0x0128, r22
     6ca:	94 ce       	rjmp	.-728    	; 0x3f4 <loop+0x68>
  case TURN_LEFT:
  case TURN_RIGHT:
    if (kilo_ticks > last_motion_ticks + turning_ticks)
    {
      /* start moving forward */
      last_motion_ticks = kilo_ticks;
     6cc:	80 91 6e 01 	lds	r24, 0x016E
     6d0:	90 91 6f 01 	lds	r25, 0x016F
     6d4:	a0 91 70 01 	lds	r26, 0x0170
     6d8:	b0 91 71 01 	lds	r27, 0x0171
     6dc:	80 93 24 01 	sts	0x0124, r24
     6e0:	90 93 25 01 	sts	0x0125, r25
     6e4:	a0 93 26 01 	sts	0x0126, r26
     6e8:	b0 93 27 01 	sts	0x0127, r27
  if (current_motion_type != new_motion_type)
  {
    switch (new_motion_type)
    {
    case FORWARD:
      spinup_motors();
     6ec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_straight_left, kilo_straight_right);
     6f0:	60 91 a7 01 	lds	r22, 0x01A7
     6f4:	80 91 a6 01 	lds	r24, 0x01A6
     6f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 32 01 	sts	0x0132, r24
     702:	78 ce       	rjmp	.-784    	; 0x3f4 <loop+0x68>
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     704:	80 91 32 01 	lds	r24, 0x0132
     708:	83 30       	cpi	r24, 0x03	; 3
     70a:	09 f4       	brne	.+2      	; 0x70e <loop+0x382>
     70c:	22 cf       	rjmp	.-444    	; 0x552 <loop+0x1c6>
    case TURN_LEFT:
      spinup_motors();
      set_motors(kilo_turn_left, 0);
      break;
    case TURN_RIGHT:
      spinup_motors();
     70e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(0, kilo_turn_right);
     712:	60 91 94 01 	lds	r22, 0x0194
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	80 93 32 01 	sts	0x0132, r24
     722:	17 cf       	rjmp	.-466    	; 0x552 <loop+0x1c6>

00000724 <uniform_distribution>:
#include <stdio.h>
#include <math.h>
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	49 01       	movw	r8, r18
     742:	5a 01       	movw	r10, r20

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     744:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     748:	bc 01       	movw	r22, r24
     74a:	99 0f       	add	r25, r25
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     754:	2b 01       	movw	r4, r22
     756:	3c 01       	movw	r6, r24
     758:	a7 01       	movw	r20, r14
     75a:	96 01       	movw	r18, r12
     75c:	c5 01       	movw	r24, r10
     75e:	b4 01       	movw	r22, r8
     760:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     764:	9b 01       	movw	r18, r22
     766:	ac 01       	movw	r20, r24
     768:	c3 01       	movw	r24, r6
     76a:	b2 01       	movw	r22, r4
     76c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     770:	a7 01       	movw	r20, r14
     772:	96 01       	movw	r18, r12
     774:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	58 e3       	ldi	r21, 0x38	; 56
     780:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
}
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	08 95       	ret

0000079e <wrapped_cauchy_ppf>:
  

}*/

double wrapped_cauchy_ppf(const double c)
{
     79e:	4f 92       	push	r4
     7a0:	5f 92       	push	r5
     7a2:	6f 92       	push	r6
     7a4:	7f 92       	push	r7
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	6b 01       	movw	r12, r22
     7b8:	7c 01       	movw	r14, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     7ba:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     7be:	bc 01       	movw	r22, r24
     7c0:	99 0f       	add	r25, r25
     7c2:	88 0b       	sbc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	a9 01       	movw	r20, r18
     7d0:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	58 e3       	ldi	r21, 0x38	; 56
     7dc:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
{
  double val, theta, u, q;
  q = 0.5;
  u = uniform_distribution(0.0, 1.0);
  val = (1.0 - c) / (1.0 + c);
  theta = 2 * atan(val * tan(M_PI * (u - q)));
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	5f e3       	ldi	r21, 0x3F	; 63
     7e8:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     7ec:	2b ed       	ldi	r18, 0xDB	; 219
     7ee:	3f e0       	ldi	r19, 0x0F	; 15
     7f0:	49 e4       	ldi	r20, 0x49	; 73
     7f2:	50 e4       	ldi	r21, 0x40	; 64
     7f4:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     7f8:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <tan>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
double wrapped_cauchy_ppf(const double c)
{
  double val, theta, u, q;
  q = 0.5;
  u = uniform_distribution(0.0, 1.0);
  val = (1.0 - c) / (1.0 + c);
     800:	a7 01       	movw	r20, r14
     802:	96 01       	movw	r18, r12
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	9f e3       	ldi	r25, 0x3F	; 63
     80c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     810:	2b 01       	movw	r4, r22
     812:	3c 01       	movw	r6, r24
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	5f e3       	ldi	r21, 0x3F	; 63
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     824:	9b 01       	movw	r18, r22
     826:	ac 01       	movw	r20, r24
     828:	c3 01       	movw	r24, r6
     82a:	b2 01       	movw	r22, r4
     82c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
  theta = 2 * atan(val * tan(M_PI * (u - q)));
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     83c:	0e 94 bd 11 	call	0x237a	; 0x237a <atan>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
  return theta;
}
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	bf 90       	pop	r11
     852:	af 90       	pop	r10
     854:	9f 90       	pop	r9
     856:	8f 90       	pop	r8
     858:	7f 90       	pop	r7
     85a:	6f 90       	pop	r6
     85c:	5f 90       	pop	r5
     85e:	4f 90       	pop	r4
     860:	08 95       	ret

00000862 <exponential_distribution>:
  x=(-1/lambda)*log(u);
  return(x);
}*/

double exponential_distribution(double lambda)
{
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     86e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     872:	bc 01       	movw	r22, r24
     874:	99 0f       	add	r25, r25
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	a9 01       	movw	r20, r18
     884:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	58 e3       	ldi	r21, 0x38	; 56
     890:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24

double exponential_distribution(double lambda)
{
  double u, x;
  u = uniform_distribution(0.0, 1.0);
  x = (-lambda) * log(1 - u);
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e8       	ldi	r24, 0x80	; 128
     89e:	9f e3       	ldi	r25, 0x3F	; 63
     8a0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     8a4:	0e 94 c6 13 	call	0x278c	; 0x278c <log>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	90 58       	subi	r25, 0x80	; 128
     8b2:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
  return (x);
}
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	08 95       	ret

000008c0 <levy>:
   For alpha = 2, we get the Gaussian distribution with sigma = sqrt(2) c.

   */

int levy(const double c, const double alpha)
{
     8c0:	4f 92       	push	r4
     8c2:	5f 92       	push	r5
     8c4:	6f 92       	push	r6
     8c6:	7f 92       	push	r7
     8c8:	8f 92       	push	r8
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	64 97       	sbiw	r28, 0x14	; 20
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	69 83       	std	Y+1, r22	; 0x01
     8ee:	7a 83       	std	Y+2, r23	; 0x02
     8f0:	8b 83       	std	Y+3, r24	; 0x03
     8f2:	9c 83       	std	Y+4, r25	; 0x04
     8f4:	29 01       	movw	r4, r18
     8f6:	3a 01       	movw	r6, r20
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     8f8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     8fc:	bc 01       	movw	r22, r24
     8fe:	99 0f       	add	r25, r25
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	a9 01       	movw	r20, r18
     90e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	58 e3       	ldi	r21, 0x38	; 56
     91a:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>

int levy(const double c, const double alpha)
{
  double u, v, t, s;

  u = M_PI * (uniform_distribution(0.0, 1.0) - 0.5); /*vedi uniform distribution */
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     92a:	2b ed       	ldi	r18, 0xDB	; 219
     92c:	3f e0       	ldi	r19, 0x0F	; 15
     92e:	49 e4       	ldi	r20, 0x49	; 73
     930:	50 e4       	ldi	r21, 0x40	; 64
     932:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     936:	4b 01       	movw	r8, r22
     938:	5c 01       	movw	r10, r24

  if (alpha == 1) /* cauchy case */
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	5f e3       	ldi	r21, 0x3F	; 63
     942:	c3 01       	movw	r24, r6
     944:	b2 01       	movw	r22, r4
     946:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__cmpsf2>
     94a:	88 23       	and	r24, r24
     94c:	09 f4       	brne	.+2      	; 0x950 <__stack+0x51>
     94e:	df c0       	rjmp	.+446    	; 0xb0e <__stack+0x20f>
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     950:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     954:	bc 01       	movw	r22, r24
     956:	99 0f       	add	r25, r25
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	a9 01       	movw	r20, r18
     966:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	58 e3       	ldi	r21, 0x38	; 56
     972:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24

double exponential_distribution(double lambda)
{
  double u, x;
  u = uniform_distribution(0.0, 1.0);
  x = (-lambda) * log(1 - u);
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	9f e3       	ldi	r25, 0x3F	; 63
     982:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     986:	0e 94 c6 13 	call	0x278c	; 0x278c <log>
     98a:	6b 01       	movw	r12, r22
     98c:	7c 01       	movw	r14, r24
     98e:	f7 fa       	bst	r15, 7
     990:	f0 94       	com	r15
     992:	f7 f8       	bld	r15, 7
     994:	f0 94       	com	r15
  }

  do
  {
    v = exponential_distribution(1.0); /*vedi esponential distribution */
  } while (v == 0);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	a9 01       	movw	r20, r18
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__cmpsf2>
     9a4:	88 23       	and	r24, r24
     9a6:	a1 f2       	breq	.-88     	; 0x950 <__stack+0x51>

  if (alpha == 2) /* gaussian case */
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e4       	ldi	r21, 0x40	; 64
     9b0:	c3 01       	movw	r24, r6
     9b2:	b2 01       	movw	r22, r4
     9b4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0xbf>
     9bc:	86 c0       	rjmp	.+268    	; 0xaca <__stack+0x1cb>
    return (int)(c * t);
  }

  /* general case */

  t = sin(alpha * u) / pow(cos(u), 1 / alpha);
     9be:	a5 01       	movw	r20, r10
     9c0:	94 01       	movw	r18, r8
     9c2:	c3 01       	movw	r24, r6
     9c4:	b2 01       	movw	r22, r4
     9c6:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     9ca:	0e 94 cb 14 	call	0x2996	; 0x2996 <sin>
     9ce:	69 87       	std	Y+9, r22	; 0x09
     9d0:	7a 87       	std	Y+10, r23	; 0x0a
     9d2:	8b 87       	std	Y+11, r24	; 0x0b
     9d4:	9c 87       	std	Y+12, r25	; 0x0c
     9d6:	c5 01       	movw	r24, r10
     9d8:	b4 01       	movw	r22, r8
     9da:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <cos>
     9de:	6d 83       	std	Y+5, r22	; 0x05
     9e0:	7e 83       	std	Y+6, r23	; 0x06
     9e2:	8f 83       	std	Y+7, r24	; 0x07
     9e4:	98 87       	std	Y+8, r25	; 0x08
     9e6:	a3 01       	movw	r20, r6
     9e8:	92 01       	movw	r18, r4
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 e8       	ldi	r24, 0x80	; 128
     9f0:	9f e3       	ldi	r25, 0x3F	; 63
     9f2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     9f6:	9b 01       	movw	r18, r22
     9f8:	ac 01       	movw	r20, r24
     9fa:	6d 81       	ldd	r22, Y+5	; 0x05
     9fc:	7e 81       	ldd	r23, Y+6	; 0x06
     9fe:	8f 81       	ldd	r24, Y+7	; 0x07
     a00:	98 85       	ldd	r25, Y+8	; 0x08
     a02:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <pow>
     a06:	69 8b       	std	Y+17, r22	; 0x11
     a08:	7a 8b       	std	Y+18, r23	; 0x12
     a0a:	8b 8b       	std	Y+19, r24	; 0x13
     a0c:	9c 8b       	std	Y+20, r25	; 0x14
  s = pow(cos((1 - alpha) * u) / v, (1 - alpha) / alpha);
     a0e:	a3 01       	movw	r20, r6
     a10:	92 01       	movw	r18, r4
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	9f e3       	ldi	r25, 0x3F	; 63
     a1a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     a1e:	6d 83       	std	Y+5, r22	; 0x05
     a20:	7e 83       	std	Y+6, r23	; 0x06
     a22:	8f 83       	std	Y+7, r24	; 0x07
     a24:	98 87       	std	Y+8, r25	; 0x08
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     a32:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <cos>
     a36:	6d 87       	std	Y+13, r22	; 0x0d
     a38:	7e 87       	std	Y+14, r23	; 0x0e
     a3a:	8f 87       	std	Y+15, r24	; 0x0f
     a3c:	98 8b       	std	Y+16, r25	; 0x10
     a3e:	a3 01       	movw	r20, r6
     a40:	92 01       	movw	r18, r4
     a42:	6d 81       	ldd	r22, Y+5	; 0x05
     a44:	7e 81       	ldd	r23, Y+6	; 0x06
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	98 85       	ldd	r25, Y+8	; 0x08
     a4a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     a4e:	4b 01       	movw	r8, r22
     a50:	5c 01       	movw	r10, r24
     a52:	a7 01       	movw	r20, r14
     a54:	96 01       	movw	r18, r12
     a56:	6d 85       	ldd	r22, Y+13	; 0x0d
     a58:	7e 85       	ldd	r23, Y+14	; 0x0e
     a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a5c:	98 89       	ldd	r25, Y+16	; 0x10
     a5e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     a62:	a5 01       	movw	r20, r10
     a64:	94 01       	movw	r18, r8
     a66:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <pow>
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
    return (int)(c * t);
  }

  /* general case */

  t = sin(alpha * u) / pow(cos(u), 1 / alpha);
     a6e:	29 89       	ldd	r18, Y+17	; 0x11
     a70:	3a 89       	ldd	r19, Y+18	; 0x12
     a72:	4b 89       	ldd	r20, Y+19	; 0x13
     a74:	5c 89       	ldd	r21, Y+20	; 0x14
     a76:	69 85       	ldd	r22, Y+9	; 0x09
     a78:	7a 85       	ldd	r23, Y+10	; 0x0a
     a7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a7e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
  s = pow(cos((1 - alpha) * u) / v, (1 - alpha) / alpha);

  return (int)(c * t * s);
     a86:	69 81       	ldd	r22, Y+1	; 0x01
     a88:	7a 81       	ldd	r23, Y+2	; 0x02
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     a92:	a7 01       	movw	r20, r14
     a94:	96 01       	movw	r18, r12
     a96:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     a9a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
     a9e:	cb 01       	movw	r24, r22
}
     aa0:	64 96       	adiw	r28, 0x14	; 20
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	9f 90       	pop	r9
     abe:	8f 90       	pop	r8
     ac0:	7f 90       	pop	r7
     ac2:	6f 90       	pop	r6
     ac4:	5f 90       	pop	r5
     ac6:	4f 90       	pop	r4
     ac8:	08 95       	ret
    v = exponential_distribution(1.0); /*vedi esponential distribution */
  } while (v == 0);

  if (alpha == 2) /* gaussian case */
  {
    t = 2 * sin(u) * sqrt(v);
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	0e 94 cb 14 	call	0x2996	; 0x2996 <sin>
     ad2:	4b 01       	movw	r8, r22
     ad4:	5c 01       	movw	r10, r24
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <sqrt>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	a5 01       	movw	r20, r10
     ae4:	94 01       	movw	r18, r8
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     aee:	a7 01       	movw	r20, r14
     af0:	96 01       	movw	r18, r12
     af2:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
    return (int)(c * t);
     afa:	69 81       	ldd	r22, Y+1	; 0x01
     afc:	7a 81       	ldd	r23, Y+2	; 0x02
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	9c 81       	ldd	r25, Y+4	; 0x04
     b02:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     b06:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
     b0a:	cb 01       	movw	r24, r22
     b0c:	c9 cf       	rjmp	.-110    	; 0xaa0 <__stack+0x1a1>

  u = M_PI * (uniform_distribution(0.0, 1.0) - 0.5); /*vedi uniform distribution */

  if (alpha == 1) /* cauchy case */
  {
    t = tan(u);
     b0e:	c5 01       	movw	r24, r10
     b10:	b4 01       	movw	r22, r8
     b12:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <tan>
     b16:	ef cf       	rjmp	.-34     	; 0xaf6 <__stack+0x1f7>

00000b18 <set_motion>:

/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
     b18:	cf 93       	push	r28
  if (current_motion_type != new_motion_type)
     b1a:	90 91 32 01 	lds	r25, 0x0132
     b1e:	98 17       	cp	r25, r24
     b20:	69 f0       	breq	.+26     	; 0xb3c <set_motion+0x24>
     b22:	c8 2f       	mov	r28, r24
  {
    switch (new_motion_type)
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	a1 f0       	breq	.+40     	; 0xb50 <set_motion+0x38>
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	51 f0       	breq	.+20     	; 0xb40 <set_motion+0x28>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	c1 f0       	breq	.+48     	; 0xb60 <set_motion+0x48>
      spinup_motors();
      set_motors(0, kilo_turn_right);
      break;
    case STOP:
    default:
      set_motors(0, 0);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
    }
    current_motion_type = new_motion_type;
     b38:	c0 93 32 01 	sts	0x0132, r28
  }
}
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret
    case TURN_LEFT:
      spinup_motors();
      set_motors(kilo_turn_left, 0);
      break;
    case TURN_RIGHT:
      spinup_motors();
     b40:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(0, kilo_turn_right);
     b44:	60 91 94 01 	lds	r22, 0x0194
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
     b4e:	f4 cf       	rjmp	.-24     	; 0xb38 <set_motion+0x20>
    case FORWARD:
      spinup_motors();
      set_motors(kilo_straight_left, kilo_straight_right);
      break;
    case TURN_LEFT:
      spinup_motors();
     b50:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_turn_left, 0);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	80 91 a8 01 	lds	r24, 0x01A8
     b5a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
     b5e:	ec cf       	rjmp	.-40     	; 0xb38 <set_motion+0x20>
  if (current_motion_type != new_motion_type)
  {
    switch (new_motion_type)
    {
    case FORWARD:
      spinup_motors();
     b60:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_straight_left, kilo_straight_right);
     b64:	60 91 a7 01 	lds	r22, 0x01A7
     b68:	80 91 a6 01 	lds	r24, 0x01A6
     b6c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
     b70:	e3 cf       	rjmp	.-58     	; 0xb38 <set_motion+0x20>

00000b72 <broadcast>:
/* Function to send a message                                        */
/*-------------------------------------------------------------------*/
void broadcast()
{

  if (information_target_id && !sending_msg && kilo_ticks > last_broadcast_ticks + max_broadcast_ticks)
     b72:	80 91 30 01 	lds	r24, 0x0130
     b76:	88 23       	and	r24, r24
     b78:	79 f1       	breq	.+94     	; 0xbd8 <broadcast+0x66>
     b7a:	80 91 31 01 	lds	r24, 0x0131
     b7e:	81 11       	cpse	r24, r1
     b80:	2b c0       	rjmp	.+86     	; 0xbd8 <broadcast+0x66>
     b82:	40 91 6e 01 	lds	r20, 0x016E
     b86:	50 91 6f 01 	lds	r21, 0x016F
     b8a:	60 91 70 01 	lds	r22, 0x0170
     b8e:	70 91 71 01 	lds	r23, 0x0171
     b92:	80 91 20 01 	lds	r24, 0x0120
     b96:	90 91 21 01 	lds	r25, 0x0121
     b9a:	a0 91 22 01 	lds	r26, 0x0122
     b9e:	b0 91 23 01 	lds	r27, 0x0123
     ba2:	80 96       	adiw	r24, 0x20	; 32
     ba4:	a1 1d       	adc	r26, r1
     ba6:	b1 1d       	adc	r27, r1
     ba8:	84 17       	cp	r24, r20
     baa:	95 07       	cpc	r25, r21
     bac:	a6 07       	cpc	r26, r22
     bae:	b7 07       	cpc	r27, r23
     bb0:	98 f4       	brcc	.+38     	; 0xbd8 <broadcast+0x66>
  {
    last_broadcast_ticks = kilo_ticks;
     bb2:	80 91 6e 01 	lds	r24, 0x016E
     bb6:	90 91 6f 01 	lds	r25, 0x016F
     bba:	a0 91 70 01 	lds	r26, 0x0170
     bbe:	b0 91 71 01 	lds	r27, 0x0171
     bc2:	80 93 20 01 	sts	0x0120, r24
     bc6:	90 93 21 01 	sts	0x0121, r25
     bca:	a0 93 22 01 	sts	0x0122, r26
     bce:	b0 93 23 01 	sts	0x0123, r27
    sending_msg = true;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 31 01 	sts	0x0131, r24
     bd8:	08 95       	ret

00000bda <random_walk>:
}
/*----------------------------------------------------------------------*/
/* Function implementing the correlated random walk and levy random walk*/
/*----------------------------------------------------------------------*/
void random_walk()
{
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
  switch (current_motion_type)
     bea:	80 91 32 01 	lds	r24, 0x0132
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	b9 f1       	breq	.+110    	; 0xc60 <random_walk+0x86>
     bf2:	68 f1       	brcs	.+90     	; 0xc4e <random_walk+0x74>
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	58 f5       	brcc	.+86     	; 0xc4e <random_walk+0x74>
  {
  case TURN_LEFT:
  case TURN_RIGHT:
    if (kilo_ticks > last_motion_ticks + turning_ticks)
     bf8:	40 91 6e 01 	lds	r20, 0x016E
     bfc:	50 91 6f 01 	lds	r21, 0x016F
     c00:	60 91 70 01 	lds	r22, 0x0170
     c04:	70 91 71 01 	lds	r23, 0x0171
     c08:	c0 90 2b 01 	lds	r12, 0x012B
     c0c:	d0 90 2c 01 	lds	r13, 0x012C
     c10:	e0 90 2d 01 	lds	r14, 0x012D
     c14:	f0 90 2e 01 	lds	r15, 0x012E
     c18:	80 91 24 01 	lds	r24, 0x0124
     c1c:	90 91 25 01 	lds	r25, 0x0125
     c20:	a0 91 26 01 	lds	r26, 0x0126
     c24:	b0 91 27 01 	lds	r27, 0x0127
     c28:	8c 0d       	add	r24, r12
     c2a:	9d 1d       	adc	r25, r13
     c2c:	ae 1d       	adc	r26, r14
     c2e:	bf 1d       	adc	r27, r15
     c30:	84 17       	cp	r24, r20
     c32:	95 07       	cpc	r25, r21
     c34:	a6 07       	cpc	r26, r22
     c36:	b7 07       	cpc	r27, r23
     c38:	08 f4       	brcc	.+2      	; 0xc3c <random_walk+0x62>
     c3a:	0e c1       	rjmp	.+540    	; 0xe58 <random_walk+0x27e>

  case STOP:
  default:
    set_motion(STOP);
  }
}
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	08 95       	ret
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     c4e:	88 23       	and	r24, r24
     c50:	a9 f3       	breq	.-22     	; 0xc3c <random_walk+0x62>
      spinup_motors();
      set_motors(0, kilo_turn_right);
      break;
    case STOP:
    default:
      set_motors(0, 0);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
    }
    current_motion_type = new_motion_type;
     c5a:	10 92 32 01 	sts	0x0132, r1
     c5e:	ee cf       	rjmp	.-36     	; 0xc3c <random_walk+0x62>
      last_motion_ticks = kilo_ticks;
      set_motion(FORWARD);
    }
    break;
  case FORWARD:
    if (kilo_ticks > last_motion_ticks + straight_ticks)
     c60:	40 91 6e 01 	lds	r20, 0x016E
     c64:	50 91 6f 01 	lds	r21, 0x016F
     c68:	60 91 70 01 	lds	r22, 0x0170
     c6c:	70 91 71 01 	lds	r23, 0x0171
     c70:	20 91 28 01 	lds	r18, 0x0128
     c74:	30 91 29 01 	lds	r19, 0x0129
     c78:	80 91 24 01 	lds	r24, 0x0124
     c7c:	90 91 25 01 	lds	r25, 0x0125
     c80:	a0 91 26 01 	lds	r26, 0x0126
     c84:	b0 91 27 01 	lds	r27, 0x0127
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	a1 1d       	adc	r26, r1
     c8e:	b1 1d       	adc	r27, r1
     c90:	84 17       	cp	r24, r20
     c92:	95 07       	cpc	r25, r21
     c94:	a6 07       	cpc	r26, r22
     c96:	b7 07       	cpc	r27, r23
     c98:	88 f6       	brcc	.-94     	; 0xc3c <random_walk+0x62>
    {
      /* perform a random turn */
      last_motion_ticks = kilo_ticks;
     c9a:	80 91 6e 01 	lds	r24, 0x016E
     c9e:	90 91 6f 01 	lds	r25, 0x016F
     ca2:	a0 91 70 01 	lds	r26, 0x0170
     ca6:	b0 91 71 01 	lds	r27, 0x0171
     caa:	80 93 24 01 	sts	0x0124, r24
     cae:	90 93 25 01 	sts	0x0125, r25
     cb2:	a0 93 26 01 	sts	0x0126, r26
     cb6:	b0 93 27 01 	sts	0x0127, r27
      if (rand_soft() % 2)
     cba:	0e 94 94 0a 	call	0x1528	; 0x1528 <rand_soft>
     cbe:	80 ff       	sbrs	r24, 0
     cc0:	e7 c0       	rjmp	.+462    	; 0xe90 <random_walk+0x2b6>
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     cc2:	80 91 32 01 	lds	r24, 0x0132
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	51 f0       	breq	.+20     	; 0xcde <random_walk+0x104>
    case FORWARD:
      spinup_motors();
      set_motors(kilo_straight_left, kilo_straight_right);
      break;
    case TURN_LEFT:
      spinup_motors();
     cca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_turn_left, 0);
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	80 91 a8 01 	lds	r24, 0x01A8
     cd4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	80 93 32 01 	sts	0x0132, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     cde:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     ce2:	bc 01       	movw	r22, r24
     ce4:	99 0f       	add	r25, r25
     ce6:	88 0b       	sbc	r24, r24
     ce8:	99 0b       	sbc	r25, r25
     cea:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	a9 01       	movw	r20, r18
     cf4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	58 e3       	ldi	r21, 0x38	; 56
     d00:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
{
  double val, theta, u, q;
  q = 0.5;
  u = uniform_distribution(0.0, 1.0);
  val = (1.0 - c) / (1.0 + c);
  theta = 2 * atan(val * tan(M_PI * (u - q)));
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     d10:	2b ed       	ldi	r18, 0xDB	; 219
     d12:	3f e0       	ldi	r19, 0x0F	; 15
     d14:	49 e4       	ldi	r20, 0x49	; 73
     d16:	50 e4       	ldi	r21, 0x40	; 64
     d18:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     d1c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <tan>
     d20:	29 e3       	ldi	r18, 0x39	; 57
     d22:	34 e9       	ldi	r19, 0x94	; 148
     d24:	47 e5       	ldi	r20, 0x57	; 87
     d26:	5d e3       	ldi	r21, 0x3D	; 61
     d28:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     d2c:	0e 94 bd 11 	call	0x237a	; 0x237a <atan>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
        //printf("%" PRIu32 "\n", turning_ticks);
        // //printf("%u" "\n", rand());
      }
      else
      {
        angle = fabs(wrapped_cauchy_ppf(CRW_exponent));
     d38:	9f 77       	andi	r25, 0x7F	; 127
      }
      turning_ticks = (uint32_t)((angle / M_PI) * max_turning_ticks);
     d3a:	2b ed       	ldi	r18, 0xDB	; 219
     d3c:	3f e0       	ldi	r19, 0x0F	; 15
     d3e:	49 e4       	ldi	r20, 0x49	; 73
     d40:	50 e4       	ldi	r21, 0x40	; 64
     d42:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	53 e4       	ldi	r21, 0x43	; 67
     d4e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     d52:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
     d56:	60 93 2b 01 	sts	0x012B, r22
     d5a:	70 93 2c 01 	sts	0x012C, r23
     d5e:	80 93 2d 01 	sts	0x012D, r24
     d62:	90 93 2e 01 	sts	0x012E, r25
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     d66:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     d6a:	bc 01       	movw	r22, r24
     d6c:	99 0f       	add	r25, r25
     d6e:	88 0b       	sbc	r24, r24
     d70:	99 0b       	sbc	r25, r25
     d72:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	a9 01       	movw	r20, r18
     d7c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	58 e3       	ldi	r21, 0x38	; 56
     d88:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>

int levy(const double c, const double alpha)
{
  double u, v, t, s;

  u = M_PI * (uniform_distribution(0.0, 1.0) - 0.5); /*vedi uniform distribution */
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     d98:	2b ed       	ldi	r18, 0xDB	; 219
     d9a:	3f e0       	ldi	r19, 0x0F	; 15
     d9c:	49 e4       	ldi	r20, 0x49	; 73
     d9e:	50 e4       	ldi	r21, 0x40	; 64
     da0:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     da4:	4b 01       	movw	r8, r22
     da6:	5c 01       	movw	r10, r24
#include "distribution_functions.h"

double uniform_distribution(double a, double b)
{

  return (rand() * (b - a) + a) / ((double)RAND_MAX + 1);
     da8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
     dac:	bc 01       	movw	r22, r24
     dae:	99 0f       	add	r25, r25
     db0:	88 0b       	sbc	r24, r24
     db2:	99 0b       	sbc	r25, r25
     db4:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	a9 01       	movw	r20, r18
     dbe:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	58 e3       	ldi	r21, 0x38	; 56
     dca:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     dce:	9b 01       	movw	r18, r22
     dd0:	ac 01       	movw	r20, r24

double exponential_distribution(double lambda)
{
  double u, x;
  u = uniform_distribution(0.0, 1.0);
  x = (-lambda) * log(1 - u);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	9f e3       	ldi	r25, 0x3F	; 63
     dda:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
     dde:	0e 94 c6 13 	call	0x278c	; 0x278c <log>
     de2:	6b 01       	movw	r12, r22
     de4:	7c 01       	movw	r14, r24
     de6:	f7 fa       	bst	r15, 7
     de8:	f0 94       	com	r15
     dea:	f7 f8       	bld	r15, 7
     dec:	f0 94       	com	r15
  }

  do
  {
    v = exponential_distribution(1.0); /*vedi esponential distribution */
  } while (v == 0);
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	a9 01       	movw	r20, r18
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__cmpsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	a1 f2       	breq	.-88     	; 0xda8 <random_walk+0x1ce>

  if (alpha == 2) /* gaussian case */
  {
    t = 2 * sin(u) * sqrt(v);
     e00:	c5 01       	movw	r24, r10
     e02:	b4 01       	movw	r22, r8
     e04:	0e 94 cb 14 	call	0x2996	; 0x2996 <sin>
     e08:	4b 01       	movw	r8, r22
     e0a:	5c 01       	movw	r10, r24
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <sqrt>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
     e18:	a5 01       	movw	r20, r10
     e1a:	94 01       	movw	r18, r8
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
     e28:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    return (int)(c * t);
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 ea       	ldi	r20, 0xA0	; 160
     e32:	52 e4       	ldi	r21, 0x42	; 66
     e34:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
     e38:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
      straight_ticks = (uint32_t)(fabs(levy(std_motion_steps, levy_exponent)));
     e3c:	07 2e       	mov	r0, r23
     e3e:	00 0c       	add	r0, r0
     e40:	88 0b       	sbc	r24, r24
     e42:	99 0b       	sbc	r25, r25
     e44:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
     e48:	9f 77       	andi	r25, 0x7F	; 127
     e4a:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
     e4e:	70 93 29 01 	sts	0x0129, r23
     e52:	60 93 28 01 	sts	0x0128, r22
     e56:	f2 ce       	rjmp	.-540    	; 0xc3c <random_walk+0x62>
  case TURN_LEFT:
  case TURN_RIGHT:
    if (kilo_ticks > last_motion_ticks + turning_ticks)
    {
      /* start moving forward */
      last_motion_ticks = kilo_ticks;
     e58:	80 91 6e 01 	lds	r24, 0x016E
     e5c:	90 91 6f 01 	lds	r25, 0x016F
     e60:	a0 91 70 01 	lds	r26, 0x0170
     e64:	b0 91 71 01 	lds	r27, 0x0171
     e68:	80 93 24 01 	sts	0x0124, r24
     e6c:	90 93 25 01 	sts	0x0125, r25
     e70:	a0 93 26 01 	sts	0x0126, r26
     e74:	b0 93 27 01 	sts	0x0127, r27
  if (current_motion_type != new_motion_type)
  {
    switch (new_motion_type)
    {
    case FORWARD:
      spinup_motors();
     e78:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(kilo_straight_left, kilo_straight_right);
     e7c:	60 91 a7 01 	lds	r22, 0x01A7
     e80:	80 91 a6 01 	lds	r24, 0x01A6
     e84:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 32 01 	sts	0x0132, r24
     e8e:	d6 ce       	rjmp	.-596    	; 0xc3c <random_walk+0x62>
/*-------------------------------------------------------------------*/
/* Function for setting the motor speed                              */
/*-------------------------------------------------------------------*/
void set_motion(motion_t new_motion_type)
{
  if (current_motion_type != new_motion_type)
     e90:	80 91 32 01 	lds	r24, 0x0132
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	09 f4       	brne	.+2      	; 0xe9a <random_walk+0x2c0>
     e98:	22 cf       	rjmp	.-444    	; 0xcde <random_walk+0x104>
    case TURN_LEFT:
      spinup_motors();
      set_motors(kilo_turn_left, 0);
      break;
    case TURN_RIGHT:
      spinup_motors();
     e9a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <spinup_motors>
      set_motors(0, kilo_turn_right);
     e9e:	60 91 94 01 	lds	r22, 0x0194
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <set_motors>
      break;
    case STOP:
    default:
      set_motors(0, 0);
    }
    current_motion_type = new_motion_type;
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	80 93 32 01 	sts	0x0132, r24
     eae:	17 cf       	rjmp	.-466    	; 0xcde <random_walk+0x104>

00000eb0 <kilobotinfo>:
  }
}

void kilobotinfo()
{
  if (kilo_ticks > last_info_ticks + max_info_ticks)
     eb0:	40 91 6e 01 	lds	r20, 0x016E
     eb4:	50 91 6f 01 	lds	r21, 0x016F
     eb8:	60 91 70 01 	lds	r22, 0x0170
     ebc:	70 91 71 01 	lds	r23, 0x0171
     ec0:	80 91 1c 01 	lds	r24, 0x011C
     ec4:	90 91 1d 01 	lds	r25, 0x011D
     ec8:	a0 91 1e 01 	lds	r26, 0x011E
     ecc:	b0 91 1f 01 	lds	r27, 0x011F
     ed0:	80 59       	subi	r24, 0x90	; 144
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	af 4f       	sbci	r26, 0xFF	; 255
     ed6:	bf 4f       	sbci	r27, 0xFF	; 255
     ed8:	84 17       	cp	r24, r20
     eda:	95 07       	cpc	r25, r21
     edc:	a6 07       	cpc	r26, r22
     ede:	b7 07       	cpc	r27, r23
     ee0:	80 f4       	brcc	.+32     	; 0xf02 <kilobotinfo+0x52>
  {
    last_info_ticks = kilo_ticks;
     ee2:	80 91 6e 01 	lds	r24, 0x016E
     ee6:	90 91 6f 01 	lds	r25, 0x016F
     eea:	a0 91 70 01 	lds	r26, 0x0170
     eee:	b0 91 71 01 	lds	r27, 0x0171
     ef2:	80 93 1c 01 	sts	0x011C, r24
     ef6:	90 93 1d 01 	sts	0x011D, r25
     efa:	a0 93 1e 01 	sts	0x011E, r26
     efe:	b0 93 1f 01 	sts	0x011F, r27
     f02:	08 95       	ret

00000f04 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     f04:	08 95       	ret

00000f06 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	08 95       	ret

00000f0c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     f0c:	08 95       	ret

00000f0e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
    cli();
     f1c:	f8 94       	cli

    ports_off();
     f1e:	14 b8       	out	0x04, r1	; 4
     f20:	17 b8       	out	0x07, r1	; 7
     f22:	1a b8       	out	0x0a, r1	; 10
     f24:	15 b8       	out	0x05, r1	; 5
     f26:	18 b8       	out	0x08, r1	; 8
     f28:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     f2a:	52 9a       	sbi	0x0a, 2	; 10
     f2c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     f2e:	14 bc       	out	0x24, r1	; 36
     f30:	85 e0       	ldi	r24, 0x05	; 5
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	87 bd       	out	0x27, r24	; 39
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
     f3e:	10 92 80 00 	sts	0x0080, r1
     f42:	10 92 81 00 	sts	0x0081, r1
     f46:	2f e8       	ldi	r18, 0x8F	; 143
     f48:	3b e0       	ldi	r19, 0x0B	; 11
     f4a:	30 93 89 00 	sts	0x0089, r19
     f4e:	20 93 88 00 	sts	0x0088, r18
     f52:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
     f56:	53 98       	cbi	0x0a, 3	; 10
     f58:	23 98       	cbi	0x04, 3	; 4
     f5a:	91 ea       	ldi	r25, 0xA1	; 161
     f5c:	90 93 b0 00 	sts	0x00B0, r25
     f60:	80 93 b1 00 	sts	0x00B1, r24
     f64:	10 92 b4 00 	sts	0x00B4, r1
     f68:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     f6c:	8b e0       	ldi	r24, 0x0B	; 11
     f6e:	80 bf       	out	0x30, r24	; 48
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	80 93 7c 00 	sts	0x007C, r24
     f7c:	83 e8       	ldi	r24, 0x83	; 131
     f7e:	80 93 7a 00 	sts	0x007A, r24
     f82:	80 91 7a 00 	lds	r24, 0x007A
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	80 93 7a 00 	sts	0x007A, r24
     f8c:	80 91 7a 00 	lds	r24, 0x007A
     f90:	86 fd       	sbrc	r24, 6
     f92:	fc cf       	rjmp	.-8      	; 0xf8c <kilo_init+0x7e>
    adc_trigger_high_gain();
     f94:	10 92 7c 00 	sts	0x007C, r1
     f98:	83 ea       	ldi	r24, 0xA3	; 163
     f9a:	80 93 7a 00 	sts	0x007A, r24
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    if (osccal != 0xFF)
     fac:	8f 3f       	cpi	r24, 0xFF	; 255
     fae:	11 f0       	breq	.+4      	; 0xfb4 <kilo_init+0xa6>
        OSCCAL = osccal;
     fb0:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     fb4:	10 92 72 01 	sts	0x0172, r1
    rx_leadingbit = 1;
     fb8:	c1 e0       	ldi	r28, 0x01	; 1
     fba:	c0 93 4b 01 	sts	0x014B, r28
    rx_leadingbyte = 1;
     fbe:	c0 93 8f 01 	sts	0x018F, r28
    rx_byteindex = 0;
     fc2:	10 92 69 01 	sts	0x0169, r1
    rx_bytevalue = 0;
     fc6:	10 92 a3 01 	sts	0x01A3, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     fca:	80 e9       	ldi	r24, 0x90	; 144
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
     fd2:	80 93 68 01 	sts	0x0168, r24
    if (tx_mask & ~TX_MASK_MAX)
     fd6:	80 91 68 01 	lds	r24, 0x0168
     fda:	88 73       	andi	r24, 0x38	; 56
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     fde:	c0 93 68 01 	sts	0x0168, r28
    tx_clock = 0;
     fe2:	10 92 93 01 	sts	0x0193, r1
     fe6:	10 92 92 01 	sts	0x0192, r1
    tx_increment = 255;
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 91 01 	sts	0x0191, r25
     ff2:	80 93 90 01 	sts	0x0190, r24
    kilo_ticks = 0;
     ff6:	10 92 6e 01 	sts	0x016E, r1
     ffa:	10 92 6f 01 	sts	0x016F, r1
     ffe:	10 92 70 01 	sts	0x0170, r1
    1002:	10 92 71 01 	sts	0x0171, r1
    kilo_state = IDLE;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 3e 01 	sts	0x013E, r24
    kilo_tx_period = 3906;
    100c:	82 e4       	ldi	r24, 0x42	; 66
    100e:	9f e0       	ldi	r25, 0x0F	; 15
    1010:	90 93 a2 01 	sts	0x01A2, r25
    1014:	80 93 a1 01 	sts	0x01A1, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
    1018:	80 eb       	ldi	r24, 0xB0	; 176
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    1020:	c8 2f       	mov	r28, r24
    1022:	81 eb       	ldi	r24, 0xB1	; 177
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    102a:	2c 2f       	mov	r18, r28
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	38 2b       	or	r19, r24
    1030:	30 93 a5 01 	sts	0x01A5, r19
    1034:	20 93 a4 01 	sts	0x01A4, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
    1038:	85 e0       	ldi	r24, 0x05	; 5
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    1040:	80 93 a8 01 	sts	0x01A8, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    104c:	80 93 94 01 	sts	0x0194, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    1050:	8c e0       	ldi	r24, 0x0C	; 12
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    1058:	80 93 a6 01 	sts	0x01A6, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
    105c:	84 e1       	ldi	r24, 0x14	; 20
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    1064:	80 93 a7 01 	sts	0x01A7, r24
    1068:	53 e7       	ldi	r21, 0x73	; 115
    106a:	e5 2e       	mov	r14, r21
    106c:	51 e0       	ldi	r21, 0x01	; 1
    106e:	f5 2e       	mov	r15, r21
    1070:	0c e4       	ldi	r16, 0x4C	; 76
    1072:	11 e0       	ldi	r17, 0x01	; 1
    1074:	c0 e2       	ldi	r28, 0x20	; 32
    1076:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
    1078:	ce 01       	movw	r24, r28
    107a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    107e:	d8 2e       	mov	r13, r24
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    1088:	2d 2d       	mov	r18, r13
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	32 2f       	mov	r19, r18
    108e:	22 27       	eor	r18, r18
    1090:	28 2b       	or	r18, r24
    1092:	f7 01       	movw	r30, r14
    1094:	21 93       	st	Z+, r18
    1096:	31 93       	st	Z+, r19
    1098:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    109a:	ce 01       	movw	r24, r28
    109c:	c0 96       	adiw	r24, 0x30	; 48
    109e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    10a2:	d8 2e       	mov	r13, r24
    10a4:	ce 01       	movw	r24, r28
    10a6:	c1 96       	adiw	r24, 0x31	; 49
    10a8:	0e 94 6f 16 	call	0x2cde	; 0x2cde <eeprom_read_byte>
    10ac:	2d 2d       	mov	r18, r13
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	32 2f       	mov	r19, r18
    10b2:	22 27       	eor	r18, r18
    10b4:	28 2b       	or	r18, r24
    10b6:	f8 01       	movw	r30, r16
    10b8:	21 93       	st	Z+, r18
    10ba:	31 93       	st	Z+, r19
    10bc:	8f 01       	movw	r16, r30
    10be:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
    10c0:	cc 33       	cpi	r28, 0x3C	; 60
    10c2:	d1 05       	cpc	r29, r1
    10c4:	c9 f6       	brne	.-78     	; 0x1078 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
    10c6:	78 94       	sei
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	df 90       	pop	r13
    10d6:	08 95       	ret

000010d8 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
    10d8:	1f 92       	push	r1
    10da:	0f 92       	push	r0
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	0f 92       	push	r0
    10e0:	11 24       	eor	r1, r1
    10e2:	8f 93       	push	r24
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	a8 95       	wdr
    10ea:	80 91 60 00 	lds	r24, 0x0060
    10ee:	88 61       	ori	r24, 0x18	; 24
    10f0:	80 93 60 00 	sts	0x0060, r24
    10f4:	10 92 60 00 	sts	0x0060, r1
    10f8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
    10fa:	8f 91       	pop	r24
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    1106:	3c 01       	movw	r6, r24
    1108:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
    110a:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
    110c:	99 24       	eor	r9, r9
    110e:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
    1114:	96 e0       	ldi	r25, 0x06	; 6
    1116:	a9 2e       	mov	r10, r25
    1118:	23 e8       	ldi	r18, 0x83	; 131
    111a:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    111c:	38 e1       	ldi	r19, 0x18	; 24
    111e:	d3 2e       	mov	r13, r19
    1120:	49 e2       	ldi	r20, 0x29	; 41
    1122:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
    1124:	90 91 3e 01 	lds	r25, 0x013E
    1128:	e9 2f       	mov	r30, r25
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	e7 30       	cpi	r30, 0x07	; 7
    112e:	f1 05       	cpc	r31, r1
    1130:	c8 f7       	brcc	.-14     	; 0x1124 <kilo_start+0x1e>
    1132:	ec 5c       	subi	r30, 0xCC	; 204
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	0c 94 27 11 	jmp	0x224e	; 0x224e <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
    113a:	11 23       	and	r17, r17
    113c:	09 f4       	brne	.+2      	; 0x1140 <kilo_start+0x3a>
    113e:	fc c0       	rjmp	.+504    	; 0x1338 <kilo_start+0x232>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1140:	c0 92 3e 01 	sts	0x013E, r12
    1144:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
    1146:	fe 01       	movw	r30, r28
    1148:	09 95       	icall
                break;
    114a:	ec cf       	rjmp	.-40     	; 0x1124 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    114c:	80 91 72 01 	lds	r24, 0x0172
    1150:	81 11       	cpse	r24, r1
    1152:	eb c0       	rjmp	.+470    	; 0x132a <kilo_start+0x224>
        cli();                                    // disable interrupts
    1154:	f8 94       	cli
        adc_setup_conversion(6);
    1156:	a0 92 7c 00 	sts	0x007C, r10
    115a:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
    115e:	80 91 7a 00 	lds	r24, 0x007A
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1168:	90 91 7a 00 	lds	r25, 0x007A
    116c:	96 fd       	sbrc	r25, 6
    116e:	fc cf       	rjmp	.-8      	; 0x1168 <kilo_start+0x62>
        voltage = ADCW;                           // store AD result
    1170:	80 91 78 00 	lds	r24, 0x0078
    1174:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    1178:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
    117a:	8b 3a       	cpi	r24, 0xAB	; 171
    117c:	e2 e0       	ldi	r30, 0x02	; 2
    117e:	9e 07       	cpc	r25, r30
    1180:	0c f0       	brlt	.+2      	; 0x1184 <kilo_start+0x7e>
    1182:	ed c0       	rjmp	.+474    	; 0x135e <kilo_start+0x258>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
    1184:	89 38       	cpi	r24, 0x89	; 137
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	9f 07       	cpc	r25, r31
    118a:	0c f0       	brlt	.+2      	; 0x118e <kilo_start+0x88>
    118c:	ef c0       	rjmp	.+478    	; 0x136c <kilo_start+0x266>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
    118e:	87 36       	cpi	r24, 0x67	; 103
    1190:	92 40       	sbci	r25, 0x02	; 2
    1192:	0c f4       	brge	.+2      	; 0x1196 <kilo_start+0x90>
    1194:	ca c0       	rjmp	.+404    	; 0x132a <kilo_start+0x224>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1196:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1198:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    119a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    119c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    119e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    11a0:	3c 98       	cbi	0x07, 4	; 7
    11a2:	c0 cf       	rjmp	.-128    	; 0x1124 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
    11a4:	f8 94       	cli
                acomp_off();
    11a6:	80 b7       	in	r24, 0x30	; 48
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	80 bf       	out	0x30, r24	; 48
                adc_off();
    11ac:	80 91 7a 00 	lds	r24, 0x007A
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
    11b6:	14 b8       	out	0x04, r1	; 4
    11b8:	17 b8       	out	0x07, r1	; 7
    11ba:	1a b8       	out	0x0a, r1	; 10
    11bc:	15 b8       	out	0x05, r1	; 5
    11be:	18 b8       	out	0x08, r1	; 8
    11c0:	1b b8       	out	0x0b, r1	; 11
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	a8 95       	wdr
    11c8:	d0 92 60 00 	sts	0x0060, r13
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	e0 92 60 00 	sts	0x0060, r14
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
    11d2:	80 91 60 00 	lds	r24, 0x0060
    11d6:	80 64       	ori	r24, 0x40	; 64
    11d8:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    11dc:	93 b7       	in	r25, 0x33	; 51
    11de:	91 7f       	andi	r25, 0xF1	; 241
    11e0:	94 60       	ori	r25, 0x04	; 4
    11e2:	93 bf       	out	0x33, r25	; 51
                cli();
    11e4:	f8 94       	cli
                sleep_enable();
    11e6:	83 b7       	in	r24, 0x33	; 51
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	83 bf       	out	0x33, r24	; 51
                sei();
    11ec:	78 94       	sei
                sleep_cpu();
    11ee:	88 95       	sleep
                sleep_disable();
    11f0:	83 b7       	in	r24, 0x33	; 51
    11f2:	8e 7f       	andi	r24, 0xFE	; 254
    11f4:	83 bf       	out	0x33, r24	; 51
                sei();
    11f6:	78 94       	sei
                rx_busy = 0;
    11f8:	10 92 72 01 	sts	0x0172, r1
                ports_on();
    11fc:	52 9a       	sbi	0x0a, 2	; 10
    11fe:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
    1200:	80 91 7a 00 	lds	r24, 0x007A
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    120a:	87 e5       	ldi	r24, 0x57	; 87
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <kilo_start+0x108>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <kilo_start+0x10e>
    1214:	00 00       	nop
                _delay_us(300);
                acomp_on();
    1216:	80 b7       	in	r24, 0x30	; 48
    1218:	88 61       	ori	r24, 0x18	; 24
    121a:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    121c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    121e:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1220:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    1222:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    1224:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    1226:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1228:	ef e1       	ldi	r30, 0x1F	; 31
    122a:	fe e4       	ldi	r31, 0x4E	; 78
    122c:	31 97       	sbiw	r30, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <kilo_start+0x126>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <kilo_start+0x12c>
    1232:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
    1234:	80 91 72 01 	lds	r24, 0x0172
    1238:	81 11       	cpse	r24, r1
    123a:	81 c0       	rjmp	.+258    	; 0x133e <kilo_start+0x238>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    123c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    123e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1240:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1242:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1244:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1246:	3c 98       	cbi	0x07, 4	; 7
    1248:	6d cf       	rjmp	.-294    	; 0x1124 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
    124a:	80 91 3c 01 	lds	r24, 0x013C
    124e:	81 11       	cpse	r24, r1
    1250:	41 c0       	rjmp	.+130    	; 0x12d4 <kilo_start+0x1ce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1252:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    1256:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
    125a:	10 92 3d 01 	sts	0x013D, r1
    125e:	62 cf       	rjmp	.-316    	; 0x1124 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
    1260:	48 99       	sbic	0x09, 0	; 9
    1262:	ec cf       	rjmp	.-40     	; 0x123c <kilo_start+0x136>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    1264:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1266:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1268:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    126a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    126c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    126e:	3c 98       	cbi	0x07, 4	; 7
    1270:	8f ec       	ldi	r24, 0xCF	; 207
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <kilo_start+0x16e>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <kilo_start+0x174>
    127a:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    127c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    127e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1280:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1282:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1284:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1286:	3c 98       	cbi	0x07, 4	; 7
    1288:	9f ef       	ldi	r25, 0xFF	; 255
    128a:	e1 ee       	ldi	r30, 0xE1	; 225
    128c:	f4 e0       	ldi	r31, 0x04	; 4
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	e0 40       	sbci	r30, 0x00	; 0
    1292:	f0 40       	sbci	r31, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <kilo_start+0x188>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <kilo_start+0x192>
    1298:	00 00       	nop
    129a:	44 cf       	rjmp	.-376    	; 0x1124 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    129c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    129e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    12a0:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    12a2:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    12a4:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    12a6:	3c 98       	cbi	0x07, 4	; 7
    12a8:	ef ec       	ldi	r30, 0xCF	; 207
    12aa:	f7 e0       	ldi	r31, 0x07	; 7
    12ac:	31 97       	sbiw	r30, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <kilo_start+0x1a6>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <kilo_start+0x1ac>
    12b2:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    12b4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    12b6:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    12b8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    12ba:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    12bc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    12be:	3c 98       	cbi	0x07, 4	; 7
    12c0:	ff ef       	ldi	r31, 0xFF	; 255
    12c2:	21 ee       	ldi	r18, 0xE1	; 225
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	f1 50       	subi	r31, 0x01	; 1
    12c8:	20 40       	sbci	r18, 0x00	; 0
    12ca:	80 40       	sbci	r24, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <kilo_start+0x1c0>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <kilo_start+0x1ca>
    12d0:	00 00       	nop
    12d2:	28 cf       	rjmp	.-432    	; 0x1124 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
    12d4:	90 91 3c 01 	lds	r25, 0x013C
    12d8:	80 91 3d 01 	lds	r24, 0x013D
    12dc:	98 17       	cp	r25, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <kilo_start+0x1dc>
    12e0:	21 cf       	rjmp	.-446    	; 0x1124 <kilo_start+0x1e>
                        prev_motion = cur_motion;
    12e2:	80 91 3c 01 	lds	r24, 0x013C
    12e6:	80 93 3d 01 	sts	0x013D, r24
                        if (cur_motion == MOVE_LEFT) {
    12ea:	80 91 3c 01 	lds	r24, 0x013C
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <kilo_start+0x1ee>
    12f2:	50 c0       	rjmp	.+160    	; 0x1394 <kilo_start+0x28e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    12f4:	80 91 3c 01 	lds	r24, 0x013C
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    12f8:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    12fc:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	d9 f1       	breq	.+118    	; 0x137a <kilo_start+0x274>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1304:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
    1308:	90 92 b4 00 	sts	0x00B4, r9
    130c:	8f e2       	ldi	r24, 0x2F	; 47
    130e:	95 e7       	ldi	r25, 0x75	; 117
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <kilo_start+0x20a>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <kilo_start+0x210>
    1316:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    1318:	80 91 a7 01 	lds	r24, 0x01A7
    131c:	90 91 a6 01 	lds	r25, 0x01A6
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1320:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
    1324:	80 93 b4 00 	sts	0x00B4, r24
    1328:	fd ce       	rjmp	.-518    	; 0x1124 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    132a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    132c:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    132e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1330:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1332:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1334:	3c 98       	cbi	0x07, 4	; 7
    1336:	f6 ce       	rjmp	.-532    	; 0x1124 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
    1338:	f3 01       	movw	r30, r6
    133a:	09 95       	icall
    133c:	01 cf       	rjmp	.-510    	; 0x1140 <kilo_start+0x3a>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    133e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    1340:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1342:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1344:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1346:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1348:	3c 98       	cbi	0x07, 4	; 7
    134a:	ff ef       	ldi	r31, 0xFF	; 255
    134c:	20 e7       	ldi	r18, 0x70	; 112
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	f1 50       	subi	r31, 0x01	; 1
    1352:	20 40       	sbci	r18, 0x00	; 0
    1354:	80 40       	sbci	r24, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <kilo_start+0x24a>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <kilo_start+0x254>
    135a:	00 00       	nop
    135c:	6f cf       	rjmp	.-290    	; 0x123c <kilo_start+0x136>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    135e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1360:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    1362:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    1364:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1366:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1368:	3c 98       	cbi	0x07, 4	; 7
    136a:	dc ce       	rjmp	.-584    	; 0x1124 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    136c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    136e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1370:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1372:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    1374:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    1376:	3c 9a       	sbi	0x07, 4	; 7
    1378:	d5 ce       	rjmp	.-598    	; 0x1124 <kilo_start+0x1e>
    137a:	ef e2       	ldi	r30, 0x2F	; 47
    137c:	f5 e7       	ldi	r31, 0x75	; 117
    137e:	31 97       	sbiw	r30, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <kilo_start+0x278>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <kilo_start+0x27e>
    1384:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    1386:	80 91 94 01 	lds	r24, 0x0194
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    138a:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
    138e:	80 93 b4 00 	sts	0x00B4, r24
    1392:	c8 ce       	rjmp	.-624    	; 0x1124 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1394:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
    1398:	10 92 b4 00 	sts	0x00B4, r1
    139c:	8f e2       	ldi	r24, 0x2F	; 47
    139e:	95 e7       	ldi	r25, 0x75	; 117
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <kilo_start+0x29a>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <kilo_start+0x2a0>
    13a6:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    13a8:	80 91 a8 01 	lds	r24, 0x01A8
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    13ac:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    13b0:	10 92 b4 00 	sts	0x00B4, r1
    13b4:	b7 ce       	rjmp	.-658    	; 0x1124 <kilo_start+0x1e>

000013b6 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <delay+0x10>
    13b8:	ef ec       	ldi	r30, 0xCF	; 207
    13ba:	f7 e0       	ldi	r31, 0x07	; 7
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <delay+0x6>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <delay+0xc>
    13c2:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
    13c4:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	b9 f7       	brne	.-18     	; 0x13b8 <delay+0x2>
    13ca:	08 95       	ret

000013cc <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    13cc:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    13d0:	60 93 b4 00 	sts	0x00B4, r22
    13d4:	08 95       	ret

000013d6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    13d6:	8f ef       	ldi	r24, 0xFF	; 255
    13d8:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
    13dc:	80 93 b4 00 	sts	0x00B4, r24
    13e0:	8f e0       	ldi	r24, 0x0F	; 15
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	ef ec       	ldi	r30, 0xCF	; 207
    13e6:	f7 e0       	ldi	r31, 0x07	; 7
    13e8:	31 97       	sbiw	r30, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <spinup_motors+0x12>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <spinup_motors+0x18>
    13ee:	00 00       	nop
    13f0:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
    13f2:	c1 f7       	brne	.-16     	; 0x13e4 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
    13f4:	08 95       	ret

000013f6 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
    13f6:	80 91 72 01 	lds	r24, 0x0172
    13fa:	81 11       	cpse	r24, r1
    13fc:	1e c0       	rjmp	.+60     	; 0x143a <get_ambientlight+0x44>
        cli();
    13fe:	f8 94       	cli
        adc_setup_conversion(7);
    1400:	87 e0       	ldi	r24, 0x07	; 7
    1402:	80 93 7c 00 	sts	0x007C, r24
    1406:	83 e8       	ldi	r24, 0x83	; 131
    1408:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    140c:	80 91 7a 00 	lds	r24, 0x007A
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1416:	80 91 7a 00 	lds	r24, 0x007A
    141a:	86 fd       	sbrc	r24, 6
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
    141e:	80 91 78 00 	lds	r24, 0x0078
    1422:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1426:	10 92 7c 00 	sts	0x007C, r1
    142a:	23 ea       	ldi	r18, 0xA3	; 163
    142c:	20 93 7a 00 	sts	0x007A, r18
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    1436:	78 94       	sei
    1438:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
    143e:	08 95       	ret

00001440 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
    1440:	80 91 72 01 	lds	r24, 0x0172
    1444:	81 11       	cpse	r24, r1
    1446:	1e c0       	rjmp	.+60     	; 0x1484 <get_temperature+0x44>
        cli();
    1448:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1450:	87 e8       	ldi	r24, 0x87	; 135
    1452:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    1456:	80 91 7a 00 	lds	r24, 0x007A
    145a:	80 64       	ori	r24, 0x40	; 64
    145c:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    1460:	80 91 7a 00 	lds	r24, 0x007A
    1464:	86 fd       	sbrc	r24, 6
    1466:	fc cf       	rjmp	.-8      	; 0x1460 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
    1468:	80 91 78 00 	lds	r24, 0x0078
    146c:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
    1470:	10 92 7c 00 	sts	0x007C, r1
    1474:	23 ea       	ldi	r18, 0xA3	; 163
    1476:	20 93 7a 00 	sts	0x007A, r18
    147a:	21 e0       	ldi	r18, 0x01	; 1
    147c:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
    1480:	78 94       	sei
    1482:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
    1488:	08 95       	ret

0000148a <rand_hard>:

uint8_t rand_hard() {
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	e0 e0       	ldi	r30, 0x00	; 0
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
    1496:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
    1498:	03 ea       	ldi	r16, 0xA3	; 163
    149a:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
    149c:	d6 e0       	ldi	r29, 0x06	; 6
    149e:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    14a0:	a1 e0       	ldi	r26, 0x01	; 1
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
    14a4:	60 e8       	ldi	r22, 0x80	; 128
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
    14a8:	f8 94       	cli
            adc_setup_conversion(6);
    14aa:	d0 93 7c 00 	sts	0x007C, r29
    14ae:	c0 93 7a 00 	sts	0x007A, r28
            adc_start_conversion();
    14b2:	90 91 7a 00 	lds	r25, 0x007A
    14b6:	90 64       	ori	r25, 0x40	; 64
    14b8:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    14bc:	90 91 7a 00 	lds	r25, 0x007A
    14c0:	96 fd       	sbrc	r25, 6
    14c2:	fc cf       	rjmp	.-8      	; 0x14bc <rand_hard+0x32>
            a = ADCW&0x1;
    14c4:	20 91 78 00 	lds	r18, 0x0078
    14c8:	30 91 79 00 	lds	r19, 0x0079
    14cc:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
    14ce:	90 91 7a 00 	lds	r25, 0x007A
    14d2:	90 64       	ori	r25, 0x40	; 64
    14d4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
    14d8:	90 91 7a 00 	lds	r25, 0x007A
    14dc:	96 fd       	sbrc	r25, 6
    14de:	fc cf       	rjmp	.-8      	; 0x14d8 <rand_hard+0x4e>
            b = ADCW&0x1;
    14e0:	40 91 78 00 	lds	r20, 0x0078
    14e4:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
    14e8:	10 92 7c 00 	sts	0x007C, r1
    14ec:	00 93 7a 00 	sts	0x007A, r16
    14f0:	10 93 7b 00 	sts	0x007B, r17
            sei();
    14f4:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
    14f6:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
    14f8:	24 13       	cpse	r18, r20
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <rand_hard+0x78>
    14fc:	61 50       	subi	r22, 0x01	; 1
    14fe:	71 09       	sbc	r23, r1
    1500:	99 f6       	brne	.-90     	; 0x14a8 <rand_hard+0x1e>
        if (a)
    1502:	22 23       	and	r18, r18
    1504:	39 f0       	breq	.+14     	; 0x1514 <rand_hard+0x8a>
            num |= (1<<i);
    1506:	9d 01       	movw	r18, r26
    1508:	0e 2e       	mov	r0, r30
    150a:	01 c0       	rjmp	.+2      	; 0x150e <rand_hard+0x84>
    150c:	22 0f       	add	r18, r18
    150e:	0a 94       	dec	r0
    1510:	ea f7       	brpl	.-6      	; 0x150c <rand_hard+0x82>
    1512:	82 2b       	or	r24, r18
    1514:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
    1516:	e8 30       	cpi	r30, 0x08	; 8
    1518:	f1 05       	cpc	r31, r1
    151a:	09 f0       	breq	.+2      	; 0x151e <rand_hard+0x94>
    151c:	c3 cf       	rjmp	.-122    	; 0x14a4 <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    1528:	80 91 00 01 	lds	r24, 0x0100
    152c:	98 2f       	mov	r25, r24
    152e:	99 0f       	add	r25, r25
    1530:	99 0f       	add	r25, r25
    1532:	99 0f       	add	r25, r25
    1534:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
    1536:	90 91 3b 01 	lds	r25, 0x013B
    153a:	21 e0       	ldi	r18, 0x01	; 1
    153c:	29 0f       	add	r18, r25
    153e:	20 93 3b 01 	sts	0x013B, r18

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
    1542:	28 2f       	mov	r18, r24
    1544:	22 95       	swap	r18
    1546:	26 95       	lsr	r18
    1548:	27 70       	andi	r18, 0x07	; 7
    154a:	82 27       	eor	r24, r18
    seed ^= accumulator++>>2;
    154c:	96 95       	lsr	r25
    154e:	96 95       	lsr	r25
    1550:	89 27       	eor	r24, r25
    1552:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
    1556:	08 95       	ret

00001558 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
    1558:	80 93 00 01 	sts	0x0100, r24
    155c:	08 95       	ret

0000155e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
    155e:	80 91 72 01 	lds	r24, 0x0172
    1562:	81 11       	cpse	r24, r1
    1564:	16 c0       	rjmp	.+44     	; 0x1592 <get_voltage+0x34>
        cli();                                    // disable interrupts
    1566:	f8 94       	cli
        adc_setup_conversion(6);
    1568:	86 e0       	ldi	r24, 0x06	; 6
    156a:	80 93 7c 00 	sts	0x007C, r24
    156e:	83 e8       	ldi	r24, 0x83	; 131
    1570:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
    1574:	80 91 7a 00 	lds	r24, 0x007A
    1578:	80 64       	ori	r24, 0x40	; 64
    157a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
    157e:	80 91 7a 00 	lds	r24, 0x007A
    1582:	86 fd       	sbrc	r24, 6
    1584:	fc cf       	rjmp	.-8      	; 0x157e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
    1586:	80 91 78 00 	lds	r24, 0x0078
    158a:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    158e:	78 94       	sei
    1590:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
    1596:	08 95       	ret

00001598 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
    1598:	2f 92       	push	r2
    159a:	3f 92       	push	r3
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	00 d0       	rcall	.+0      	; 0x15be <estimate_distance+0x26>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <estimate_distance+0x28>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <estimate_distance+0x2a>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
    15c8:	dc 01       	movw	r26, r24
    15ca:	12 96       	adiw	r26, 0x02	; 2
    15cc:	0d 90       	ld	r0, X+
    15ce:	bc 91       	ld	r27, X
    15d0:	a0 2d       	mov	r26, r0
    15d2:	be 83       	std	Y+6, r27	; 0x06
    15d4:	ad 83       	std	Y+5, r26	; 0x05
    15d6:	a4 38       	cpi	r26, 0x84	; 132
    15d8:	e3 e0       	ldi	r30, 0x03	; 3
    15da:	be 07       	cpc	r27, r30
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <estimate_distance+0x48>
    15de:	c9 c0       	rjmp	.+402    	; 0x1772 <estimate_distance+0x1da>
        if (dist->high_gain > kilo_irhigh[0]) {
    15e0:	80 91 4c 01 	lds	r24, 0x014C
    15e4:	90 91 4d 01 	lds	r25, 0x014D
    15e8:	8a 17       	cp	r24, r26
    15ea:	9b 07       	cpc	r25, r27
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <estimate_distance+0x58>
    15ee:	37 c1       	rjmp	.+622    	; 0x185e <estimate_distance+0x2c6>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    15f0:	00 91 4e 01 	lds	r16, 0x014E
    15f4:	10 91 4f 01 	lds	r17, 0x014F
    15f8:	0a 17       	cp	r16, r26
    15fa:	1b 07       	cpc	r17, r27
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <estimate_distance+0x68>
    15fe:	2f c2       	rjmp	.+1118   	; 0x1a5e <estimate_distance+0x4c6>
    1600:	00 91 50 01 	lds	r16, 0x0150
    1604:	10 91 51 01 	lds	r17, 0x0151
    1608:	0a 17       	cp	r16, r26
    160a:	1b 07       	cpc	r17, r27
    160c:	08 f4       	brcc	.+2      	; 0x1610 <estimate_distance+0x78>
    160e:	2f c2       	rjmp	.+1118   	; 0x1a6e <estimate_distance+0x4d6>
    1610:	00 91 52 01 	lds	r16, 0x0152
    1614:	10 91 53 01 	lds	r17, 0x0153
    1618:	0a 17       	cp	r16, r26
    161a:	1b 07       	cpc	r17, r27
    161c:	08 f4       	brcc	.+2      	; 0x1620 <estimate_distance+0x88>
    161e:	2f c2       	rjmp	.+1118   	; 0x1a7e <estimate_distance+0x4e6>
    1620:	00 91 54 01 	lds	r16, 0x0154
    1624:	10 91 55 01 	lds	r17, 0x0155
    1628:	0a 17       	cp	r16, r26
    162a:	1b 07       	cpc	r17, r27
    162c:	08 f4       	brcc	.+2      	; 0x1630 <estimate_distance+0x98>
    162e:	2f c2       	rjmp	.+1118   	; 0x1a8e <estimate_distance+0x4f6>
    1630:	00 91 56 01 	lds	r16, 0x0156
    1634:	10 91 57 01 	lds	r17, 0x0157
    1638:	0a 17       	cp	r16, r26
    163a:	1b 07       	cpc	r17, r27
    163c:	08 f4       	brcc	.+2      	; 0x1640 <estimate_distance+0xa8>
    163e:	ef c1       	rjmp	.+990    	; 0x1a1e <estimate_distance+0x486>
    1640:	00 91 58 01 	lds	r16, 0x0158
    1644:	10 91 59 01 	lds	r17, 0x0159
    1648:	0a 17       	cp	r16, r26
    164a:	1b 07       	cpc	r17, r27
    164c:	08 f4       	brcc	.+2      	; 0x1650 <estimate_distance+0xb8>
    164e:	27 c2       	rjmp	.+1102   	; 0x1a9e <estimate_distance+0x506>
    1650:	00 91 5a 01 	lds	r16, 0x015A
    1654:	10 91 5b 01 	lds	r17, 0x015B
    1658:	0a 17       	cp	r16, r26
    165a:	1b 07       	cpc	r17, r27
    165c:	08 f4       	brcc	.+2      	; 0x1660 <estimate_distance+0xc8>
    165e:	27 c2       	rjmp	.+1102   	; 0x1aae <estimate_distance+0x516>
    1660:	00 91 5c 01 	lds	r16, 0x015C
    1664:	10 91 5d 01 	lds	r17, 0x015D
    1668:	0a 17       	cp	r16, r26
    166a:	1b 07       	cpc	r17, r27
    166c:	08 f4       	brcc	.+2      	; 0x1670 <estimate_distance+0xd8>
    166e:	27 c2       	rjmp	.+1102   	; 0x1abe <estimate_distance+0x526>
    1670:	00 91 5e 01 	lds	r16, 0x015E
    1674:	10 91 5f 01 	lds	r17, 0x015F
    1678:	0a 17       	cp	r16, r26
    167a:	1b 07       	cpc	r17, r27
    167c:	08 f4       	brcc	.+2      	; 0x1680 <estimate_distance+0xe8>
    167e:	27 c2       	rjmp	.+1102   	; 0x1ace <estimate_distance+0x536>
    1680:	00 91 60 01 	lds	r16, 0x0160
    1684:	10 91 61 01 	lds	r17, 0x0161
    1688:	0a 17       	cp	r16, r26
    168a:	1b 07       	cpc	r17, r27
    168c:	08 f4       	brcc	.+2      	; 0x1690 <estimate_distance+0xf8>
    168e:	27 c2       	rjmp	.+1102   	; 0x1ade <estimate_distance+0x546>
    1690:	00 91 62 01 	lds	r16, 0x0162
    1694:	10 91 63 01 	lds	r17, 0x0163
    1698:	0a 17       	cp	r16, r26
    169a:	1b 07       	cpc	r17, r27
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <estimate_distance+0x108>
    169e:	23 c2       	rjmp	.+1094   	; 0x1ae6 <estimate_distance+0x54e>
    16a0:	00 91 64 01 	lds	r16, 0x0164
    16a4:	10 91 65 01 	lds	r17, 0x0165
    16a8:	0a 17       	cp	r16, r26
    16aa:	1b 07       	cpc	r17, r27
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <estimate_distance+0x118>
    16ae:	23 c2       	rjmp	.+1094   	; 0x1af6 <estimate_distance+0x55e>
    16b0:	00 91 66 01 	lds	r16, 0x0166
    16b4:	10 91 67 01 	lds	r17, 0x0167
    16b8:	0a 17       	cp	r16, r26
    16ba:	1b 07       	cpc	r17, r27
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <estimate_distance+0x128>
    16be:	23 c2       	rjmp	.+1094   	; 0x1b06 <estimate_distance+0x56e>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 ed       	ldi	r26, 0xD0	; 208
    16c6:	b0 e4       	ldi	r27, 0x40	; 64
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	ab 83       	std	Y+3, r26	; 0x03
    16ce:	bc 83       	std	Y+4, r27	; 0x04
    16d0:	4c e0       	ldi	r20, 0x0C	; 12
    16d2:	e4 2e       	mov	r14, r20
    16d4:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
    16d6:	f7 01       	movw	r30, r14
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	e4 5b       	subi	r30, 0xB4	; 180
    16de:	fe 4f       	sbci	r31, 0xFE	; 254
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	b8 01       	movw	r22, r16
    16e6:	68 1b       	sub	r22, r24
    16e8:	79 0b       	sbc	r23, r25
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    16fa:	6b 01       	movw	r12, r22
    16fc:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    16fe:	ad 81       	ldd	r26, Y+5	; 0x05
    1700:	be 81       	ldd	r27, Y+6	; 0x06
    1702:	bd 01       	movw	r22, r26
    1704:	bb 0f       	add	r27, r27
    1706:	88 0b       	sbc	r24, r24
    1708:	99 0b       	sbc	r25, r25
    170a:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
    170e:	4b 01       	movw	r8, r22
    1710:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
    1712:	b8 01       	movw	r22, r16
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    171c:	2b 01       	movw	r4, r22
    171e:	3c 01       	movw	r6, r24
    1720:	29 81       	ldd	r18, Y+1	; 0x01
    1722:	3a 81       	ldd	r19, Y+2	; 0x02
    1724:	4b 81       	ldd	r20, Y+3	; 0x03
    1726:	5c 81       	ldd	r21, Y+4	; 0x04
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c3 01       	movw	r24, r6
    1736:	b2 01       	movw	r22, r4
    1738:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
    1740:	c5 01       	movw	r24, r10
    1742:	b4 01       	movw	r22, r8
    1744:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
            b=((int)((int)b/(int)slope));
    1754:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
    1758:	8b 01       	movw	r16, r22
    175a:	c7 01       	movw	r24, r14
    175c:	b6 01       	movw	r22, r12
    175e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
    1762:	ab 01       	movw	r20, r22
    1764:	bc 01       	movw	r22, r24
    1766:	c8 01       	movw	r24, r16
    1768:	ba 01       	movw	r22, r20
    176a:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
            dist_high=b;
    176e:	16 2f       	mov	r17, r22
    1770:	77 c0       	rjmp	.+238    	; 0x1860 <estimate_distance+0x2c8>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    1772:	dc 01       	movw	r26, r24
    1774:	cd 90       	ld	r12, X+
    1776:	dc 90       	ld	r13, X
    1778:	80 91 73 01 	lds	r24, 0x0173
    177c:	90 91 74 01 	lds	r25, 0x0174
    1780:	8c 15       	cp	r24, r12
    1782:	9d 05       	cpc	r25, r13
    1784:	08 f4       	brcc	.+2      	; 0x1788 <estimate_distance+0x1f0>
    1786:	8c c0       	rjmp	.+280    	; 0x18a0 <estimate_distance+0x308>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    1788:	1f ef       	ldi	r17, 0xFF	; 255
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    178a:	e0 90 75 01 	lds	r14, 0x0175
    178e:	f0 90 76 01 	lds	r15, 0x0176
    1792:	ec 14       	cp	r14, r12
    1794:	fd 04       	cpc	r15, r13
    1796:	08 f4       	brcc	.+2      	; 0x179a <estimate_distance+0x202>
    1798:	5e c1       	rjmp	.+700    	; 0x1a56 <estimate_distance+0x4be>
    179a:	e0 90 77 01 	lds	r14, 0x0177
    179e:	f0 90 78 01 	lds	r15, 0x0178
    17a2:	ec 14       	cp	r14, r12
    17a4:	fd 04       	cpc	r15, r13
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <estimate_distance+0x212>
    17a8:	5e c1       	rjmp	.+700    	; 0x1a66 <estimate_distance+0x4ce>
    17aa:	e0 90 79 01 	lds	r14, 0x0179
    17ae:	f0 90 7a 01 	lds	r15, 0x017A
    17b2:	ec 14       	cp	r14, r12
    17b4:	fd 04       	cpc	r15, r13
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <estimate_distance+0x222>
    17b8:	5e c1       	rjmp	.+700    	; 0x1a76 <estimate_distance+0x4de>
    17ba:	e0 90 7b 01 	lds	r14, 0x017B
    17be:	f0 90 7c 01 	lds	r15, 0x017C
    17c2:	ec 14       	cp	r14, r12
    17c4:	fd 04       	cpc	r15, r13
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <estimate_distance+0x232>
    17c8:	5e c1       	rjmp	.+700    	; 0x1a86 <estimate_distance+0x4ee>
    17ca:	e0 90 7d 01 	lds	r14, 0x017D
    17ce:	f0 90 7e 01 	lds	r15, 0x017E
    17d2:	ec 14       	cp	r14, r12
    17d4:	fd 04       	cpc	r15, r13
    17d6:	08 f4       	brcc	.+2      	; 0x17da <estimate_distance+0x242>
    17d8:	c3 c0       	rjmp	.+390    	; 0x1960 <estimate_distance+0x3c8>
    17da:	e0 90 7f 01 	lds	r14, 0x017F
    17de:	f0 90 80 01 	lds	r15, 0x0180
    17e2:	ec 14       	cp	r14, r12
    17e4:	fd 04       	cpc	r15, r13
    17e6:	08 f4       	brcc	.+2      	; 0x17ea <estimate_distance+0x252>
    17e8:	56 c1       	rjmp	.+684    	; 0x1a96 <estimate_distance+0x4fe>
    17ea:	e0 90 81 01 	lds	r14, 0x0181
    17ee:	f0 90 82 01 	lds	r15, 0x0182
    17f2:	ec 14       	cp	r14, r12
    17f4:	fd 04       	cpc	r15, r13
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <estimate_distance+0x262>
    17f8:	56 c1       	rjmp	.+684    	; 0x1aa6 <estimate_distance+0x50e>
    17fa:	e0 90 83 01 	lds	r14, 0x0183
    17fe:	f0 90 84 01 	lds	r15, 0x0184
    1802:	ec 14       	cp	r14, r12
    1804:	fd 04       	cpc	r15, r13
    1806:	08 f4       	brcc	.+2      	; 0x180a <estimate_distance+0x272>
    1808:	56 c1       	rjmp	.+684    	; 0x1ab6 <estimate_distance+0x51e>
    180a:	e0 90 85 01 	lds	r14, 0x0185
    180e:	f0 90 86 01 	lds	r15, 0x0186
    1812:	ec 14       	cp	r14, r12
    1814:	fd 04       	cpc	r15, r13
    1816:	08 f4       	brcc	.+2      	; 0x181a <estimate_distance+0x282>
    1818:	56 c1       	rjmp	.+684    	; 0x1ac6 <estimate_distance+0x52e>
    181a:	e0 90 87 01 	lds	r14, 0x0187
    181e:	f0 90 88 01 	lds	r15, 0x0188
    1822:	ec 14       	cp	r14, r12
    1824:	fd 04       	cpc	r15, r13
    1826:	08 f4       	brcc	.+2      	; 0x182a <estimate_distance+0x292>
    1828:	56 c1       	rjmp	.+684    	; 0x1ad6 <estimate_distance+0x53e>
    182a:	e0 90 89 01 	lds	r14, 0x0189
    182e:	f0 90 8a 01 	lds	r15, 0x018A
    1832:	ec 14       	cp	r14, r12
    1834:	fd 04       	cpc	r15, r13
    1836:	08 f4       	brcc	.+2      	; 0x183a <estimate_distance+0x2a2>
    1838:	5a c1       	rjmp	.+692    	; 0x1aee <estimate_distance+0x556>
    183a:	e0 90 8b 01 	lds	r14, 0x018B
    183e:	f0 90 8c 01 	lds	r15, 0x018C
    1842:	ec 14       	cp	r14, r12
    1844:	fd 04       	cpc	r15, r13
    1846:	08 f4       	brcc	.+2      	; 0x184a <estimate_distance+0x2b2>
    1848:	5a c1       	rjmp	.+692    	; 0x1afe <estimate_distance+0x566>
    184a:	e0 90 8d 01 	lds	r14, 0x018D
    184e:	f0 90 8e 01 	lds	r15, 0x018E
    1852:	ec 14       	cp	r14, r12
    1854:	fd 04       	cpc	r15, r13
    1856:	08 f4       	brcc	.+2      	; 0x185a <estimate_distance+0x2c2>
    1858:	5a c1       	rjmp	.+692    	; 0x1b0e <estimate_distance+0x576>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
    185a:	0a e5       	ldi	r16, 0x5A	; 90
    185c:	31 c0       	rjmp	.+98     	; 0x18c0 <estimate_distance+0x328>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
    185e:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
    1860:	ed 81       	ldd	r30, Y+5	; 0x05
    1862:	fe 81       	ldd	r31, Y+6	; 0x06
    1864:	ed 3b       	cpi	r30, 0xBD	; 189
    1866:	f2 40       	sbci	r31, 0x02	; 2
    1868:	fc f4       	brge	.+62     	; 0x18a8 <estimate_distance+0x310>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    186a:	81 e2       	ldi	r24, 0x21	; 33
    186c:	81 0f       	add	r24, r17
    }
}
    186e:	26 96       	adiw	r28, 0x06	; 6
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	7f 90       	pop	r7
    1894:	6f 90       	pop	r6
    1896:	5f 90       	pop	r5
    1898:	4f 90       	pop	r4
    189a:	3f 90       	pop	r3
    189c:	2f 90       	pop	r2
    189e:	08 95       	ret
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
    18a0:	00 e0       	ldi	r16, 0x00	; 0

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
    18a2:	81 e2       	ldi	r24, 0x21	; 33
    18a4:	80 0f       	add	r24, r16
    18a6:	e3 cf       	rjmp	.-58     	; 0x186e <estimate_distance+0x2d6>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
    18a8:	d1 01       	movw	r26, r2
    18aa:	cd 90       	ld	r12, X+
    18ac:	dc 90       	ld	r13, X
    18ae:	80 91 73 01 	lds	r24, 0x0173
    18b2:	90 91 74 01 	lds	r25, 0x0174
    18b6:	8c 15       	cp	r24, r12
    18b8:	9d 05       	cpc	r25, r13
    18ba:	08 f0       	brcs	.+2      	; 0x18be <estimate_distance+0x326>
    18bc:	66 cf       	rjmp	.-308    	; 0x178a <estimate_distance+0x1f2>
            dist_low=0;
    18be:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
    18c0:	1f 3f       	cpi	r17, 0xFF	; 255
    18c2:	79 f3       	breq	.-34     	; 0x18a2 <estimate_distance+0x30a>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
    18c4:	ed 81       	ldd	r30, Y+5	; 0x05
    18c6:	fe 81       	ldd	r31, Y+6	; 0x06
    18c8:	bf 01       	movw	r22, r30
    18ca:	ff 0f       	add	r31, r31
    18cc:	88 0b       	sbc	r24, r24
    18ce:	99 0b       	sbc	r25, r25
    18d0:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
    18d4:	6b 01       	movw	r12, r22
    18d6:	7c 01       	movw	r14, r24
    18d8:	61 2f       	mov	r22, r17
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    18e4:	4b 01       	movw	r8, r22
    18e6:	5c 01       	movw	r10, r24
    18e8:	a7 01       	movw	r20, r14
    18ea:	96 01       	movw	r18, r12
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	81 e6       	ldi	r24, 0x61	; 97
    18f2:	94 e4       	ldi	r25, 0x44	; 68
    18f4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    18f8:	9b 01       	movw	r18, r22
    18fa:	ac 01       	movw	r20, r24
    18fc:	c5 01       	movw	r24, r10
    18fe:	b4 01       	movw	r22, r8
    1900:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    1904:	4b 01       	movw	r8, r22
    1906:	5c 01       	movw	r10, r24
    1908:	60 2f       	mov	r22, r16
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1914:	2b 01       	movw	r4, r22
    1916:	3c 01       	movw	r6, r24
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4f e2       	ldi	r20, 0x2F	; 47
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	c7 01       	movw	r24, r14
    1922:	b6 01       	movw	r22, r12
    1924:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	c3 01       	movw	r24, r6
    192e:	b2 01       	movw	r22, r4
    1930:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    1934:	9b 01       	movw	r18, r22
    1936:	ac 01       	movw	r20, r24
    1938:	c5 01       	movw	r24, r10
    193a:	b4 01       	movw	r22, r8
    193c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	48 e4       	ldi	r20, 0x48	; 72
    1946:	53 e4       	ldi	r21, 0x43	; 67
    1948:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__divsf3>
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	44 e0       	ldi	r20, 0x04	; 4
    1952:	52 e4       	ldi	r21, 0x42	; 66
    1954:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    1958:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    195c:	86 2f       	mov	r24, r22
    195e:	87 cf       	rjmp	.-242    	; 0x186e <estimate_distance+0x2d6>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1960:	05 e0       	ldi	r16, 0x05	; 5
                if(dist->low_gain > kilo_irlow[i]) {
    1962:	85 e0       	ldi	r24, 0x05	; 5
    1964:	90 e0       	ldi	r25, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	fc 01       	movw	r30, r24
    196c:	ef 58       	subi	r30, 0x8F	; 143
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	b7 01       	movw	r22, r14
    1976:	68 1b       	sub	r22, r24
    1978:	79 0b       	sbc	r23, r25
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1982:	9b 01       	movw	r18, r22
    1984:	ac 01       	movw	r20, r24
    1986:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    198a:	4b 01       	movw	r8, r22
    198c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    198e:	b6 01       	movw	r22, r12
    1990:	dd 0c       	add	r13, r13
    1992:	88 0b       	sbc	r24, r24
    1994:	99 0b       	sbc	r25, r25
    1996:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
    199a:	2b 01       	movw	r4, r22
    199c:	3c 01       	movw	r6, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
    199e:	b7 01       	movw	r22, r14
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	60 2f       	mov	r22, r16
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	a9 01       	movw	r20, r18
    19ca:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    19ce:	a5 01       	movw	r20, r10
    19d0:	94 01       	movw	r18, r8
    19d2:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    19d6:	9b 01       	movw	r18, r22
    19d8:	ac 01       	movw	r20, r24
    19da:	c7 01       	movw	r24, r14
    19dc:	b6 01       	movw	r22, r12
    19de:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
    19e6:	c3 01       	movw	r24, r6
    19e8:	b2 01       	movw	r22, r4
    19ea:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__subsf3>
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
                b=((int)((int)b/(int)slope));
    19fa:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
    19fe:	7b 01       	movw	r14, r22
    1a00:	c5 01       	movw	r24, r10
    1a02:	b4 01       	movw	r22, r8
    1a04:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fixsfsi>
    1a08:	ab 01       	movw	r20, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	ba 01       	movw	r22, r20
    1a10:	0e 94 13 11 	call	0x2226	; 0x2226 <__divmodhi4>
                dist_low=b;
    1a14:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
    1a16:	6f 3f       	cpi	r22, 0xFF	; 255
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <estimate_distance+0x484>
    1a1a:	52 cf       	rjmp	.-348    	; 0x18c0 <estimate_distance+0x328>
    1a1c:	26 cf       	rjmp	.-436    	; 0x186a <estimate_distance+0x2d2>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1a1e:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
    1a20:	85 e0       	ldi	r24, 0x05	; 5
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	7c 01       	movw	r14, r24
    1a26:	f1 e0       	ldi	r31, 0x01	; 1
    1a28:	ef 1a       	sub	r14, r31
    1a2a:	f1 08       	sbc	r15, r1
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 9e 12 	call	0x253c	; 0x253c <__floatunsisf>
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    1a4c:	69 83       	std	Y+1, r22	; 0x01
    1a4e:	7a 83       	std	Y+2, r23	; 0x02
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	9c 83       	std	Y+4, r25	; 0x04
                    index_high = i;
                    break;
    1a54:	40 ce       	rjmp	.-896    	; 0x16d6 <estimate_distance+0x13e>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
    1a56:	01 e0       	ldi	r16, 0x01	; 1
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	84 cf       	rjmp	.-248    	; 0x1966 <estimate_distance+0x3ce>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	df cf       	rjmp	.-66     	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1a66:	02 e0       	ldi	r16, 0x02	; 2
                if(dist->low_gain > kilo_irlow[i]) {
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	7c cf       	rjmp	.-264    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1a6e:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	d7 cf       	rjmp	.-82     	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1a76:	03 e0       	ldi	r16, 0x03	; 3
                if(dist->low_gain > kilo_irlow[i]) {
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	74 cf       	rjmp	.-280    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
    1a80:	83 e0       	ldi	r24, 0x03	; 3
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	cf cf       	rjmp	.-98     	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1a86:	04 e0       	ldi	r16, 0x04	; 4
                if(dist->low_gain > kilo_irlow[i]) {
    1a88:	84 e0       	ldi	r24, 0x04	; 4
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	6c cf       	rjmp	.-296    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1a8e:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
    1a90:	84 e0       	ldi	r24, 0x04	; 4
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	c7 cf       	rjmp	.-114    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1a96:	06 e0       	ldi	r16, 0x06	; 6
                if(dist->low_gain > kilo_irlow[i]) {
    1a98:	86 e0       	ldi	r24, 0x06	; 6
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	64 cf       	rjmp	.-312    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1a9e:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	bf cf       	rjmp	.-130    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1aa6:	07 e0       	ldi	r16, 0x07	; 7
                if(dist->low_gain > kilo_irlow[i]) {
    1aa8:	87 e0       	ldi	r24, 0x07	; 7
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	5c cf       	rjmp	.-328    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1aae:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
    1ab0:	87 e0       	ldi	r24, 0x07	; 7
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	b7 cf       	rjmp	.-146    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1ab6:	08 e0       	ldi	r16, 0x08	; 8
                if(dist->low_gain > kilo_irlow[i]) {
    1ab8:	88 e0       	ldi	r24, 0x08	; 8
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	54 cf       	rjmp	.-344    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1abe:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	af cf       	rjmp	.-162    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1ac6:	09 e0       	ldi	r16, 0x09	; 9
                if(dist->low_gain > kilo_irlow[i]) {
    1ac8:	89 e0       	ldi	r24, 0x09	; 9
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	4c cf       	rjmp	.-360    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1ace:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
    1ad0:	89 e0       	ldi	r24, 0x09	; 9
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a7 cf       	rjmp	.-178    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1ad6:	0a e0       	ldi	r16, 0x0A	; 10
                if(dist->low_gain > kilo_irlow[i]) {
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	44 cf       	rjmp	.-376    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1ade:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9f cf       	rjmp	.-194    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1ae6:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
    1ae8:	8b e0       	ldi	r24, 0x0B	; 11
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9b cf       	rjmp	.-202    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1aee:	0b e0       	ldi	r16, 0x0B	; 11
                if(dist->low_gain > kilo_irlow[i]) {
    1af0:	8b e0       	ldi	r24, 0x0B	; 11
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	38 cf       	rjmp	.-400    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1af6:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
    1af8:	8c e0       	ldi	r24, 0x0C	; 12
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	93 cf       	rjmp	.-218    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1afe:	0c e0       	ldi	r16, 0x0C	; 12
                if(dist->low_gain > kilo_irlow[i]) {
    1b00:	8c e0       	ldi	r24, 0x0C	; 12
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	30 cf       	rjmp	.-416    	; 0x1966 <estimate_distance+0x3ce>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
    1b06:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
    1b08:	8d e0       	ldi	r24, 0x0D	; 13
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	8b cf       	rjmp	.-234    	; 0x1a24 <estimate_distance+0x48c>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
    1b0e:	0d e0       	ldi	r16, 0x0D	; 13
                if(dist->low_gain > kilo_irlow[i]) {
    1b10:	8d e0       	ldi	r24, 0x0D	; 13
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	28 cf       	rjmp	.-432    	; 0x1966 <estimate_distance+0x3ce>

00001b16 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
    1b16:	1f 92       	push	r1
    1b18:	0f 92       	push	r0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	0f 92       	push	r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	2f 93       	push	r18
    1b22:	3f 93       	push	r19
    1b24:	4f 93       	push	r20
    1b26:	5f 93       	push	r21
    1b28:	6f 93       	push	r22
    1b2a:	7f 93       	push	r23
    1b2c:	8f 93       	push	r24
    1b2e:	9f 93       	push	r25
    1b30:	af 93       	push	r26
    1b32:	bf 93       	push	r27
    1b34:	ef 93       	push	r30
    1b36:	ff 93       	push	r31
    tx_clock += tx_increment;
    1b38:	20 91 92 01 	lds	r18, 0x0192
    1b3c:	30 91 93 01 	lds	r19, 0x0193
    1b40:	80 91 90 01 	lds	r24, 0x0190
    1b44:	90 91 91 01 	lds	r25, 0x0191
    1b48:	82 0f       	add	r24, r18
    1b4a:	93 1f       	adc	r25, r19
    1b4c:	90 93 93 01 	sts	0x0193, r25
    1b50:	80 93 92 01 	sts	0x0192, r24
    tx_increment = 0xFF;
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	90 93 91 01 	sts	0x0191, r25
    1b5c:	80 93 90 01 	sts	0x0190, r24
    OCR0A = tx_increment;
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
    1b64:	80 91 6e 01 	lds	r24, 0x016E
    1b68:	90 91 6f 01 	lds	r25, 0x016F
    1b6c:	a0 91 70 01 	lds	r26, 0x0170
    1b70:	b0 91 71 01 	lds	r27, 0x0171
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	a1 1d       	adc	r26, r1
    1b78:	b1 1d       	adc	r27, r1
    1b7a:	80 93 6e 01 	sts	0x016E, r24
    1b7e:	90 93 6f 01 	sts	0x016F, r25
    1b82:	a0 93 70 01 	sts	0x0170, r26
    1b86:	b0 93 71 01 	sts	0x0171, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
    1b8a:	80 91 72 01 	lds	r24, 0x0172
    1b8e:	81 11       	cpse	r24, r1
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <__vector_14+0x9a>
    1b92:	80 91 a1 01 	lds	r24, 0x01A1
    1b96:	90 91 a2 01 	lds	r25, 0x01A2
    1b9a:	20 91 92 01 	lds	r18, 0x0192
    1b9e:	30 91 93 01 	lds	r19, 0x0193
    1ba2:	82 17       	cp	r24, r18
    1ba4:	93 07       	cpc	r25, r19
    1ba6:	20 f4       	brcc	.+8      	; 0x1bb0 <__vector_14+0x9a>
    1ba8:	80 91 3e 01 	lds	r24, 0x013E
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	89 f0       	breq	.+34     	; 0x1bd2 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
    1bb0:	ff 91       	pop	r31
    1bb2:	ef 91       	pop	r30
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
    1bd2:	e0 91 03 01 	lds	r30, 0x0103
    1bd6:	f0 91 04 01 	lds	r31, 0x0104
    1bda:	09 95       	icall
        if (msg) {
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	41 f3       	breq	.-48     	; 0x1bb0 <__vector_14+0x9a>
            if (message_send(msg)) {
    1be0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <message_send>
    1be4:	81 11       	cpse	r24, r1
    1be6:	09 c0       	rjmp	.+18     	; 0x1bfa <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
    1be8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <rand>
    1bec:	99 27       	eor	r25, r25
    1bee:	90 93 91 01 	sts	0x0191, r25
    1bf2:	80 93 90 01 	sts	0x0190, r24
                OCR0A = tx_increment;
    1bf6:	87 bd       	out	0x27, r24	; 39
    1bf8:	db cf       	rjmp	.-74     	; 0x1bb0 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
    1bfa:	e0 91 01 01 	lds	r30, 0x0101
    1bfe:	f0 91 02 01 	lds	r31, 0x0102
    1c02:	09 95       	icall
                tx_clock = 0;
    1c04:	10 92 93 01 	sts	0x0193, r1
    1c08:	10 92 92 01 	sts	0x0192, r1
    1c0c:	d1 cf       	rjmp	.-94     	; 0x1bb0 <__vector_14+0x9a>

00001c0e <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    1c0e:	80 ff       	sbrs	r24, 0
    1c10:	11 c0       	rjmp	.+34     	; 0x1c34 <set_color+0x26>
        DDRD |= (1<<5);
    1c12:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    1c14:	81 ff       	sbrs	r24, 1
    1c16:	11 c0       	rjmp	.+34     	; 0x1c3a <set_color+0x2c>
        DDRD |= (1<<4);
    1c18:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    1c1a:	82 ff       	sbrs	r24, 2
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <set_color+0x32>
        DDRC |= (1<<3);
    1c1e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    1c20:	83 ff       	sbrs	r24, 3
    1c22:	11 c0       	rjmp	.+34     	; 0x1c46 <set_color+0x38>
        DDRC |= (1<<2);
    1c24:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    1c26:	84 ff       	sbrs	r24, 4
    1c28:	11 c0       	rjmp	.+34     	; 0x1c4c <set_color+0x3e>
        DDRC |= (1<<5);
    1c2a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    1c2c:	85 fd       	sbrc	r24, 5
    1c2e:	11 c0       	rjmp	.+34     	; 0x1c52 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1c30:	3c 98       	cbi	0x07, 4	; 7
    1c32:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1c34:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    1c36:	81 fd       	sbrc	r24, 1
    1c38:	ef cf       	rjmp	.-34     	; 0x1c18 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1c3a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    1c3c:	82 fd       	sbrc	r24, 2
    1c3e:	ef cf       	rjmp	.-34     	; 0x1c1e <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1c40:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    1c42:	83 fd       	sbrc	r24, 3
    1c44:	ef cf       	rjmp	.-34     	; 0x1c24 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1c46:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    1c48:	84 fd       	sbrc	r24, 4
    1c4a:	ef cf       	rjmp	.-34     	; 0x1c2a <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1c4c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    1c4e:	85 ff       	sbrs	r24, 5
    1c50:	ef cf       	rjmp	.-34     	; 0x1c30 <set_color+0x22>
        DDRC |= (1<<4);
    1c52:	3c 9a       	sbi	0x07, 4	; 7
    1c54:	08 95       	ret

00001c56 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    rx_timer_off();
    1c64:	10 92 81 00 	sts	0x0081, r1
    1c68:	10 92 85 00 	sts	0x0085, r1
    1c6c:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	80 93 4b 01 	sts	0x014B, r24
    rx_leadingbyte = 1;
    1c76:	80 93 8f 01 	sts	0x018F, r24
    rx_busy = 0;
    1c7a:	10 92 72 01 	sts	0x0172, r1
    adc_trigger_high_gain();
    1c7e:	10 92 7c 00 	sts	0x007C, r1
    1c82:	93 ea       	ldi	r25, 0xA3	; 163
    1c84:	90 93 7a 00 	sts	0x007A, r25
    1c88:	80 93 7b 00 	sts	0x007B, r24
}
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	0f 90       	pop	r0
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	0f 90       	pop	r0
    1c96:	1f 90       	pop	r1
    1c98:	18 95       	reti

00001c9a <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1c9a:	1f 92       	push	r1
    1c9c:	0f 92       	push	r0
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	0f 92       	push	r0
    1ca2:	11 24       	eor	r1, r1
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1cc0:	20 91 84 00 	lds	r18, 0x0084
    1cc4:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	40 93 72 01 	sts	0x0172, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1cce:	80 91 4b 01 	lds	r24, 0x014B
    1cd2:	88 23       	and	r24, r24
    1cd4:	a9 f1       	breq	.+106    	; 0x1d40 <__vector_23+0xa6>
        rx_timer_on();
    1cd6:	10 92 85 00 	sts	0x0085, r1
    1cda:	10 92 84 00 	sts	0x0084, r1
    1cde:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    1ce2:	10 92 a3 01 	sts	0x01A3, r1
        rx_leadingbit = 0;
    1ce6:	10 92 4b 01 	sts	0x014B, r1
        if (rx_leadingbyte) {
    1cea:	80 91 8f 01 	lds	r24, 0x018F
    1cee:	88 23       	and	r24, r24
    1cf0:	a1 f0       	breq	.+40     	; 0x1d1a <__vector_23+0x80>
            adc_finish_conversion();
    1cf2:	80 91 7a 00 	lds	r24, 0x007A
    1cf6:	86 fd       	sbrc	r24, 6
    1cf8:	fc cf       	rjmp	.-8      	; 0x1cf2 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    1cfa:	80 91 78 00 	lds	r24, 0x0078
    1cfe:	90 91 79 00 	lds	r25, 0x0079
    1d02:	90 93 6d 01 	sts	0x016D, r25
    1d06:	80 93 6c 01 	sts	0x016C, r24
            adc_trigger_low_gain();
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	80 93 7c 00 	sts	0x007C, r24
    1d10:	93 ea       	ldi	r25, 0xA3	; 163
    1d12:	90 93 7a 00 	sts	0x007A, r25
    1d16:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
    1d1a:	ff 91       	pop	r31
    1d1c:	ef 91       	pop	r30
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1d40:	c9 01       	movw	r24, r18
    1d42:	87 58       	subi	r24, 0x87	; 135
    1d44:	91 09       	sbc	r25, r1
    1d46:	84 37       	cpi	r24, 0x74	; 116
    1d48:	99 40       	sbci	r25, 0x09	; 9
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <__vector_23+0xb4>
    1d4c:	52 c0       	rjmp	.+164    	; 0x1df2 <__vector_23+0x158>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    1d4e:	26 58       	subi	r18, 0x86	; 134
    1d50:	31 09       	sbc	r19, r1
    1d52:	a4 ef       	ldi	r26, 0xF4	; 244
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	0e 94 2d 11 	call	0x225a	; 0x225a <__umulhisi3>
    1d5a:	aa 27       	eor	r26, r26
    1d5c:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    1d5e:	88 30       	cpi	r24, 0x08	; 8
    1d60:	91 05       	cpc	r25, r1
    1d62:	a1 05       	cpc	r26, r1
    1d64:	b1 05       	cpc	r27, r1
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <__vector_23+0xd0>
    1d68:	7b c0       	rjmp	.+246    	; 0x1e60 <__vector_23+0x1c6>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1d6a:	40 93 4b 01 	sts	0x014B, r20
                if (rx_leadingbyte) {
    1d6e:	80 91 8f 01 	lds	r24, 0x018F
    1d72:	81 11       	cpse	r24, r1
    1d74:	52 c0       	rjmp	.+164    	; 0x1e1a <__vector_23+0x180>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    1d76:	80 91 69 01 	lds	r24, 0x0169
    1d7a:	e8 2f       	mov	r30, r24
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	eb 56       	subi	r30, 0x6B	; 107
    1d80:	fe 4f       	sbci	r31, 0xFE	; 254
    1d82:	90 91 a3 01 	lds	r25, 0x01A3
    1d86:	90 83       	st	Z, r25
                    rx_byteindex++;
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	80 93 69 01 	sts	0x0169, r24
                    if (rx_byteindex == sizeof(message_t)) {
    1d8e:	8c 30       	cpi	r24, 0x0C	; 12
    1d90:	21 f6       	brne	.-120    	; 0x1d1a <__vector_23+0x80>
                        rx_timer_off();
    1d92:	10 92 81 00 	sts	0x0081, r1
    1d96:	10 92 85 00 	sts	0x0085, r1
    1d9a:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1d9e:	40 93 8f 01 	sts	0x018F, r20
                        rx_busy = 0;
    1da2:	10 92 72 01 	sts	0x0172, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    1da6:	c0 91 9f 01 	lds	r28, 0x019F
    1daa:	d0 91 a0 01 	lds	r29, 0x01A0
    1dae:	85 e9       	ldi	r24, 0x95	; 149
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 57 10 	call	0x20ae	; 0x20ae <message_crc>
    1db6:	c8 17       	cp	r28, r24
    1db8:	d9 07       	cpc	r29, r25
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <__vector_23+0x124>
    1dbc:	ae cf       	rjmp	.-164    	; 0x1d1a <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1dbe:	80 91 9e 01 	lds	r24, 0x019E
    1dc2:	87 ff       	sbrs	r24, 7
    1dc4:	61 c0       	rjmp	.+194    	; 0x1e88 <__vector_23+0x1ee>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1dc6:	98 e7       	ldi	r25, 0x78	; 120
    1dc8:	98 0f       	add	r25, r24
    1dca:	93 30       	cpi	r25, 0x03	; 3
    1dcc:	30 f0       	brcs	.+12     	; 0x1dda <__vector_23+0x140>
        motors_off();
    1dce:	53 98       	cbi	0x0a, 3	; 10
    1dd0:	23 98       	cbi	0x04, 3	; 4
    1dd2:	10 92 b4 00 	sts	0x00B4, r1
    1dd6:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	fc 01       	movw	r30, r24
    1dde:	e0 58       	subi	r30, 0x80	; 128
    1de0:	f1 09       	sbc	r31, r1
    1de2:	eb 30       	cpi	r30, 0x0B	; 11
    1de4:	f1 05       	cpc	r31, r1
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <__vector_23+0x150>
    1de8:	98 cf       	rjmp	.-208    	; 0x1d1a <__vector_23+0x80>
    1dea:	e5 5c       	subi	r30, 0xC5	; 197
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	0c 94 27 11 	jmp	0x224e	; 0x224e <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    1df2:	10 92 81 00 	sts	0x0081, r1
    1df6:	10 92 85 00 	sts	0x0085, r1
    1dfa:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    1dfe:	40 93 4b 01 	sts	0x014B, r20
            rx_leadingbyte = 1;
    1e02:	40 93 8f 01 	sts	0x018F, r20
            rx_busy = 0;
    1e06:	10 92 72 01 	sts	0x0172, r1
            adc_trigger_high_gain();
    1e0a:	10 92 7c 00 	sts	0x007C, r1
    1e0e:	83 ea       	ldi	r24, 0xA3	; 163
    1e10:	80 93 7a 00 	sts	0x007A, r24
    1e14:	40 93 7b 00 	sts	0x007B, r20
    1e18:	80 cf       	rjmp	.-256    	; 0x1d1a <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1e1a:	80 91 7a 00 	lds	r24, 0x007A
    1e1e:	86 fd       	sbrc	r24, 6
    1e20:	fc cf       	rjmp	.-8      	; 0x1e1a <__vector_23+0x180>
                    rx_dist.low_gain = ADCW;
    1e22:	80 91 78 00 	lds	r24, 0x0078
    1e26:	90 91 79 00 	lds	r25, 0x0079
    1e2a:	90 93 6b 01 	sts	0x016B, r25
    1e2e:	80 93 6a 01 	sts	0x016A, r24
                    adc_trigger_high_gain();
    1e32:	10 92 7c 00 	sts	0x007C, r1
    1e36:	83 ea       	ldi	r24, 0xA3	; 163
    1e38:	80 93 7a 00 	sts	0x007A, r24
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1e42:	90 91 a3 01 	lds	r25, 0x01A3
    1e46:	99 23       	and	r25, r25
    1e48:	d1 f0       	breq	.+52     	; 0x1e7e <__vector_23+0x1e4>
                        rx_timer_off();
    1e4a:	10 92 81 00 	sts	0x0081, r1
    1e4e:	10 92 85 00 	sts	0x0085, r1
    1e52:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    1e56:	80 93 8f 01 	sts	0x018F, r24
                        rx_busy = 0;
    1e5a:	10 92 72 01 	sts	0x0172, r1
    1e5e:	5d cf       	rjmp	.-326    	; 0x1d1a <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1e60:	21 e0       	ldi	r18, 0x01	; 1
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	f9 01       	movw	r30, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <__vector_23+0x1d2>
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	8a 95       	dec	r24
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <__vector_23+0x1ce>
    1e70:	cf 01       	movw	r24, r30
    1e72:	90 91 a3 01 	lds	r25, 0x01A3
    1e76:	89 2b       	or	r24, r25
    1e78:	80 93 a3 01 	sts	0x01A3, r24
    1e7c:	4e cf       	rjmp	.-356    	; 0x1d1a <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1e7e:	10 92 8f 01 	sts	0x018F, r1
                        rx_byteindex = 0;
    1e82:	10 92 69 01 	sts	0x0169, r1
    1e86:	49 cf       	rjmp	.-366    	; 0x1d1a <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1e88:	e0 91 05 01 	lds	r30, 0x0105
    1e8c:	f0 91 06 01 	lds	r31, 0x0106
    1e90:	6a e6       	ldi	r22, 0x6A	; 106
    1e92:	71 e0       	ldi	r23, 0x01	; 1
    1e94:	85 e9       	ldi	r24, 0x95	; 149
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	09 95       	icall
    1e9a:	3f cf       	rjmp	.-386    	; 0x1d1a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1e9c:	80 91 95 01 	lds	r24, 0x0195
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <__vector_23+0x20c>
    1ea4:	dd c0       	rjmp	.+442    	; 0x2060 <__vector_23+0x3c6>
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <__vector_23+0x210>
    1ea8:	ba c0       	rjmp	.+372    	; 0x201e <__vector_23+0x384>
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <__vector_23+0x216>
    1eae:	c6 c0       	rjmp	.+396    	; 0x203c <__vector_23+0x3a2>
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <__vector_23+0x21c>
    1eb4:	b1 c0       	rjmp	.+354    	; 0x2018 <__vector_23+0x37e>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1eb6:	80 91 3c 01 	lds	r24, 0x013C
    1eba:	90 91 9b 01 	lds	r25, 0x019B
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <__vector_23+0x22a>
    1ec2:	e3 c0       	rjmp	.+454    	; 0x208a <__vector_23+0x3f0>
    1ec4:	80 91 9a 01 	lds	r24, 0x019A
                        prev_motion = MOVE_STOP;
    1ec8:	10 92 3d 01 	sts	0x013D, r1
                        cur_motion = MOVE_STRAIGHT;
    1ecc:	23 e0       	ldi	r18, 0x03	; 3
    1ece:	20 93 3c 01 	sts	0x013C, r18
                        kilo_straight_left = calibmsg->straight_left;
    1ed2:	80 93 a6 01 	sts	0x01A6, r24
                        kilo_straight_right = calibmsg->straight_right;
    1ed6:	90 93 a7 01 	sts	0x01A7, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1eda:	80 91 3e 01 	lds	r24, 0x013E
    1ede:	86 30       	cpi	r24, 0x06	; 6
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <__vector_23+0x24a>
    1ee2:	1b cf       	rjmp	.-458    	; 0x1d1a <__vector_23+0x80>
                motors_on();
    1ee4:	53 9a       	sbi	0x0a, 3	; 10
    1ee6:	23 9a       	sbi	0x04, 3	; 4
    1ee8:	10 92 b4 00 	sts	0x00B4, r1
    1eec:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	80 93 3e 01 	sts	0x013E, r24
    1ef6:	11 cf       	rjmp	.-478    	; 0x1d1a <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1ef8:	80 91 3e 01 	lds	r24, 0x013E
    1efc:	86 30       	cpi	r24, 0x06	; 6
    1efe:	99 f0       	breq	.+38     	; 0x1f26 <__vector_23+0x28c>
                motors_on();
    1f00:	53 9a       	sbi	0x0a, 3	; 10
    1f02:	23 9a       	sbi	0x04, 3	; 4
    1f04:	10 92 b4 00 	sts	0x00B4, r1
    1f08:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1f0c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    1f0e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1f10:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1f12:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1f14:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1f16:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1f18:	10 92 3c 01 	sts	0x013C, r1
    1f1c:	10 92 3d 01 	sts	0x013D, r1
                kilo_state = MOVING;
    1f20:	86 e0       	ldi	r24, 0x06	; 6
    1f22:	80 93 3e 01 	sts	0x013E, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c 01       	movw	r18, r24
    1f2c:	00 90 95 01 	lds	r0, 0x0195
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <__vector_23+0x29c>
    1f32:	22 0f       	add	r18, r18
    1f34:	33 1f       	adc	r19, r19
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <__vector_23+0x298>
    1f3a:	80 91 a4 01 	lds	r24, 0x01A4
    1f3e:	90 91 a5 01 	lds	r25, 0x01A5
    1f42:	82 23       	and	r24, r18
    1f44:	93 23       	and	r25, r19
    1f46:	89 2b       	or	r24, r25
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <__vector_23+0x2b2>
    1f4a:	86 c0       	rjmp	.+268    	; 0x2058 <__vector_23+0x3be>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1f4c:	10 92 3c 01 	sts	0x013C, r1
    1f50:	e4 ce       	rjmp	.-568    	; 0x1d1a <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 3e 01 	sts	0x013E, r24
    1f58:	e0 ce       	rjmp	.-576    	; 0x1d1a <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1f5a:	e0 e0       	ldi	r30, 0x00	; 0
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    1f60:	80 91 6e 00 	lds	r24, 0x006E
    1f64:	8d 7f       	andi	r24, 0xFD	; 253
    1f66:	80 93 6e 00 	sts	0x006E, r24
    1f6a:	16 bc       	out	0x26, r1	; 38
            bootload();
    1f6c:	e0 e0       	ldi	r30, 0x00	; 0
    1f6e:	f0 e7       	ldi	r31, 0x70	; 112
    1f70:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1f72:	10 92 3e 01 	sts	0x013E, r1
    1f76:	d1 ce       	rjmp	.-606    	; 0x1d1a <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	80 93 3e 01 	sts	0x013E, r24
    1f7e:	cd ce       	rjmp	.-614    	; 0x1d1a <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1f80:	85 e0       	ldi	r24, 0x05	; 5
    1f82:	80 93 3e 01 	sts	0x013E, r24
    1f86:	c9 ce       	rjmp	.-622    	; 0x1d1a <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1f88:	80 91 3e 01 	lds	r24, 0x013E
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__vector_23+0x2f8>
    1f90:	c4 ce       	rjmp	.-632    	; 0x1d1a <__vector_23+0x80>
    1f92:	80 91 3e 01 	lds	r24, 0x013E
    1f96:	84 30       	cpi	r24, 0x04	; 4
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <__vector_23+0x302>
    1f9a:	bf ce       	rjmp	.-642    	; 0x1d1a <__vector_23+0x80>
                motors_on();
    1f9c:	53 9a       	sbi	0x0a, 3	; 10
    1f9e:	23 9a       	sbi	0x04, 3	; 4
    1fa0:	10 92 b4 00 	sts	0x00B4, r1
    1fa4:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	80 93 3e 01 	sts	0x013E, r24
    1fae:	b5 ce       	rjmp	.-662    	; 0x1d1a <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1fb0:	80 91 3e 01 	lds	r24, 0x013E
    1fb4:	86 30       	cpi	r24, 0x06	; 6
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <__vector_23+0x320>
    1fb8:	b0 ce       	rjmp	.-672    	; 0x1d1a <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1fba:	60 91 a4 01 	lds	r22, 0x01A4
    1fbe:	80 eb       	ldi	r24, 0xB0	; 176
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1fc6:	60 91 a5 01 	lds	r22, 0x01A5
    1fca:	81 eb       	ldi	r24, 0xB1	; 177
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1fd2:	60 91 a8 01 	lds	r22, 0x01A8
    1fd6:	85 e0       	ldi	r24, 0x05	; 5
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1fde:	60 91 94 01 	lds	r22, 0x0194
    1fe2:	89 e0       	ldi	r24, 0x09	; 9
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1fea:	60 91 a6 01 	lds	r22, 0x01A6
    1fee:	8c e0       	ldi	r24, 0x0C	; 12
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1ff6:	60 91 a7 01 	lds	r22, 0x01A7
    1ffa:	84 e1       	ldi	r24, 0x14	; 20
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 77 16 	call	0x2cee	; 0x2cee <eeprom_write_byte>
                        motors_off();
    2002:	53 98       	cbi	0x0a, 3	; 10
    2004:	23 98       	cbi	0x04, 3	; 4
    2006:	10 92 b4 00 	sts	0x00B4, r1
    200a:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 93 3e 01 	sts	0x013E, r24
    2014:	80 91 95 01 	lds	r24, 0x0195
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    2018:	81 11       	cpse	r24, r1
    201a:	5f cf       	rjmp	.-322    	; 0x1eda <__vector_23+0x240>
    201c:	7e ce       	rjmp	.-772    	; 0x1d1a <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    201e:	88 23       	and	r24, r24
    2020:	39 f2       	breq	.-114    	; 0x1fb0 <__vector_23+0x316>
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__vector_23+0x37e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    2026:	80 91 96 01 	lds	r24, 0x0196
    202a:	90 91 97 01 	lds	r25, 0x0197
    202e:	90 93 a5 01 	sts	0x01A5, r25
    2032:	80 93 a4 01 	sts	0x01A4, r24
                    cur_motion = MOVE_STOP;
    2036:	10 92 3c 01 	sts	0x013C, r1
    203a:	4f cf       	rjmp	.-354    	; 0x1eda <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    203c:	80 91 3c 01 	lds	r24, 0x013C
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	71 f1       	breq	.+92     	; 0x20a0 <__vector_23+0x406>
    2044:	80 91 99 01 	lds	r24, 0x0199
                        prev_motion = MOVE_STOP;
    2048:	10 92 3d 01 	sts	0x013D, r1
                        cur_motion = MOVE_RIGHT;
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	90 93 3c 01 	sts	0x013C, r25
                        kilo_turn_right = calibmsg->turn_right;
    2052:	80 93 94 01 	sts	0x0194, r24
    2056:	41 cf       	rjmp	.-382    	; 0x1eda <__vector_23+0x240>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	80 93 3c 01 	sts	0x013C, r24
    205e:	5d ce       	rjmp	.-838    	; 0x1d1a <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    2060:	80 91 3c 01 	lds	r24, 0x013C
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	51 f0       	breq	.+20     	; 0x207c <__vector_23+0x3e2>
    2068:	80 91 98 01 	lds	r24, 0x0198
                        prev_motion = MOVE_STOP;
    206c:	10 92 3d 01 	sts	0x013D, r1
                        cur_motion = MOVE_LEFT;
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	90 93 3c 01 	sts	0x013C, r25
                        kilo_turn_left = calibmsg->turn_left;
    2076:	80 93 a8 01 	sts	0x01A8, r24
    207a:	2f cf       	rjmp	.-418    	; 0x1eda <__vector_23+0x240>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    207c:	80 91 98 01 	lds	r24, 0x0198
    2080:	90 91 a8 01 	lds	r25, 0x01A8
    2084:	89 13       	cpse	r24, r25
    2086:	f2 cf       	rjmp	.-28     	; 0x206c <__vector_23+0x3d2>
    2088:	28 cf       	rjmp	.-432    	; 0x1eda <__vector_23+0x240>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    208a:	80 91 a7 01 	lds	r24, 0x01A7
    208e:	98 13       	cpse	r25, r24
    2090:	19 cf       	rjmp	.-462    	; 0x1ec4 <__vector_23+0x22a>
    2092:	80 91 9a 01 	lds	r24, 0x019A
    2096:	20 91 a6 01 	lds	r18, 0x01A6
    209a:	82 13       	cpse	r24, r18
    209c:	15 cf       	rjmp	.-470    	; 0x1ec8 <__vector_23+0x22e>
    209e:	1d cf       	rjmp	.-454    	; 0x1eda <__vector_23+0x240>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    20a0:	80 91 99 01 	lds	r24, 0x0199
    20a4:	90 91 94 01 	lds	r25, 0x0194
    20a8:	89 13       	cpse	r24, r25
    20aa:	ce cf       	rjmp	.-100    	; 0x2048 <__vector_23+0x3ae>
    20ac:	16 cf       	rjmp	.-468    	; 0x1eda <__vector_23+0x240>

000020ae <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    20ae:	fc 01       	movw	r30, r24
    20b0:	ac 01       	movw	r20, r24
    20b2:	46 5f       	subi	r20, 0xF6	; 246
    20b4:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    20b6:	8f ef       	ldi	r24, 0xFF	; 255
    20b8:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    20ba:	21 91       	ld	r18, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    20bc:	82 27       	eor	r24, r18
    20be:	08 2e       	mov	r0, r24
    20c0:	82 95       	swap	r24
    20c2:	80 7f       	andi	r24, 0xF0	; 240
    20c4:	80 25       	eor	r24, r0
    20c6:	09 2e       	mov	r0, r25
    20c8:	98 2f       	mov	r25, r24
    20ca:	82 95       	swap	r24
    20cc:	8f 70       	andi	r24, 0x0F	; 15
    20ce:	08 26       	eor	r0, r24
    20d0:	86 95       	lsr	r24
    20d2:	98 27       	eor	r25, r24
    20d4:	89 27       	eor	r24, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	88 0f       	add	r24, r24
    20da:	88 0f       	add	r24, r24
    20dc:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    20de:	e4 17       	cp	r30, r20
    20e0:	f5 07       	cpc	r31, r21
    20e2:	59 f7       	brne	.-42     	; 0x20ba <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    20e4:	08 95       	ret

000020e6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    20e6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    20e8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    20ea:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    20ec:	20 91 68 01 	lds	r18, 0x0168
    or tmpreg1, ddrreg
    20f0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    20f2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    20f4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    20f6:	30 91 68 01 	lds	r19, 0x0168
    20fa:	20 30       	cpi	r18, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <message_send+0x22>
    20fe:	00 00       	nop
    2100:	25 b1       	in	r18, 0x05	; 5
    2102:	23 2b       	or	r18, r19
    2104:	25 b9       	out	0x05, r18	; 5
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <message_send+0x2a>
    2108:	00 00       	nop
    210a:	00 00       	nop
    210c:	00 00       	nop
    210e:	00 c0       	rjmp	.+0      	; 0x2110 <message_send+0x2a>
    2110:	00 00       	nop
    2112:	00 00       	nop
    2114:	00 00       	nop
    2116:	30 95       	com	r19
    2118:	25 b1       	in	r18, 0x05	; 5
    211a:	23 23       	and	r18, r19
    211c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    211e:	2e ea       	ldi	r18, 0xAE	; 174
    2120:	2a 95       	dec	r18
    2122:	f1 f7       	brne	.-4      	; 0x2120 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    2124:	2b ee       	ldi	r18, 0xEB	; 235

00002126 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    2126:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    2128:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    212c:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    212e:	30 91 68 01 	lds	r19, 0x0168
    com tmpreg2
    2132:	30 95       	com	r19
    in tmpreg1, IR_PORT
    2134:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    2136:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    2138:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    213a:	0f be       	out	0x3f, r0	; 63
    return 0
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	08 95       	ret

00002140 <nocollision>:
nocollision:
    nop
    2140:	00 00       	nop
    dec tmpreg1
    2142:	2a 95       	dec	r18
    brne checkcollision
    2144:	81 f7       	brne	.-32     	; 0x2126 <checkcollision>

    ldi tmpreg1, 0x01
    2146:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    2148:	30 91 68 01 	lds	r19, 0x0168
    214c:	20 30       	cpi	r18, 0x00	; 0
    214e:	29 f0       	breq	.+10     	; 0x215a <nocollision+0x1a>
    2150:	00 00       	nop
    2152:	25 b1       	in	r18, 0x05	; 5
    2154:	23 2b       	or	r18, r19
    2156:	25 b9       	out	0x05, r18	; 5
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <nocollision+0x22>
    215a:	00 00       	nop
    215c:	00 00       	nop
    215e:	00 00       	nop
    2160:	00 c0       	rjmp	.+0      	; 0x2162 <nocollision+0x22>
    2162:	00 00       	nop
    2164:	00 00       	nop
    2166:	00 00       	nop
    2168:	30 95       	com	r19
    216a:	25 b1       	in	r18, 0x05	; 5
    216c:	23 23       	and	r18, r19
    216e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    2170:	00 00       	nop
    2172:	24 e5       	ldi	r18, 0x54	; 84
    2174:	2a 95       	dec	r18
    2176:	f1 f7       	brne	.-4      	; 0x2174 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    2178:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    217a:	8c e0       	ldi	r24, 0x0C	; 12

0000217c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    217c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    217e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    2180:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    2182:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    2184:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    2186:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    2188:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    218a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    218c:	50 e0       	ldi	r21, 0x00	; 0

0000218e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    218e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    2190:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    2192:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    2194:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    2196:	30 91 68 01 	lds	r19, 0x0168
    219a:	20 30       	cpi	r18, 0x00	; 0
    219c:	29 f0       	breq	.+10     	; 0x21a8 <sendbit+0x1a>
    219e:	00 00       	nop
    21a0:	25 b1       	in	r18, 0x05	; 5
    21a2:	23 2b       	or	r18, r19
    21a4:	25 b9       	out	0x05, r18	; 5
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <sendbit+0x22>
    21a8:	00 00       	nop
    21aa:	00 00       	nop
    21ac:	00 00       	nop
    21ae:	00 c0       	rjmp	.+0      	; 0x21b0 <sendbit+0x22>
    21b0:	00 00       	nop
    21b2:	00 00       	nop
    21b4:	00 00       	nop
    21b6:	30 95       	com	r19
    21b8:	25 b1       	in	r18, 0x05	; 5
    21ba:	23 23       	and	r18, r19
    21bc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    21be:	00 00       	nop
    21c0:	21 e5       	ldi	r18, 0x51	; 81
    21c2:	2a 95       	dec	r18
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    21c6:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    21c8:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    21ca:	9a 95       	dec	r25
    brne sendbit
    21cc:	01 f7       	brne	.-64     	; 0x218e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    21ce:	8a 95       	dec	r24
    brne sendbyte
    21d0:	a9 f6       	brne	.-86     	; 0x217c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    21d2:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    21d4:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    21d6:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    21d8:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    21da:	30 91 68 01 	lds	r19, 0x0168
    com tmpreg2
    21de:	30 95       	com	r19
    in tmpreg1, IR_PORT
    21e0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    21e2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    21e4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    21e6:	0f be       	out	0x3f, r0	; 63
    return 1
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	08 95       	ret

000021ec <main>:
/*-------------------------------------------------------------------*/
/* Main function                                                     */
/*-------------------------------------------------------------------*/
int main()
{
  kilo_init();
    21ec:	0e 94 87 07 	call	0xf0e	; 0xf0e <kilo_init>
  kilo_message_rx = message_rx;
    21f0:	86 ef       	ldi	r24, 0xF6	; 246
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	90 93 06 01 	sts	0x0106, r25
    21f8:	80 93 05 01 	sts	0x0105, r24
  kilo_message_tx = message_tx;
    21fc:	89 ee       	ldi	r24, 0xE9	; 233
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	90 93 04 01 	sts	0x0104, r25
    2204:	80 93 03 01 	sts	0x0103, r24
  kilo_message_tx_success = tx_message_success;
    2208:	83 ef       	ldi	r24, 0xF3	; 243
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	90 93 02 01 	sts	0x0102, r25
    2210:	80 93 01 01 	sts	0x0101, r24
#if REAL
  debug_init();
#endif

  /* start main loop */
  kilo_start(setup, loop);
    2214:	66 ec       	ldi	r22, 0xC6	; 198
    2216:	71 e0       	ldi	r23, 0x01	; 1
    2218:	89 e9       	ldi	r24, 0x99	; 153
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	0e 94 83 08 	call	0x1106	; 0x1106 <kilo_start>

  return 0;
}
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	08 95       	ret

00002226 <__divmodhi4>:
    2226:	97 fb       	bst	r25, 7
    2228:	07 2e       	mov	r0, r23
    222a:	16 f4       	brtc	.+4      	; 0x2230 <__divmodhi4+0xa>
    222c:	00 94       	com	r0
    222e:	07 d0       	rcall	.+14     	; 0x223e <__divmodhi4_neg1>
    2230:	77 fd       	sbrc	r23, 7
    2232:	09 d0       	rcall	.+18     	; 0x2246 <__divmodhi4_neg2>
    2234:	0e 94 3c 11 	call	0x2278	; 0x2278 <__udivmodhi4>
    2238:	07 fc       	sbrc	r0, 7
    223a:	05 d0       	rcall	.+10     	; 0x2246 <__divmodhi4_neg2>
    223c:	3e f4       	brtc	.+14     	; 0x224c <__divmodhi4_exit>

0000223e <__divmodhi4_neg1>:
    223e:	90 95       	com	r25
    2240:	81 95       	neg	r24
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	08 95       	ret

00002246 <__divmodhi4_neg2>:
    2246:	70 95       	com	r23
    2248:	61 95       	neg	r22
    224a:	7f 4f       	sbci	r23, 0xFF	; 255

0000224c <__divmodhi4_exit>:
    224c:	08 95       	ret

0000224e <__tablejump2__>:
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	05 90       	lpm	r0, Z+
    2254:	f4 91       	lpm	r31, Z
    2256:	e0 2d       	mov	r30, r0
    2258:	09 94       	ijmp

0000225a <__umulhisi3>:
    225a:	a2 9f       	mul	r26, r18
    225c:	b0 01       	movw	r22, r0
    225e:	b3 9f       	mul	r27, r19
    2260:	c0 01       	movw	r24, r0
    2262:	a3 9f       	mul	r26, r19
    2264:	70 0d       	add	r23, r0
    2266:	81 1d       	adc	r24, r1
    2268:	11 24       	eor	r1, r1
    226a:	91 1d       	adc	r25, r1
    226c:	b2 9f       	mul	r27, r18
    226e:	70 0d       	add	r23, r0
    2270:	81 1d       	adc	r24, r1
    2272:	11 24       	eor	r1, r1
    2274:	91 1d       	adc	r25, r1
    2276:	08 95       	ret

00002278 <__udivmodhi4>:
    2278:	aa 1b       	sub	r26, r26
    227a:	bb 1b       	sub	r27, r27
    227c:	51 e1       	ldi	r21, 0x11	; 17
    227e:	07 c0       	rjmp	.+14     	; 0x228e <__udivmodhi4_ep>

00002280 <__udivmodhi4_loop>:
    2280:	aa 1f       	adc	r26, r26
    2282:	bb 1f       	adc	r27, r27
    2284:	a6 17       	cp	r26, r22
    2286:	b7 07       	cpc	r27, r23
    2288:	10 f0       	brcs	.+4      	; 0x228e <__udivmodhi4_ep>
    228a:	a6 1b       	sub	r26, r22
    228c:	b7 0b       	sbc	r27, r23

0000228e <__udivmodhi4_ep>:
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	5a 95       	dec	r21
    2294:	a9 f7       	brne	.-22     	; 0x2280 <__udivmodhi4_loop>
    2296:	80 95       	com	r24
    2298:	90 95       	com	r25
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	08 95       	ret

000022a0 <__subsf3>:
    22a0:	50 58       	subi	r21, 0x80	; 128

000022a2 <__addsf3>:
    22a2:	bb 27       	eor	r27, r27
    22a4:	aa 27       	eor	r26, r26
    22a6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    22aa:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>
    22ae:	0e 94 2f 13 	call	0x265e	; 0x265e <__fp_pscA>
    22b2:	38 f0       	brcs	.+14     	; 0x22c2 <__addsf3+0x20>
    22b4:	0e 94 36 13 	call	0x266c	; 0x266c <__fp_pscB>
    22b8:	20 f0       	brcs	.+8      	; 0x22c2 <__addsf3+0x20>
    22ba:	39 f4       	brne	.+14     	; 0x22ca <__addsf3+0x28>
    22bc:	9f 3f       	cpi	r25, 0xFF	; 255
    22be:	19 f4       	brne	.+6      	; 0x22c6 <__addsf3+0x24>
    22c0:	26 f4       	brtc	.+8      	; 0x22ca <__addsf3+0x28>
    22c2:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>
    22c6:	0e f4       	brtc	.+2      	; 0x22ca <__addsf3+0x28>
    22c8:	e0 95       	com	r30
    22ca:	e7 fb       	bst	r30, 7
    22cc:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>

000022d0 <__addsf3x>:
    22d0:	e9 2f       	mov	r30, r25
    22d2:	0e 94 8d 13 	call	0x271a	; 0x271a <__fp_split3>
    22d6:	58 f3       	brcs	.-42     	; 0x22ae <__addsf3+0xc>
    22d8:	ba 17       	cp	r27, r26
    22da:	62 07       	cpc	r22, r18
    22dc:	73 07       	cpc	r23, r19
    22de:	84 07       	cpc	r24, r20
    22e0:	95 07       	cpc	r25, r21
    22e2:	20 f0       	brcs	.+8      	; 0x22ec <__addsf3x+0x1c>
    22e4:	79 f4       	brne	.+30     	; 0x2304 <__addsf3x+0x34>
    22e6:	a6 f5       	brtc	.+104    	; 0x2350 <__addsf3x+0x80>
    22e8:	0c 94 af 13 	jmp	0x275e	; 0x275e <__fp_zero>
    22ec:	0e f4       	brtc	.+2      	; 0x22f0 <__addsf3x+0x20>
    22ee:	e0 95       	com	r30
    22f0:	0b 2e       	mov	r0, r27
    22f2:	ba 2f       	mov	r27, r26
    22f4:	a0 2d       	mov	r26, r0
    22f6:	0b 01       	movw	r0, r22
    22f8:	b9 01       	movw	r22, r18
    22fa:	90 01       	movw	r18, r0
    22fc:	0c 01       	movw	r0, r24
    22fe:	ca 01       	movw	r24, r20
    2300:	a0 01       	movw	r20, r0
    2302:	11 24       	eor	r1, r1
    2304:	ff 27       	eor	r31, r31
    2306:	59 1b       	sub	r21, r25
    2308:	99 f0       	breq	.+38     	; 0x2330 <__addsf3x+0x60>
    230a:	59 3f       	cpi	r21, 0xF9	; 249
    230c:	50 f4       	brcc	.+20     	; 0x2322 <__addsf3x+0x52>
    230e:	50 3e       	cpi	r21, 0xE0	; 224
    2310:	68 f1       	brcs	.+90     	; 0x236c <__addsf3x+0x9c>
    2312:	1a 16       	cp	r1, r26
    2314:	f0 40       	sbci	r31, 0x00	; 0
    2316:	a2 2f       	mov	r26, r18
    2318:	23 2f       	mov	r18, r19
    231a:	34 2f       	mov	r19, r20
    231c:	44 27       	eor	r20, r20
    231e:	58 5f       	subi	r21, 0xF8	; 248
    2320:	f3 cf       	rjmp	.-26     	; 0x2308 <__addsf3x+0x38>
    2322:	46 95       	lsr	r20
    2324:	37 95       	ror	r19
    2326:	27 95       	ror	r18
    2328:	a7 95       	ror	r26
    232a:	f0 40       	sbci	r31, 0x00	; 0
    232c:	53 95       	inc	r21
    232e:	c9 f7       	brne	.-14     	; 0x2322 <__addsf3x+0x52>
    2330:	7e f4       	brtc	.+30     	; 0x2350 <__addsf3x+0x80>
    2332:	1f 16       	cp	r1, r31
    2334:	ba 0b       	sbc	r27, r26
    2336:	62 0b       	sbc	r22, r18
    2338:	73 0b       	sbc	r23, r19
    233a:	84 0b       	sbc	r24, r20
    233c:	ba f0       	brmi	.+46     	; 0x236c <__addsf3x+0x9c>
    233e:	91 50       	subi	r25, 0x01	; 1
    2340:	a1 f0       	breq	.+40     	; 0x236a <__addsf3x+0x9a>
    2342:	ff 0f       	add	r31, r31
    2344:	bb 1f       	adc	r27, r27
    2346:	66 1f       	adc	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	c2 f7       	brpl	.-16     	; 0x233e <__addsf3x+0x6e>
    234e:	0e c0       	rjmp	.+28     	; 0x236c <__addsf3x+0x9c>
    2350:	ba 0f       	add	r27, r26
    2352:	62 1f       	adc	r22, r18
    2354:	73 1f       	adc	r23, r19
    2356:	84 1f       	adc	r24, r20
    2358:	48 f4       	brcc	.+18     	; 0x236c <__addsf3x+0x9c>
    235a:	87 95       	ror	r24
    235c:	77 95       	ror	r23
    235e:	67 95       	ror	r22
    2360:	b7 95       	ror	r27
    2362:	f7 95       	ror	r31
    2364:	9e 3f       	cpi	r25, 0xFE	; 254
    2366:	08 f0       	brcs	.+2      	; 0x236a <__addsf3x+0x9a>
    2368:	b0 cf       	rjmp	.-160    	; 0x22ca <__addsf3+0x28>
    236a:	93 95       	inc	r25
    236c:	88 0f       	add	r24, r24
    236e:	08 f0       	brcs	.+2      	; 0x2372 <__addsf3x+0xa2>
    2370:	99 27       	eor	r25, r25
    2372:	ee 0f       	add	r30, r30
    2374:	97 95       	ror	r25
    2376:	87 95       	ror	r24
    2378:	08 95       	ret

0000237a <atan>:
    237a:	df 93       	push	r29
    237c:	dd 27       	eor	r29, r29
    237e:	b9 2f       	mov	r27, r25
    2380:	bf 77       	andi	r27, 0x7F	; 127
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	16 16       	cp	r1, r22
    2388:	17 06       	cpc	r1, r23
    238a:	48 07       	cpc	r20, r24
    238c:	5b 07       	cpc	r21, r27
    238e:	18 f4       	brcc	.+6      	; 0x2396 <atan+0x1c>
    2390:	d9 2f       	mov	r29, r25
    2392:	0e 94 b6 13 	call	0x276c	; 0x276c <inverse>
    2396:	9f 93       	push	r25
    2398:	8f 93       	push	r24
    239a:	7f 93       	push	r23
    239c:	6f 93       	push	r22
    239e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <square>
    23a2:	ec e8       	ldi	r30, 0x8C	; 140
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_powser>
    23aa:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__fp_round>
    23ae:	2f 91       	pop	r18
    23b0:	3f 91       	pop	r19
    23b2:	4f 91       	pop	r20
    23b4:	5f 91       	pop	r21
    23b6:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsf3x>
    23ba:	dd 23       	and	r29, r29
    23bc:	51 f0       	breq	.+20     	; 0x23d2 <atan+0x58>
    23be:	90 58       	subi	r25, 0x80	; 128
    23c0:	a2 ea       	ldi	r26, 0xA2	; 162
    23c2:	2a ed       	ldi	r18, 0xDA	; 218
    23c4:	3f e0       	ldi	r19, 0x0F	; 15
    23c6:	49 ec       	ldi	r20, 0xC9	; 201
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	d0 78       	andi	r29, 0x80	; 128
    23cc:	5d 27       	eor	r21, r29
    23ce:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    23d2:	df 91       	pop	r29
    23d4:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>

000023d8 <__cmpsf2>:
    23d8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fp_cmp>
    23dc:	08 f4       	brcc	.+2      	; 0x23e0 <__cmpsf2+0x8>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	08 95       	ret

000023e2 <cos>:
    23e2:	0e 94 3f 13 	call	0x267e	; 0x267e <__fp_rempio2>
    23e6:	e3 95       	inc	r30
    23e8:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__fp_sinus>

000023ec <__divsf3>:
    23ec:	0e 94 0a 12 	call	0x2414	; 0x2414 <__divsf3x>
    23f0:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>
    23f4:	0e 94 36 13 	call	0x266c	; 0x266c <__fp_pscB>
    23f8:	58 f0       	brcs	.+22     	; 0x2410 <__divsf3+0x24>
    23fa:	0e 94 2f 13 	call	0x265e	; 0x265e <__fp_pscA>
    23fe:	40 f0       	brcs	.+16     	; 0x2410 <__divsf3+0x24>
    2400:	29 f4       	brne	.+10     	; 0x240c <__divsf3+0x20>
    2402:	5f 3f       	cpi	r21, 0xFF	; 255
    2404:	29 f0       	breq	.+10     	; 0x2410 <__divsf3+0x24>
    2406:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    240a:	51 11       	cpse	r21, r1
    240c:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>
    2410:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>

00002414 <__divsf3x>:
    2414:	0e 94 8d 13 	call	0x271a	; 0x271a <__fp_split3>
    2418:	68 f3       	brcs	.-38     	; 0x23f4 <__divsf3+0x8>

0000241a <__divsf3_pse>:
    241a:	99 23       	and	r25, r25
    241c:	b1 f3       	breq	.-20     	; 0x240a <__divsf3+0x1e>
    241e:	55 23       	and	r21, r21
    2420:	91 f3       	breq	.-28     	; 0x2406 <__divsf3+0x1a>
    2422:	95 1b       	sub	r25, r21
    2424:	55 0b       	sbc	r21, r21
    2426:	bb 27       	eor	r27, r27
    2428:	aa 27       	eor	r26, r26
    242a:	62 17       	cp	r22, r18
    242c:	73 07       	cpc	r23, r19
    242e:	84 07       	cpc	r24, r20
    2430:	38 f0       	brcs	.+14     	; 0x2440 <__divsf3_pse+0x26>
    2432:	9f 5f       	subi	r25, 0xFF	; 255
    2434:	5f 4f       	sbci	r21, 0xFF	; 255
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	44 1f       	adc	r20, r20
    243c:	aa 1f       	adc	r26, r26
    243e:	a9 f3       	breq	.-22     	; 0x242a <__divsf3_pse+0x10>
    2440:	35 d0       	rcall	.+106    	; 0x24ac <__divsf3_pse+0x92>
    2442:	0e 2e       	mov	r0, r30
    2444:	3a f0       	brmi	.+14     	; 0x2454 <__divsf3_pse+0x3a>
    2446:	e0 e8       	ldi	r30, 0x80	; 128
    2448:	32 d0       	rcall	.+100    	; 0x24ae <__divsf3_pse+0x94>
    244a:	91 50       	subi	r25, 0x01	; 1
    244c:	50 40       	sbci	r21, 0x00	; 0
    244e:	e6 95       	lsr	r30
    2450:	00 1c       	adc	r0, r0
    2452:	ca f7       	brpl	.-14     	; 0x2446 <__divsf3_pse+0x2c>
    2454:	2b d0       	rcall	.+86     	; 0x24ac <__divsf3_pse+0x92>
    2456:	fe 2f       	mov	r31, r30
    2458:	29 d0       	rcall	.+82     	; 0x24ac <__divsf3_pse+0x92>
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	88 1f       	adc	r24, r24
    2460:	bb 1f       	adc	r27, r27
    2462:	26 17       	cp	r18, r22
    2464:	37 07       	cpc	r19, r23
    2466:	48 07       	cpc	r20, r24
    2468:	ab 07       	cpc	r26, r27
    246a:	b0 e8       	ldi	r27, 0x80	; 128
    246c:	09 f0       	breq	.+2      	; 0x2470 <__divsf3_pse+0x56>
    246e:	bb 0b       	sbc	r27, r27
    2470:	80 2d       	mov	r24, r0
    2472:	bf 01       	movw	r22, r30
    2474:	ff 27       	eor	r31, r31
    2476:	93 58       	subi	r25, 0x83	; 131
    2478:	5f 4f       	sbci	r21, 0xFF	; 255
    247a:	3a f0       	brmi	.+14     	; 0x248a <__divsf3_pse+0x70>
    247c:	9e 3f       	cpi	r25, 0xFE	; 254
    247e:	51 05       	cpc	r21, r1
    2480:	78 f0       	brcs	.+30     	; 0x24a0 <__divsf3_pse+0x86>
    2482:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    2486:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>
    248a:	5f 3f       	cpi	r21, 0xFF	; 255
    248c:	e4 f3       	brlt	.-8      	; 0x2486 <__divsf3_pse+0x6c>
    248e:	98 3e       	cpi	r25, 0xE8	; 232
    2490:	d4 f3       	brlt	.-12     	; 0x2486 <__divsf3_pse+0x6c>
    2492:	86 95       	lsr	r24
    2494:	77 95       	ror	r23
    2496:	67 95       	ror	r22
    2498:	b7 95       	ror	r27
    249a:	f7 95       	ror	r31
    249c:	9f 5f       	subi	r25, 0xFF	; 255
    249e:	c9 f7       	brne	.-14     	; 0x2492 <__divsf3_pse+0x78>
    24a0:	88 0f       	add	r24, r24
    24a2:	91 1d       	adc	r25, r1
    24a4:	96 95       	lsr	r25
    24a6:	87 95       	ror	r24
    24a8:	97 f9       	bld	r25, 7
    24aa:	08 95       	ret
    24ac:	e1 e0       	ldi	r30, 0x01	; 1
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	88 1f       	adc	r24, r24
    24b4:	bb 1f       	adc	r27, r27
    24b6:	62 17       	cp	r22, r18
    24b8:	73 07       	cpc	r23, r19
    24ba:	84 07       	cpc	r24, r20
    24bc:	ba 07       	cpc	r27, r26
    24be:	20 f0       	brcs	.+8      	; 0x24c8 <__divsf3_pse+0xae>
    24c0:	62 1b       	sub	r22, r18
    24c2:	73 0b       	sbc	r23, r19
    24c4:	84 0b       	sbc	r24, r20
    24c6:	ba 0b       	sbc	r27, r26
    24c8:	ee 1f       	adc	r30, r30
    24ca:	88 f7       	brcc	.-30     	; 0x24ae <__divsf3_pse+0x94>
    24cc:	e0 95       	com	r30
    24ce:	08 95       	ret

000024d0 <__fixsfsi>:
    24d0:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixunssfsi>
    24d4:	68 94       	set
    24d6:	b1 11       	cpse	r27, r1
    24d8:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>
    24dc:	08 95       	ret

000024de <__fixunssfsi>:
    24de:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    24e2:	88 f0       	brcs	.+34     	; 0x2506 <__fixunssfsi+0x28>
    24e4:	9f 57       	subi	r25, 0x7F	; 127
    24e6:	98 f0       	brcs	.+38     	; 0x250e <__fixunssfsi+0x30>
    24e8:	b9 2f       	mov	r27, r25
    24ea:	99 27       	eor	r25, r25
    24ec:	b7 51       	subi	r27, 0x17	; 23
    24ee:	b0 f0       	brcs	.+44     	; 0x251c <__fixunssfsi+0x3e>
    24f0:	e1 f0       	breq	.+56     	; 0x252a <__fixunssfsi+0x4c>
    24f2:	66 0f       	add	r22, r22
    24f4:	77 1f       	adc	r23, r23
    24f6:	88 1f       	adc	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	1a f0       	brmi	.+6      	; 0x2502 <__fixunssfsi+0x24>
    24fc:	ba 95       	dec	r27
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <__fixunssfsi+0x14>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <__fixunssfsi+0x4c>
    2502:	b1 30       	cpi	r27, 0x01	; 1
    2504:	91 f0       	breq	.+36     	; 0x252a <__fixunssfsi+0x4c>
    2506:	0e 94 af 13 	call	0x275e	; 0x275e <__fp_zero>
    250a:	b1 e0       	ldi	r27, 0x01	; 1
    250c:	08 95       	ret
    250e:	0c 94 af 13 	jmp	0x275e	; 0x275e <__fp_zero>
    2512:	67 2f       	mov	r22, r23
    2514:	78 2f       	mov	r23, r24
    2516:	88 27       	eor	r24, r24
    2518:	b8 5f       	subi	r27, 0xF8	; 248
    251a:	39 f0       	breq	.+14     	; 0x252a <__fixunssfsi+0x4c>
    251c:	b9 3f       	cpi	r27, 0xF9	; 249
    251e:	cc f3       	brlt	.-14     	; 0x2512 <__fixunssfsi+0x34>
    2520:	86 95       	lsr	r24
    2522:	77 95       	ror	r23
    2524:	67 95       	ror	r22
    2526:	b3 95       	inc	r27
    2528:	d9 f7       	brne	.-10     	; 0x2520 <__fixunssfsi+0x42>
    252a:	3e f4       	brtc	.+14     	; 0x253a <__fixunssfsi+0x5c>
    252c:	90 95       	com	r25
    252e:	80 95       	com	r24
    2530:	70 95       	com	r23
    2532:	61 95       	neg	r22
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	8f 4f       	sbci	r24, 0xFF	; 255
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	08 95       	ret

0000253c <__floatunsisf>:
    253c:	e8 94       	clt
    253e:	09 c0       	rjmp	.+18     	; 0x2552 <__floatsisf+0x12>

00002540 <__floatsisf>:
    2540:	97 fb       	bst	r25, 7
    2542:	3e f4       	brtc	.+14     	; 0x2552 <__floatsisf+0x12>
    2544:	90 95       	com	r25
    2546:	80 95       	com	r24
    2548:	70 95       	com	r23
    254a:	61 95       	neg	r22
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	8f 4f       	sbci	r24, 0xFF	; 255
    2550:	9f 4f       	sbci	r25, 0xFF	; 255
    2552:	99 23       	and	r25, r25
    2554:	a9 f0       	breq	.+42     	; 0x2580 <__floatsisf+0x40>
    2556:	f9 2f       	mov	r31, r25
    2558:	96 e9       	ldi	r25, 0x96	; 150
    255a:	bb 27       	eor	r27, r27
    255c:	93 95       	inc	r25
    255e:	f6 95       	lsr	r31
    2560:	87 95       	ror	r24
    2562:	77 95       	ror	r23
    2564:	67 95       	ror	r22
    2566:	b7 95       	ror	r27
    2568:	f1 11       	cpse	r31, r1
    256a:	f8 cf       	rjmp	.-16     	; 0x255c <__floatsisf+0x1c>
    256c:	fa f4       	brpl	.+62     	; 0x25ac <__floatsisf+0x6c>
    256e:	bb 0f       	add	r27, r27
    2570:	11 f4       	brne	.+4      	; 0x2576 <__floatsisf+0x36>
    2572:	60 ff       	sbrs	r22, 0
    2574:	1b c0       	rjmp	.+54     	; 0x25ac <__floatsisf+0x6c>
    2576:	6f 5f       	subi	r22, 0xFF	; 255
    2578:	7f 4f       	sbci	r23, 0xFF	; 255
    257a:	8f 4f       	sbci	r24, 0xFF	; 255
    257c:	9f 4f       	sbci	r25, 0xFF	; 255
    257e:	16 c0       	rjmp	.+44     	; 0x25ac <__floatsisf+0x6c>
    2580:	88 23       	and	r24, r24
    2582:	11 f0       	breq	.+4      	; 0x2588 <__floatsisf+0x48>
    2584:	96 e9       	ldi	r25, 0x96	; 150
    2586:	11 c0       	rjmp	.+34     	; 0x25aa <__floatsisf+0x6a>
    2588:	77 23       	and	r23, r23
    258a:	21 f0       	breq	.+8      	; 0x2594 <__floatsisf+0x54>
    258c:	9e e8       	ldi	r25, 0x8E	; 142
    258e:	87 2f       	mov	r24, r23
    2590:	76 2f       	mov	r23, r22
    2592:	05 c0       	rjmp	.+10     	; 0x259e <__floatsisf+0x5e>
    2594:	66 23       	and	r22, r22
    2596:	71 f0       	breq	.+28     	; 0x25b4 <__floatsisf+0x74>
    2598:	96 e8       	ldi	r25, 0x86	; 134
    259a:	86 2f       	mov	r24, r22
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	2a f0       	brmi	.+10     	; 0x25ac <__floatsisf+0x6c>
    25a2:	9a 95       	dec	r25
    25a4:	66 0f       	add	r22, r22
    25a6:	77 1f       	adc	r23, r23
    25a8:	88 1f       	adc	r24, r24
    25aa:	da f7       	brpl	.-10     	; 0x25a2 <__floatsisf+0x62>
    25ac:	88 0f       	add	r24, r24
    25ae:	96 95       	lsr	r25
    25b0:	87 95       	ror	r24
    25b2:	97 f9       	bld	r25, 7
    25b4:	08 95       	ret

000025b6 <__fp_cmp>:
    25b6:	99 0f       	add	r25, r25
    25b8:	00 08       	sbc	r0, r0
    25ba:	55 0f       	add	r21, r21
    25bc:	aa 0b       	sbc	r26, r26
    25be:	e0 e8       	ldi	r30, 0x80	; 128
    25c0:	fe ef       	ldi	r31, 0xFE	; 254
    25c2:	16 16       	cp	r1, r22
    25c4:	17 06       	cpc	r1, r23
    25c6:	e8 07       	cpc	r30, r24
    25c8:	f9 07       	cpc	r31, r25
    25ca:	c0 f0       	brcs	.+48     	; 0x25fc <__fp_cmp+0x46>
    25cc:	12 16       	cp	r1, r18
    25ce:	13 06       	cpc	r1, r19
    25d0:	e4 07       	cpc	r30, r20
    25d2:	f5 07       	cpc	r31, r21
    25d4:	98 f0       	brcs	.+38     	; 0x25fc <__fp_cmp+0x46>
    25d6:	62 1b       	sub	r22, r18
    25d8:	73 0b       	sbc	r23, r19
    25da:	84 0b       	sbc	r24, r20
    25dc:	95 0b       	sbc	r25, r21
    25de:	39 f4       	brne	.+14     	; 0x25ee <__fp_cmp+0x38>
    25e0:	0a 26       	eor	r0, r26
    25e2:	61 f0       	breq	.+24     	; 0x25fc <__fp_cmp+0x46>
    25e4:	23 2b       	or	r18, r19
    25e6:	24 2b       	or	r18, r20
    25e8:	25 2b       	or	r18, r21
    25ea:	21 f4       	brne	.+8      	; 0x25f4 <__fp_cmp+0x3e>
    25ec:	08 95       	ret
    25ee:	0a 26       	eor	r0, r26
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <__fp_cmp+0x3e>
    25f2:	a1 40       	sbci	r26, 0x01	; 1
    25f4:	a6 95       	lsr	r26
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	81 1d       	adc	r24, r1
    25fa:	81 1d       	adc	r24, r1
    25fc:	08 95       	ret

000025fe <__fp_inf>:
    25fe:	97 f9       	bld	r25, 7
    2600:	9f 67       	ori	r25, 0x7F	; 127
    2602:	80 e8       	ldi	r24, 0x80	; 128
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	60 e0       	ldi	r22, 0x00	; 0
    2608:	08 95       	ret

0000260a <__fp_nan>:
    260a:	9f ef       	ldi	r25, 0xFF	; 255
    260c:	80 ec       	ldi	r24, 0xC0	; 192
    260e:	08 95       	ret

00002610 <__fp_powser>:
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	1f 93       	push	r17
    2616:	0f 93       	push	r16
    2618:	ff 92       	push	r15
    261a:	ef 92       	push	r14
    261c:	df 92       	push	r13
    261e:	7b 01       	movw	r14, r22
    2620:	8c 01       	movw	r16, r24
    2622:	68 94       	set
    2624:	06 c0       	rjmp	.+12     	; 0x2632 <__fp_powser+0x22>
    2626:	da 2e       	mov	r13, r26
    2628:	ef 01       	movw	r28, r30
    262a:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsf3x>
    262e:	fe 01       	movw	r30, r28
    2630:	e8 94       	clt
    2632:	a5 91       	lpm	r26, Z+
    2634:	25 91       	lpm	r18, Z+
    2636:	35 91       	lpm	r19, Z+
    2638:	45 91       	lpm	r20, Z+
    263a:	55 91       	lpm	r21, Z+
    263c:	a6 f3       	brts	.-24     	; 0x2626 <__fp_powser+0x16>
    263e:	ef 01       	movw	r28, r30
    2640:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    2644:	fe 01       	movw	r30, r28
    2646:	97 01       	movw	r18, r14
    2648:	a8 01       	movw	r20, r16
    264a:	da 94       	dec	r13
    264c:	69 f7       	brne	.-38     	; 0x2628 <__fp_powser+0x18>
    264e:	df 90       	pop	r13
    2650:	ef 90       	pop	r14
    2652:	ff 90       	pop	r15
    2654:	0f 91       	pop	r16
    2656:	1f 91       	pop	r17
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <__fp_pscA>:
    265e:	00 24       	eor	r0, r0
    2660:	0a 94       	dec	r0
    2662:	16 16       	cp	r1, r22
    2664:	17 06       	cpc	r1, r23
    2666:	18 06       	cpc	r1, r24
    2668:	09 06       	cpc	r0, r25
    266a:	08 95       	ret

0000266c <__fp_pscB>:
    266c:	00 24       	eor	r0, r0
    266e:	0a 94       	dec	r0
    2670:	12 16       	cp	r1, r18
    2672:	13 06       	cpc	r1, r19
    2674:	14 06       	cpc	r1, r20
    2676:	05 06       	cpc	r0, r21
    2678:	08 95       	ret
    267a:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>

0000267e <__fp_rempio2>:
    267e:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    2682:	d8 f3       	brcs	.-10     	; 0x267a <__fp_pscB+0xe>
    2684:	e8 94       	clt
    2686:	e0 e0       	ldi	r30, 0x00	; 0
    2688:	bb 27       	eor	r27, r27
    268a:	9f 57       	subi	r25, 0x7F	; 127
    268c:	f0 f0       	brcs	.+60     	; 0x26ca <__fp_rempio2+0x4c>
    268e:	2a ed       	ldi	r18, 0xDA	; 218
    2690:	3f e0       	ldi	r19, 0x0F	; 15
    2692:	49 ec       	ldi	r20, 0xC9	; 201
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <__fp_rempio2+0x24>
    2696:	ee 0f       	add	r30, r30
    2698:	bb 0f       	add	r27, r27
    269a:	66 1f       	adc	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	88 1f       	adc	r24, r24
    26a0:	28 f0       	brcs	.+10     	; 0x26ac <__fp_rempio2+0x2e>
    26a2:	b2 3a       	cpi	r27, 0xA2	; 162
    26a4:	62 07       	cpc	r22, r18
    26a6:	73 07       	cpc	r23, r19
    26a8:	84 07       	cpc	r24, r20
    26aa:	28 f0       	brcs	.+10     	; 0x26b6 <__fp_rempio2+0x38>
    26ac:	b2 5a       	subi	r27, 0xA2	; 162
    26ae:	62 0b       	sbc	r22, r18
    26b0:	73 0b       	sbc	r23, r19
    26b2:	84 0b       	sbc	r24, r20
    26b4:	e3 95       	inc	r30
    26b6:	9a 95       	dec	r25
    26b8:	72 f7       	brpl	.-36     	; 0x2696 <__fp_rempio2+0x18>
    26ba:	80 38       	cpi	r24, 0x80	; 128
    26bc:	30 f4       	brcc	.+12     	; 0x26ca <__fp_rempio2+0x4c>
    26be:	9a 95       	dec	r25
    26c0:	bb 0f       	add	r27, r27
    26c2:	66 1f       	adc	r22, r22
    26c4:	77 1f       	adc	r23, r23
    26c6:	88 1f       	adc	r24, r24
    26c8:	d2 f7       	brpl	.-12     	; 0x26be <__fp_rempio2+0x40>
    26ca:	90 48       	sbci	r25, 0x80	; 128
    26cc:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__fp_mpack_finite>

000026d0 <__fp_round>:
    26d0:	09 2e       	mov	r0, r25
    26d2:	03 94       	inc	r0
    26d4:	00 0c       	add	r0, r0
    26d6:	11 f4       	brne	.+4      	; 0x26dc <__fp_round+0xc>
    26d8:	88 23       	and	r24, r24
    26da:	52 f0       	brmi	.+20     	; 0x26f0 <__fp_round+0x20>
    26dc:	bb 0f       	add	r27, r27
    26de:	40 f4       	brcc	.+16     	; 0x26f0 <__fp_round+0x20>
    26e0:	bf 2b       	or	r27, r31
    26e2:	11 f4       	brne	.+4      	; 0x26e8 <__fp_round+0x18>
    26e4:	60 ff       	sbrs	r22, 0
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <__fp_round+0x20>
    26e8:	6f 5f       	subi	r22, 0xFF	; 255
    26ea:	7f 4f       	sbci	r23, 0xFF	; 255
    26ec:	8f 4f       	sbci	r24, 0xFF	; 255
    26ee:	9f 4f       	sbci	r25, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__fp_sinus>:
    26f2:	ef 93       	push	r30
    26f4:	e0 ff       	sbrs	r30, 0
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <__fp_sinus+0x14>
    26f8:	a2 ea       	ldi	r26, 0xA2	; 162
    26fa:	2a ed       	ldi	r18, 0xDA	; 218
    26fc:	3f e0       	ldi	r19, 0x0F	; 15
    26fe:	49 ec       	ldi	r20, 0xC9	; 201
    2700:	5f eb       	ldi	r21, 0xBF	; 191
    2702:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    2706:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__fp_round>
    270a:	0f 90       	pop	r0
    270c:	03 94       	inc	r0
    270e:	01 fc       	sbrc	r0, 1
    2710:	90 58       	subi	r25, 0x80	; 128
    2712:	e9 eb       	ldi	r30, 0xB9	; 185
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__fp_powsodd>

0000271a <__fp_split3>:
    271a:	57 fd       	sbrc	r21, 7
    271c:	90 58       	subi	r25, 0x80	; 128
    271e:	44 0f       	add	r20, r20
    2720:	55 1f       	adc	r21, r21
    2722:	59 f0       	breq	.+22     	; 0x273a <__fp_splitA+0x10>
    2724:	5f 3f       	cpi	r21, 0xFF	; 255
    2726:	71 f0       	breq	.+28     	; 0x2744 <__fp_splitA+0x1a>
    2728:	47 95       	ror	r20

0000272a <__fp_splitA>:
    272a:	88 0f       	add	r24, r24
    272c:	97 fb       	bst	r25, 7
    272e:	99 1f       	adc	r25, r25
    2730:	61 f0       	breq	.+24     	; 0x274a <__fp_splitA+0x20>
    2732:	9f 3f       	cpi	r25, 0xFF	; 255
    2734:	79 f0       	breq	.+30     	; 0x2754 <__fp_splitA+0x2a>
    2736:	87 95       	ror	r24
    2738:	08 95       	ret
    273a:	12 16       	cp	r1, r18
    273c:	13 06       	cpc	r1, r19
    273e:	14 06       	cpc	r1, r20
    2740:	55 1f       	adc	r21, r21
    2742:	f2 cf       	rjmp	.-28     	; 0x2728 <__fp_split3+0xe>
    2744:	46 95       	lsr	r20
    2746:	f1 df       	rcall	.-30     	; 0x272a <__fp_splitA>
    2748:	08 c0       	rjmp	.+16     	; 0x275a <__fp_splitA+0x30>
    274a:	16 16       	cp	r1, r22
    274c:	17 06       	cpc	r1, r23
    274e:	18 06       	cpc	r1, r24
    2750:	99 1f       	adc	r25, r25
    2752:	f1 cf       	rjmp	.-30     	; 0x2736 <__fp_splitA+0xc>
    2754:	86 95       	lsr	r24
    2756:	71 05       	cpc	r23, r1
    2758:	61 05       	cpc	r22, r1
    275a:	08 94       	sec
    275c:	08 95       	ret

0000275e <__fp_zero>:
    275e:	e8 94       	clt

00002760 <__fp_szero>:
    2760:	bb 27       	eor	r27, r27
    2762:	66 27       	eor	r22, r22
    2764:	77 27       	eor	r23, r23
    2766:	cb 01       	movw	r24, r22
    2768:	97 f9       	bld	r25, 7
    276a:	08 95       	ret

0000276c <inverse>:
    276c:	9b 01       	movw	r18, r22
    276e:	ac 01       	movw	r20, r24
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 e8       	ldi	r24, 0x80	; 128
    2776:	9f e3       	ldi	r25, 0x3F	; 63
    2778:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__divsf3>
    277c:	16 f0       	brts	.+4      	; 0x2782 <inverse+0x16>
    277e:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__fp_mpack>
    2782:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>
    2786:	68 94       	set
    2788:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>

0000278c <log>:
    278c:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    2790:	a8 f3       	brcs	.-22     	; 0x277c <inverse+0x10>
    2792:	99 23       	and	r25, r25
    2794:	c1 f3       	breq	.-16     	; 0x2786 <inverse+0x1a>
    2796:	ae f3       	brts	.-22     	; 0x2782 <inverse+0x16>
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	1f 93       	push	r17
    279e:	0f 93       	push	r16
    27a0:	ff 92       	push	r15
    27a2:	c9 2f       	mov	r28, r25
    27a4:	dd 27       	eor	r29, r29
    27a6:	88 23       	and	r24, r24
    27a8:	2a f0       	brmi	.+10     	; 0x27b4 <log+0x28>
    27aa:	21 97       	sbiw	r28, 0x01	; 1
    27ac:	66 0f       	add	r22, r22
    27ae:	77 1f       	adc	r23, r23
    27b0:	88 1f       	adc	r24, r24
    27b2:	da f7       	brpl	.-10     	; 0x27aa <log+0x1e>
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f eb       	ldi	r21, 0xBF	; 191
    27bc:	9f e3       	ldi	r25, 0x3F	; 63
    27be:	88 39       	cpi	r24, 0x98	; 152
    27c0:	20 f0       	brcs	.+8      	; 0x27ca <log+0x3e>
    27c2:	80 3e       	cpi	r24, 0xE0	; 224
    27c4:	38 f0       	brcs	.+14     	; 0x27d4 <log+0x48>
    27c6:	21 96       	adiw	r28, 0x01	; 1
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    27ce:	e7 ed       	ldi	r30, 0xD7	; 215
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <log+0x50>
    27d4:	0e 94 51 11 	call	0x22a2	; 0x22a2 <__addsf3>
    27d8:	e4 e0       	ldi	r30, 0x04	; 4
    27da:	f1 e0       	ldi	r31, 0x01	; 1
    27dc:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_powser>
    27e0:	8b 01       	movw	r16, r22
    27e2:	be 01       	movw	r22, r28
    27e4:	ec 01       	movw	r28, r24
    27e6:	fb 2e       	mov	r15, r27
    27e8:	6f 57       	subi	r22, 0x7F	; 127
    27ea:	71 09       	sbc	r23, r1
    27ec:	75 95       	asr	r23
    27ee:	77 1f       	adc	r23, r23
    27f0:	88 0b       	sbc	r24, r24
    27f2:	99 0b       	sbc	r25, r25
    27f4:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatsisf>
    27f8:	28 e1       	ldi	r18, 0x18	; 24
    27fa:	32 e7       	ldi	r19, 0x72	; 114
    27fc:	41 e3       	ldi	r20, 0x31	; 49
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsf3x>
    2804:	af 2d       	mov	r26, r15
    2806:	98 01       	movw	r18, r16
    2808:	ae 01       	movw	r20, r28
    280a:	ff 90       	pop	r15
    280c:	0f 91       	pop	r16
    280e:	1f 91       	pop	r17
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    2818:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>

0000281c <__mulsf3>:
    281c:	0e 94 21 14 	call	0x2842	; 0x2842 <__mulsf3x>
    2820:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_round>
    2824:	0e 94 2f 13 	call	0x265e	; 0x265e <__fp_pscA>
    2828:	38 f0       	brcs	.+14     	; 0x2838 <__mulsf3+0x1c>
    282a:	0e 94 36 13 	call	0x266c	; 0x266c <__fp_pscB>
    282e:	20 f0       	brcs	.+8      	; 0x2838 <__mulsf3+0x1c>
    2830:	95 23       	and	r25, r21
    2832:	11 f0       	breq	.+4      	; 0x2838 <__mulsf3+0x1c>
    2834:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    2838:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>
    283c:	11 24       	eor	r1, r1
    283e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>

00002842 <__mulsf3x>:
    2842:	0e 94 8d 13 	call	0x271a	; 0x271a <__fp_split3>
    2846:	70 f3       	brcs	.-36     	; 0x2824 <__mulsf3+0x8>

00002848 <__mulsf3_pse>:
    2848:	95 9f       	mul	r25, r21
    284a:	c1 f3       	breq	.-16     	; 0x283c <__mulsf3+0x20>
    284c:	95 0f       	add	r25, r21
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	55 1f       	adc	r21, r21
    2852:	62 9f       	mul	r22, r18
    2854:	f0 01       	movw	r30, r0
    2856:	72 9f       	mul	r23, r18
    2858:	bb 27       	eor	r27, r27
    285a:	f0 0d       	add	r31, r0
    285c:	b1 1d       	adc	r27, r1
    285e:	63 9f       	mul	r22, r19
    2860:	aa 27       	eor	r26, r26
    2862:	f0 0d       	add	r31, r0
    2864:	b1 1d       	adc	r27, r1
    2866:	aa 1f       	adc	r26, r26
    2868:	64 9f       	mul	r22, r20
    286a:	66 27       	eor	r22, r22
    286c:	b0 0d       	add	r27, r0
    286e:	a1 1d       	adc	r26, r1
    2870:	66 1f       	adc	r22, r22
    2872:	82 9f       	mul	r24, r18
    2874:	22 27       	eor	r18, r18
    2876:	b0 0d       	add	r27, r0
    2878:	a1 1d       	adc	r26, r1
    287a:	62 1f       	adc	r22, r18
    287c:	73 9f       	mul	r23, r19
    287e:	b0 0d       	add	r27, r0
    2880:	a1 1d       	adc	r26, r1
    2882:	62 1f       	adc	r22, r18
    2884:	83 9f       	mul	r24, r19
    2886:	a0 0d       	add	r26, r0
    2888:	61 1d       	adc	r22, r1
    288a:	22 1f       	adc	r18, r18
    288c:	74 9f       	mul	r23, r20
    288e:	33 27       	eor	r19, r19
    2890:	a0 0d       	add	r26, r0
    2892:	61 1d       	adc	r22, r1
    2894:	23 1f       	adc	r18, r19
    2896:	84 9f       	mul	r24, r20
    2898:	60 0d       	add	r22, r0
    289a:	21 1d       	adc	r18, r1
    289c:	82 2f       	mov	r24, r18
    289e:	76 2f       	mov	r23, r22
    28a0:	6a 2f       	mov	r22, r26
    28a2:	11 24       	eor	r1, r1
    28a4:	9f 57       	subi	r25, 0x7F	; 127
    28a6:	50 40       	sbci	r21, 0x00	; 0
    28a8:	9a f0       	brmi	.+38     	; 0x28d0 <__mulsf3_pse+0x88>
    28aa:	f1 f0       	breq	.+60     	; 0x28e8 <__mulsf3_pse+0xa0>
    28ac:	88 23       	and	r24, r24
    28ae:	4a f0       	brmi	.+18     	; 0x28c2 <__mulsf3_pse+0x7a>
    28b0:	ee 0f       	add	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	bb 1f       	adc	r27, r27
    28b6:	66 1f       	adc	r22, r22
    28b8:	77 1f       	adc	r23, r23
    28ba:	88 1f       	adc	r24, r24
    28bc:	91 50       	subi	r25, 0x01	; 1
    28be:	50 40       	sbci	r21, 0x00	; 0
    28c0:	a9 f7       	brne	.-22     	; 0x28ac <__mulsf3_pse+0x64>
    28c2:	9e 3f       	cpi	r25, 0xFE	; 254
    28c4:	51 05       	cpc	r21, r1
    28c6:	80 f0       	brcs	.+32     	; 0x28e8 <__mulsf3_pse+0xa0>
    28c8:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    28cc:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>
    28d0:	5f 3f       	cpi	r21, 0xFF	; 255
    28d2:	e4 f3       	brlt	.-8      	; 0x28cc <__mulsf3_pse+0x84>
    28d4:	98 3e       	cpi	r25, 0xE8	; 232
    28d6:	d4 f3       	brlt	.-12     	; 0x28cc <__mulsf3_pse+0x84>
    28d8:	86 95       	lsr	r24
    28da:	77 95       	ror	r23
    28dc:	67 95       	ror	r22
    28de:	b7 95       	ror	r27
    28e0:	f7 95       	ror	r31
    28e2:	e7 95       	ror	r30
    28e4:	9f 5f       	subi	r25, 0xFF	; 255
    28e6:	c1 f7       	brne	.-16     	; 0x28d8 <__mulsf3_pse+0x90>
    28e8:	fe 2b       	or	r31, r30
    28ea:	88 0f       	add	r24, r24
    28ec:	91 1d       	adc	r25, r1
    28ee:	96 95       	lsr	r25
    28f0:	87 95       	ror	r24
    28f2:	97 f9       	bld	r25, 7
    28f4:	08 95       	ret

000028f6 <pow>:
    28f6:	fa 01       	movw	r30, r20
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	30 96       	adiw	r30, 0x00	; 0
    28fe:	21 05       	cpc	r18, r1
    2900:	31 05       	cpc	r19, r1
    2902:	a1 f1       	breq	.+104    	; 0x296c <pow+0x76>
    2904:	61 15       	cp	r22, r1
    2906:	71 05       	cpc	r23, r1
    2908:	61 f4       	brne	.+24     	; 0x2922 <pow+0x2c>
    290a:	80 38       	cpi	r24, 0x80	; 128
    290c:	bf e3       	ldi	r27, 0x3F	; 63
    290e:	9b 07       	cpc	r25, r27
    2910:	49 f1       	breq	.+82     	; 0x2964 <pow+0x6e>
    2912:	68 94       	set
    2914:	90 38       	cpi	r25, 0x80	; 128
    2916:	81 05       	cpc	r24, r1
    2918:	61 f0       	breq	.+24     	; 0x2932 <pow+0x3c>
    291a:	80 38       	cpi	r24, 0x80	; 128
    291c:	bf ef       	ldi	r27, 0xFF	; 255
    291e:	9b 07       	cpc	r25, r27
    2920:	41 f0       	breq	.+16     	; 0x2932 <pow+0x3c>
    2922:	99 23       	and	r25, r25
    2924:	4a f5       	brpl	.+82     	; 0x2978 <pow+0x82>
    2926:	ff 3f       	cpi	r31, 0xFF	; 255
    2928:	e1 05       	cpc	r30, r1
    292a:	31 05       	cpc	r19, r1
    292c:	21 05       	cpc	r18, r1
    292e:	19 f1       	breq	.+70     	; 0x2976 <pow+0x80>
    2930:	e8 94       	clt
    2932:	08 94       	sec
    2934:	e7 95       	ror	r30
    2936:	d9 01       	movw	r26, r18
    2938:	aa 23       	and	r26, r26
    293a:	29 f4       	brne	.+10     	; 0x2946 <pow+0x50>
    293c:	ab 2f       	mov	r26, r27
    293e:	be 2f       	mov	r27, r30
    2940:	f8 5f       	subi	r31, 0xF8	; 248
    2942:	d0 f3       	brcs	.-12     	; 0x2938 <pow+0x42>
    2944:	10 c0       	rjmp	.+32     	; 0x2966 <pow+0x70>
    2946:	ff 5f       	subi	r31, 0xFF	; 255
    2948:	70 f4       	brcc	.+28     	; 0x2966 <pow+0x70>
    294a:	a6 95       	lsr	r26
    294c:	e0 f7       	brcc	.-8      	; 0x2946 <pow+0x50>
    294e:	f7 39       	cpi	r31, 0x97	; 151
    2950:	50 f0       	brcs	.+20     	; 0x2966 <pow+0x70>
    2952:	19 f0       	breq	.+6      	; 0x295a <pow+0x64>
    2954:	ff 3a       	cpi	r31, 0xAF	; 175
    2956:	38 f4       	brcc	.+14     	; 0x2966 <pow+0x70>
    2958:	9f 77       	andi	r25, 0x7F	; 127
    295a:	9f 93       	push	r25
    295c:	0d d0       	rcall	.+26     	; 0x2978 <pow+0x82>
    295e:	0f 90       	pop	r0
    2960:	07 fc       	sbrc	r0, 7
    2962:	90 58       	subi	r25, 0x80	; 128
    2964:	08 95       	ret
    2966:	46 f0       	brts	.+16     	; 0x2978 <pow+0x82>
    2968:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	80 e8       	ldi	r24, 0x80	; 128
    2972:	9f e3       	ldi	r25, 0x3F	; 63
    2974:	08 95       	ret
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	9f 77       	andi	r25, 0x7F	; 127
    297a:	5f 93       	push	r21
    297c:	4f 93       	push	r20
    297e:	3f 93       	push	r19
    2980:	2f 93       	push	r18
    2982:	0e 94 c6 13 	call	0x278c	; 0x278c <log>
    2986:	2f 91       	pop	r18
    2988:	3f 91       	pop	r19
    298a:	4f 91       	pop	r20
    298c:	5f 91       	pop	r21
    298e:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    2992:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <exp>

00002996 <sin>:
    2996:	9f 93       	push	r25
    2998:	0e 94 3f 13 	call	0x267e	; 0x267e <__fp_rempio2>
    299c:	0f 90       	pop	r0
    299e:	07 fc       	sbrc	r0, 7
    29a0:	ee 5f       	subi	r30, 0xFE	; 254
    29a2:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__fp_sinus>
    29a6:	19 f4       	brne	.+6      	; 0x29ae <sin+0x18>
    29a8:	16 f4       	brtc	.+4      	; 0x29ae <sin+0x18>
    29aa:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>
    29ae:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__fp_mpack>

000029b2 <sqrt>:
    29b2:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    29b6:	b8 f3       	brcs	.-18     	; 0x29a6 <sin+0x10>
    29b8:	99 23       	and	r25, r25
    29ba:	c9 f3       	breq	.-14     	; 0x29ae <sin+0x18>
    29bc:	b6 f3       	brts	.-20     	; 0x29aa <sin+0x14>
    29be:	9f 57       	subi	r25, 0x7F	; 127
    29c0:	55 0b       	sbc	r21, r21
    29c2:	87 ff       	sbrs	r24, 7
    29c4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__fp_norm2>
    29c8:	00 24       	eor	r0, r0
    29ca:	a0 e6       	ldi	r26, 0x60	; 96
    29cc:	40 ea       	ldi	r20, 0xA0	; 160
    29ce:	90 01       	movw	r18, r0
    29d0:	80 58       	subi	r24, 0x80	; 128
    29d2:	56 95       	lsr	r21
    29d4:	97 95       	ror	r25
    29d6:	28 f4       	brcc	.+10     	; 0x29e2 <sqrt+0x30>
    29d8:	80 5c       	subi	r24, 0xC0	; 192
    29da:	66 0f       	add	r22, r22
    29dc:	77 1f       	adc	r23, r23
    29de:	88 1f       	adc	r24, r24
    29e0:	20 f0       	brcs	.+8      	; 0x29ea <sqrt+0x38>
    29e2:	26 17       	cp	r18, r22
    29e4:	37 07       	cpc	r19, r23
    29e6:	48 07       	cpc	r20, r24
    29e8:	30 f4       	brcc	.+12     	; 0x29f6 <sqrt+0x44>
    29ea:	62 1b       	sub	r22, r18
    29ec:	73 0b       	sbc	r23, r19
    29ee:	84 0b       	sbc	r24, r20
    29f0:	20 29       	or	r18, r0
    29f2:	31 29       	or	r19, r1
    29f4:	4a 2b       	or	r20, r26
    29f6:	a6 95       	lsr	r26
    29f8:	17 94       	ror	r1
    29fa:	07 94       	ror	r0
    29fc:	20 25       	eor	r18, r0
    29fe:	31 25       	eor	r19, r1
    2a00:	4a 27       	eor	r20, r26
    2a02:	58 f7       	brcc	.-42     	; 0x29da <sqrt+0x28>
    2a04:	66 0f       	add	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	88 1f       	adc	r24, r24
    2a0a:	20 f0       	brcs	.+8      	; 0x2a14 <sqrt+0x62>
    2a0c:	26 17       	cp	r18, r22
    2a0e:	37 07       	cpc	r19, r23
    2a10:	48 07       	cpc	r20, r24
    2a12:	30 f4       	brcc	.+12     	; 0x2a20 <sqrt+0x6e>
    2a14:	62 0b       	sbc	r22, r18
    2a16:	73 0b       	sbc	r23, r19
    2a18:	84 0b       	sbc	r24, r20
    2a1a:	20 0d       	add	r18, r0
    2a1c:	31 1d       	adc	r19, r1
    2a1e:	41 1d       	adc	r20, r1
    2a20:	a0 95       	com	r26
    2a22:	81 f7       	brne	.-32     	; 0x2a04 <sqrt+0x52>
    2a24:	b9 01       	movw	r22, r18
    2a26:	84 2f       	mov	r24, r20
    2a28:	91 58       	subi	r25, 0x81	; 129
    2a2a:	88 0f       	add	r24, r24
    2a2c:	96 95       	lsr	r25
    2a2e:	87 95       	ror	r24
    2a30:	08 95       	ret

00002a32 <square>:
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__mulsf3>

00002a3a <tan>:
    2a3a:	df 93       	push	r29
    2a3c:	d9 2f       	mov	r29, r25
    2a3e:	0e 94 3f 13 	call	0x267e	; 0x267e <__fp_rempio2>
    2a42:	e6 95       	lsr	r30
    2a44:	d7 95       	ror	r29
    2a46:	2a ed       	ldi	r18, 0xDA	; 218
    2a48:	3f e0       	ldi	r19, 0x0F	; 15
    2a4a:	49 e4       	ldi	r20, 0x49	; 73
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	b3 3a       	cpi	r27, 0xA3	; 163
    2a50:	62 07       	cpc	r22, r18
    2a52:	73 07       	cpc	r23, r19
    2a54:	84 07       	cpc	r24, r20
    2a56:	95 07       	cpc	r25, r21
    2a58:	d7 95       	ror	r29
    2a5a:	3a f0       	brmi	.+14     	; 0x2a6a <tan+0x30>
    2a5c:	a2 ea       	ldi	r26, 0xA2	; 162
    2a5e:	49 ec       	ldi	r20, 0xC9	; 201
    2a60:	90 68       	ori	r25, 0x80	; 128
    2a62:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3x>
    2a66:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__fp_round>
    2a6a:	e1 e3       	ldi	r30, 0x31	; 49
    2a6c:	f1 e0       	ldi	r31, 0x01	; 1
    2a6e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__fp_powsodd>
    2a72:	dd 0f       	add	r29, r29
    2a74:	13 f0       	brvs	.+4      	; 0x2a7a <tan+0x40>
    2a76:	0e 94 b6 13 	call	0x276c	; 0x276c <inverse>
    2a7a:	dd 0f       	add	r29, r29
    2a7c:	0b f4       	brvc	.+2      	; 0x2a80 <tan+0x46>
    2a7e:	90 58       	subi	r25, 0x80	; 128
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret
    2a84:	29 f4       	brne	.+10     	; 0x2a90 <tan+0x56>
    2a86:	16 f0       	brts	.+4      	; 0x2a8c <tan+0x52>
    2a88:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    2a8c:	0c 94 af 13 	jmp	0x275e	; 0x275e <__fp_zero>
    2a90:	0c 94 05 13 	jmp	0x260a	; 0x260a <__fp_nan>

00002a94 <exp>:
    2a94:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    2a98:	a8 f3       	brcs	.-22     	; 0x2a84 <tan+0x4a>
    2a9a:	96 38       	cpi	r25, 0x86	; 134
    2a9c:	a0 f7       	brcc	.-24     	; 0x2a86 <tan+0x4c>
    2a9e:	07 f8       	bld	r0, 7
    2aa0:	0f 92       	push	r0
    2aa2:	e8 94       	clt
    2aa4:	2b e3       	ldi	r18, 0x3B	; 59
    2aa6:	3a ea       	ldi	r19, 0xAA	; 170
    2aa8:	48 eb       	ldi	r20, 0xB8	; 184
    2aaa:	5f e7       	ldi	r21, 0x7F	; 127
    2aac:	0e 94 24 14 	call	0x2848	; 0x2848 <__mulsf3_pse>
    2ab0:	0f 92       	push	r0
    2ab2:	0f 92       	push	r0
    2ab4:	0f 92       	push	r0
    2ab6:	4d b7       	in	r20, 0x3d	; 61
    2ab8:	5e b7       	in	r21, 0x3e	; 62
    2aba:	0f 92       	push	r0
    2abc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <modf>
    2ac0:	e4 e5       	ldi	r30, 0x54	; 84
    2ac2:	f1 e0       	ldi	r31, 0x01	; 1
    2ac4:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_powser>
    2ac8:	4f 91       	pop	r20
    2aca:	5f 91       	pop	r21
    2acc:	ef 91       	pop	r30
    2ace:	ff 91       	pop	r31
    2ad0:	e5 95       	asr	r30
    2ad2:	ee 1f       	adc	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	49 f0       	breq	.+18     	; 0x2aea <exp+0x56>
    2ad8:	fe 57       	subi	r31, 0x7E	; 126
    2ada:	e0 68       	ori	r30, 0x80	; 128
    2adc:	44 27       	eor	r20, r20
    2ade:	ee 0f       	add	r30, r30
    2ae0:	44 1f       	adc	r20, r20
    2ae2:	fa 95       	dec	r31
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <exp+0x4a>
    2ae6:	41 95       	neg	r20
    2ae8:	55 0b       	sbc	r21, r21
    2aea:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <ldexp>
    2aee:	0f 90       	pop	r0
    2af0:	07 fe       	sbrs	r0, 7
    2af2:	0c 94 b6 13 	jmp	0x276c	; 0x276c <inverse>
    2af6:	08 95       	ret

00002af8 <__fp_mpack>:
    2af8:	9f 3f       	cpi	r25, 0xFF	; 255
    2afa:	31 f0       	breq	.+12     	; 0x2b08 <__fp_mpack_finite+0xc>

00002afc <__fp_mpack_finite>:
    2afc:	91 50       	subi	r25, 0x01	; 1
    2afe:	20 f4       	brcc	.+8      	; 0x2b08 <__fp_mpack_finite+0xc>
    2b00:	87 95       	ror	r24
    2b02:	77 95       	ror	r23
    2b04:	67 95       	ror	r22
    2b06:	b7 95       	ror	r27
    2b08:	88 0f       	add	r24, r24
    2b0a:	91 1d       	adc	r25, r1
    2b0c:	96 95       	lsr	r25
    2b0e:	87 95       	ror	r24
    2b10:	97 f9       	bld	r25, 7
    2b12:	08 95       	ret

00002b14 <__fp_norm2>:
    2b14:	91 50       	subi	r25, 0x01	; 1
    2b16:	50 40       	sbci	r21, 0x00	; 0
    2b18:	66 0f       	add	r22, r22
    2b1a:	77 1f       	adc	r23, r23
    2b1c:	88 1f       	adc	r24, r24
    2b1e:	d2 f7       	brpl	.-12     	; 0x2b14 <__fp_norm2>
    2b20:	08 95       	ret

00002b22 <__fp_powsodd>:
    2b22:	9f 93       	push	r25
    2b24:	8f 93       	push	r24
    2b26:	7f 93       	push	r23
    2b28:	6f 93       	push	r22
    2b2a:	ff 93       	push	r31
    2b2c:	ef 93       	push	r30
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	0e 94 0e 14 	call	0x281c	; 0x281c <__mulsf3>
    2b36:	ef 91       	pop	r30
    2b38:	ff 91       	pop	r31
    2b3a:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_powser>
    2b3e:	2f 91       	pop	r18
    2b40:	3f 91       	pop	r19
    2b42:	4f 91       	pop	r20
    2b44:	5f 91       	pop	r21
    2b46:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__mulsf3>
    2b4a:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_inf>
    2b4e:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__fp_mpack>

00002b52 <ldexp>:
    2b52:	0e 94 95 13 	call	0x272a	; 0x272a <__fp_splitA>
    2b56:	d8 f3       	brcs	.-10     	; 0x2b4e <__fp_powsodd+0x2c>
    2b58:	99 23       	and	r25, r25
    2b5a:	c9 f3       	breq	.-14     	; 0x2b4e <__fp_powsodd+0x2c>
    2b5c:	94 0f       	add	r25, r20
    2b5e:	51 1d       	adc	r21, r1
    2b60:	a3 f3       	brvs	.-24     	; 0x2b4a <__fp_powsodd+0x28>
    2b62:	91 50       	subi	r25, 0x01	; 1
    2b64:	50 40       	sbci	r21, 0x00	; 0
    2b66:	94 f0       	brlt	.+36     	; 0x2b8c <ldexp+0x3a>
    2b68:	59 f0       	breq	.+22     	; 0x2b80 <ldexp+0x2e>
    2b6a:	88 23       	and	r24, r24
    2b6c:	32 f0       	brmi	.+12     	; 0x2b7a <ldexp+0x28>
    2b6e:	66 0f       	add	r22, r22
    2b70:	77 1f       	adc	r23, r23
    2b72:	88 1f       	adc	r24, r24
    2b74:	91 50       	subi	r25, 0x01	; 1
    2b76:	50 40       	sbci	r21, 0x00	; 0
    2b78:	c1 f7       	brne	.-16     	; 0x2b6a <ldexp+0x18>
    2b7a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	2c f7       	brge	.-54     	; 0x2b4a <__fp_powsodd+0x28>
    2b80:	88 0f       	add	r24, r24
    2b82:	91 1d       	adc	r25, r1
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	97 f9       	bld	r25, 7
    2b8a:	08 95       	ret
    2b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b8e:	ac f0       	brlt	.+42     	; 0x2bba <ldexp+0x68>
    2b90:	98 3e       	cpi	r25, 0xE8	; 232
    2b92:	9c f0       	brlt	.+38     	; 0x2bba <ldexp+0x68>
    2b94:	bb 27       	eor	r27, r27
    2b96:	86 95       	lsr	r24
    2b98:	77 95       	ror	r23
    2b9a:	67 95       	ror	r22
    2b9c:	b7 95       	ror	r27
    2b9e:	08 f4       	brcc	.+2      	; 0x2ba2 <ldexp+0x50>
    2ba0:	b1 60       	ori	r27, 0x01	; 1
    2ba2:	93 95       	inc	r25
    2ba4:	c1 f7       	brne	.-16     	; 0x2b96 <ldexp+0x44>
    2ba6:	bb 0f       	add	r27, r27
    2ba8:	58 f7       	brcc	.-42     	; 0x2b80 <ldexp+0x2e>
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <ldexp+0x5e>
    2bac:	60 ff       	sbrs	r22, 0
    2bae:	e8 cf       	rjmp	.-48     	; 0x2b80 <ldexp+0x2e>
    2bb0:	6f 5f       	subi	r22, 0xFF	; 255
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	e3 cf       	rjmp	.-58     	; 0x2b80 <ldexp+0x2e>
    2bba:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_szero>

00002bbe <modf>:
    2bbe:	fa 01       	movw	r30, r20
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	aa 0f       	add	r26, r26
    2bc4:	bb 1f       	adc	r27, r27
    2bc6:	9b 01       	movw	r18, r22
    2bc8:	ac 01       	movw	r20, r24
    2bca:	bf 57       	subi	r27, 0x7F	; 127
    2bcc:	28 f4       	brcc	.+10     	; 0x2bd8 <modf+0x1a>
    2bce:	22 27       	eor	r18, r18
    2bd0:	33 27       	eor	r19, r19
    2bd2:	44 27       	eor	r20, r20
    2bd4:	50 78       	andi	r21, 0x80	; 128
    2bd6:	20 c0       	rjmp	.+64     	; 0x2c18 <modf+0x5a>
    2bd8:	b7 51       	subi	r27, 0x17	; 23
    2bda:	90 f4       	brcc	.+36     	; 0x2c00 <modf+0x42>
    2bdc:	ab 2f       	mov	r26, r27
    2bde:	00 24       	eor	r0, r0
    2be0:	46 95       	lsr	r20
    2be2:	37 95       	ror	r19
    2be4:	27 95       	ror	r18
    2be6:	01 1c       	adc	r0, r1
    2be8:	a3 95       	inc	r26
    2bea:	d2 f3       	brmi	.-12     	; 0x2be0 <modf+0x22>
    2bec:	00 20       	and	r0, r0
    2bee:	71 f0       	breq	.+28     	; 0x2c0c <modf+0x4e>
    2bf0:	22 0f       	add	r18, r18
    2bf2:	33 1f       	adc	r19, r19
    2bf4:	44 1f       	adc	r20, r20
    2bf6:	b3 95       	inc	r27
    2bf8:	da f3       	brmi	.-10     	; 0x2bf0 <modf+0x32>
    2bfa:	0e d0       	rcall	.+28     	; 0x2c18 <modf+0x5a>
    2bfc:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__subsf3>
    2c00:	61 30       	cpi	r22, 0x01	; 1
    2c02:	71 05       	cpc	r23, r1
    2c04:	a0 e8       	ldi	r26, 0x80	; 128
    2c06:	8a 07       	cpc	r24, r26
    2c08:	b9 46       	sbci	r27, 0x69	; 105
    2c0a:	30 f4       	brcc	.+12     	; 0x2c18 <modf+0x5a>
    2c0c:	9b 01       	movw	r18, r22
    2c0e:	ac 01       	movw	r20, r24
    2c10:	66 27       	eor	r22, r22
    2c12:	77 27       	eor	r23, r23
    2c14:	88 27       	eor	r24, r24
    2c16:	90 78       	andi	r25, 0x80	; 128
    2c18:	30 96       	adiw	r30, 0x00	; 0
    2c1a:	21 f0       	breq	.+8      	; 0x2c24 <modf+0x66>
    2c1c:	20 83       	st	Z, r18
    2c1e:	31 83       	std	Z+1, r19	; 0x01
    2c20:	42 83       	std	Z+2, r20	; 0x02
    2c22:	53 83       	std	Z+3, r21	; 0x03
    2c24:	08 95       	ret

00002c26 <do_rand>:
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	ec 01       	movw	r28, r24
    2c3c:	68 81       	ld	r22, Y
    2c3e:	79 81       	ldd	r23, Y+1	; 0x01
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	9b 81       	ldd	r25, Y+3	; 0x03
    2c44:	61 15       	cp	r22, r1
    2c46:	71 05       	cpc	r23, r1
    2c48:	81 05       	cpc	r24, r1
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	21 f4       	brne	.+8      	; 0x2c56 <do_rand+0x30>
    2c4e:	64 e2       	ldi	r22, 0x24	; 36
    2c50:	79 ed       	ldi	r23, 0xD9	; 217
    2c52:	8b e5       	ldi	r24, 0x5B	; 91
    2c54:	97 e0       	ldi	r25, 0x07	; 7
    2c56:	2d e1       	ldi	r18, 0x1D	; 29
    2c58:	33 ef       	ldi	r19, 0xF3	; 243
    2c5a:	41 e0       	ldi	r20, 0x01	; 1
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__divmodsi4>
    2c62:	49 01       	movw	r8, r18
    2c64:	5a 01       	movw	r10, r20
    2c66:	9b 01       	movw	r18, r22
    2c68:	ac 01       	movw	r20, r24
    2c6a:	a7 ea       	ldi	r26, 0xA7	; 167
    2c6c:	b1 e4       	ldi	r27, 0x41	; 65
    2c6e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__muluhisi3>
    2c72:	6b 01       	movw	r12, r22
    2c74:	7c 01       	movw	r14, r24
    2c76:	ac ee       	ldi	r26, 0xEC	; 236
    2c78:	b4 ef       	ldi	r27, 0xF4	; 244
    2c7a:	a5 01       	movw	r20, r10
    2c7c:	94 01       	movw	r18, r8
    2c7e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <__mulohisi3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	8c 0d       	add	r24, r12
    2c88:	9d 1d       	adc	r25, r13
    2c8a:	ae 1d       	adc	r26, r14
    2c8c:	bf 1d       	adc	r27, r15
    2c8e:	b7 ff       	sbrs	r27, 7
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <do_rand+0x72>
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	a1 09       	sbc	r26, r1
    2c96:	b0 48       	sbci	r27, 0x80	; 128
    2c98:	88 83       	st	Y, r24
    2c9a:	99 83       	std	Y+1, r25	; 0x01
    2c9c:	aa 83       	std	Y+2, r26	; 0x02
    2c9e:	bb 83       	std	Y+3, r27	; 0x03
    2ca0:	9f 77       	andi	r25, 0x7F	; 127
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
    2cb2:	9f 90       	pop	r9
    2cb4:	8f 90       	pop	r8
    2cb6:	08 95       	ret

00002cb8 <rand_r>:
    2cb8:	0e 94 13 16 	call	0x2c26	; 0x2c26 <do_rand>
    2cbc:	08 95       	ret

00002cbe <rand>:
    2cbe:	87 e0       	ldi	r24, 0x07	; 7
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	0e 94 13 16 	call	0x2c26	; 0x2c26 <do_rand>
    2cc6:	08 95       	ret

00002cc8 <srand>:
    2cc8:	a0 e0       	ldi	r26, 0x00	; 0
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	80 93 07 01 	sts	0x0107, r24
    2cd0:	90 93 08 01 	sts	0x0108, r25
    2cd4:	a0 93 09 01 	sts	0x0109, r26
    2cd8:	b0 93 0a 01 	sts	0x010A, r27
    2cdc:	08 95       	ret

00002cde <eeprom_read_byte>:
    2cde:	f9 99       	sbic	0x1f, 1	; 31
    2ce0:	fe cf       	rjmp	.-4      	; 0x2cde <eeprom_read_byte>
    2ce2:	92 bd       	out	0x22, r25	; 34
    2ce4:	81 bd       	out	0x21, r24	; 33
    2ce6:	f8 9a       	sbi	0x1f, 0	; 31
    2ce8:	99 27       	eor	r25, r25
    2cea:	80 b5       	in	r24, 0x20	; 32
    2cec:	08 95       	ret

00002cee <eeprom_write_byte>:
    2cee:	26 2f       	mov	r18, r22

00002cf0 <eeprom_write_r18>:
    2cf0:	f9 99       	sbic	0x1f, 1	; 31
    2cf2:	fe cf       	rjmp	.-4      	; 0x2cf0 <eeprom_write_r18>
    2cf4:	1f ba       	out	0x1f, r1	; 31
    2cf6:	92 bd       	out	0x22, r25	; 34
    2cf8:	81 bd       	out	0x21, r24	; 33
    2cfa:	20 bd       	out	0x20, r18	; 32
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	fa 9a       	sbi	0x1f, 2	; 31
    2d02:	f9 9a       	sbi	0x1f, 1	; 31
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	08 95       	ret

00002d0a <__divmodsi4>:
    2d0a:	05 2e       	mov	r0, r21
    2d0c:	97 fb       	bst	r25, 7
    2d0e:	1e f4       	brtc	.+6      	; 0x2d16 <__divmodsi4+0xc>
    2d10:	00 94       	com	r0
    2d12:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__negsi2>
    2d16:	57 fd       	sbrc	r21, 7
    2d18:	07 d0       	rcall	.+14     	; 0x2d28 <__divmodsi4_neg2>
    2d1a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__udivmodsi4>
    2d1e:	07 fc       	sbrc	r0, 7
    2d20:	03 d0       	rcall	.+6      	; 0x2d28 <__divmodsi4_neg2>
    2d22:	4e f4       	brtc	.+18     	; 0x2d36 <__divmodsi4_exit>
    2d24:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__negsi2>

00002d28 <__divmodsi4_neg2>:
    2d28:	50 95       	com	r21
    2d2a:	40 95       	com	r20
    2d2c:	30 95       	com	r19
    2d2e:	21 95       	neg	r18
    2d30:	3f 4f       	sbci	r19, 0xFF	; 255
    2d32:	4f 4f       	sbci	r20, 0xFF	; 255
    2d34:	5f 4f       	sbci	r21, 0xFF	; 255

00002d36 <__divmodsi4_exit>:
    2d36:	08 95       	ret

00002d38 <__negsi2>:
    2d38:	90 95       	com	r25
    2d3a:	80 95       	com	r24
    2d3c:	70 95       	com	r23
    2d3e:	61 95       	neg	r22
    2d40:	7f 4f       	sbci	r23, 0xFF	; 255
    2d42:	8f 4f       	sbci	r24, 0xFF	; 255
    2d44:	9f 4f       	sbci	r25, 0xFF	; 255
    2d46:	08 95       	ret

00002d48 <__muluhisi3>:
    2d48:	0e 94 2d 11 	call	0x225a	; 0x225a <__umulhisi3>
    2d4c:	a5 9f       	mul	r26, r21
    2d4e:	90 0d       	add	r25, r0
    2d50:	b4 9f       	mul	r27, r20
    2d52:	90 0d       	add	r25, r0
    2d54:	a4 9f       	mul	r26, r20
    2d56:	80 0d       	add	r24, r0
    2d58:	91 1d       	adc	r25, r1
    2d5a:	11 24       	eor	r1, r1
    2d5c:	08 95       	ret

00002d5e <__mulshisi3>:
    2d5e:	b7 ff       	sbrs	r27, 7
    2d60:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__muluhisi3>

00002d64 <__mulohisi3>:
    2d64:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__muluhisi3>
    2d68:	82 1b       	sub	r24, r18
    2d6a:	93 0b       	sbc	r25, r19
    2d6c:	08 95       	ret

00002d6e <__udivmodsi4>:
    2d6e:	a1 e2       	ldi	r26, 0x21	; 33
    2d70:	1a 2e       	mov	r1, r26
    2d72:	aa 1b       	sub	r26, r26
    2d74:	bb 1b       	sub	r27, r27
    2d76:	fd 01       	movw	r30, r26
    2d78:	0d c0       	rjmp	.+26     	; 0x2d94 <__udivmodsi4_ep>

00002d7a <__udivmodsi4_loop>:
    2d7a:	aa 1f       	adc	r26, r26
    2d7c:	bb 1f       	adc	r27, r27
    2d7e:	ee 1f       	adc	r30, r30
    2d80:	ff 1f       	adc	r31, r31
    2d82:	a2 17       	cp	r26, r18
    2d84:	b3 07       	cpc	r27, r19
    2d86:	e4 07       	cpc	r30, r20
    2d88:	f5 07       	cpc	r31, r21
    2d8a:	20 f0       	brcs	.+8      	; 0x2d94 <__udivmodsi4_ep>
    2d8c:	a2 1b       	sub	r26, r18
    2d8e:	b3 0b       	sbc	r27, r19
    2d90:	e4 0b       	sbc	r30, r20
    2d92:	f5 0b       	sbc	r31, r21

00002d94 <__udivmodsi4_ep>:
    2d94:	66 1f       	adc	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	1a 94       	dec	r1
    2d9e:	69 f7       	brne	.-38     	; 0x2d7a <__udivmodsi4_loop>
    2da0:	60 95       	com	r22
    2da2:	70 95       	com	r23
    2da4:	80 95       	com	r24
    2da6:	90 95       	com	r25
    2da8:	9b 01       	movw	r18, r22
    2daa:	ac 01       	movw	r20, r24
    2dac:	bd 01       	movw	r22, r26
    2dae:	cf 01       	movw	r24, r30
    2db0:	08 95       	ret

00002db2 <_exit>:
    2db2:	f8 94       	cli

00002db4 <__stop_program>:
    2db4:	ff cf       	rjmp	.-2      	; 0x2db4 <__stop_program>
